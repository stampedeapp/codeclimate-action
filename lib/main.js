"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toCommandProperties = exports.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    exports.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    exports.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.issue = exports.issueCommand = void 0;
    var os = __importStar(require("os"));
    var utils_1 = require_utils();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    exports.issueCommand = issueCommand;
    function issue(name, message = "") {
      issueCommand(name, {}, message);
    }
    exports.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    function escapeProperty(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/@actions/core/node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/@actions/core/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
    var fs = __importStar(require("fs"));
    var os = __importStar(require("os"));
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var utils_1 = require_utils();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: "utf8"
      });
    }
    exports.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value) {
      const delimiter = `ghadelimiter_${uuid_1.v4()}`;
      const convertedValue = utils_1.toCommandValue(value);
      if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
    }
    exports.prepareKeyValueMessage = prepareKeyValueMessage;
  }
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/lib/proxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkBypass = exports.getProxyUrl = void 0;
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === "https:";
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        } else {
          return process.env["http_proxy"] || process.env["HTTP_PROXY"];
        }
      })();
      if (proxyVar) {
        return new URL(proxyVar);
      } else {
        return void 0;
      }
    }
    exports.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
        if (upperReqHosts.some((x) => x === upperNoProxyItem)) {
          return true;
        }
      }
      return false;
    }
    exports.checkBypass = checkBypass;
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports) {
    "use strict";
    var net = require("net");
    var tls = require("tls");
    var http = require("http");
    var https = require("https");
    var events = require("events");
    var assert = require("assert");
    var util = require("util");
    exports.httpOverHttp = httpOverHttp;
    exports.httpsOverHttp = httpsOverHttp;
    exports.httpOverHttps = httpOverHttps;
    exports.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on("free", function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self2.requests.length; i < len; ++i) {
          var pending = self2.requests[i];
          if (pending.host === options2.host && pending.port === options2.port) {
            self2.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug2("making CONNECT request");
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head) {
        process.nextTick(function() {
          onConnect(res, socket, head);
        });
      }
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug2(
            "tunneling socket could not be established, statusCode=%d",
            res.statusCode
          );
          socket.destroy();
          var error2 = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error2.code = "ECONNRESET";
          options.request.emit("error", error2);
          self2.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug2("got illegal response body from proxy");
          socket.destroy();
          var error2 = new Error("got illegal response body from proxy");
          error2.code = "ECONNRESET";
          options.request.emit("error", error2);
          self2.removeSocket(placeholder);
          return;
        }
        debug2("tunneling connection has established");
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      function onError(cause) {
        connectReq.removeAllListeners();
        debug2(
          "tunneling socket could not be established, cause=%s\n",
          cause.message,
          cause.stack
        );
        var error2 = new Error("tunneling socket could not be established, cause=" + cause.message);
        error2.code = "ECONNRESET";
        options.request.emit("error", error2);
        self2.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function(socket2) {
          pending.request.onSocket(socket2);
        });
      }
    };
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === "object") {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug2;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug2 = function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      };
    } else {
      debug2 = function() {
      };
    }
    exports.debug = debug2;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports, module2) {
    module2.exports = require_tunnel();
  }
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  "node_modules/@actions/http-client/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
    var http = __importStar(require("http"));
    var https = __importStar(require("https"));
    var pm = __importStar(require_proxy());
    var tunnel = __importStar(require_tunnel2());
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
    var Headers;
    (function(Headers2) {
      Headers2["Accept"] = "accept";
      Headers2["ContentType"] = "content-type";
    })(Headers = exports.Headers || (exports.Headers = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    exports.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class extends Error {
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
      }
    };
    exports.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            let output = Buffer.alloc(0);
            this.message.on("data", (chunk) => {
              output = Buffer.concat([output, chunk]);
            });
            this.message.on("end", () => {
              resolve(output.toString());
            });
          }));
        });
      }
    };
    exports.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    exports.isHttps = isHttps;
    var HttpClient = class {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          const parsedUrl = new URL(requestUrl);
          let info2 = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info2, data);
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info2, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header];
                  }
                }
              }
              info2 = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info2, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      requestRaw(info2, data) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error("Unknown error"));
              } else {
                resolve(res);
              }
            }
            this.requestRawWithCallback(info2, data, callbackForResult);
          });
        });
      }
      requestRawWithCallback(info2, data, onResult) {
        if (typeof data === "string") {
          if (!info2.options.headers) {
            info2.options.headers = {};
          }
          info2.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        const req = info2.httpModule.request(info2.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info2.options.path}`));
        });
        req.on("error", function(err) {
          handleResult(err);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info2 = {};
        info2.parsedUrl = requestUrl;
        const usingSsl = info2.parsedUrl.protocol === "https:";
        info2.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info2.options = {};
        info2.options.host = info2.parsedUrl.hostname;
        info2.options.port = info2.parsedUrl.port ? parseInt(info2.parsedUrl.port) : defaultPort;
        info2.options.path = (info2.parsedUrl.pathname || "") + (info2.parsedUrl.search || "");
        info2.options.method = method;
        info2.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info2.options.headers["user-agent"] = this.userAgent;
        }
        info2.options.agent = this._getAgent(info2.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info2.options);
          }
        }
        return info2;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
              proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
            }), { host: proxyUrl.hostname, port: proxyUrl.port })
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (this._keepAlive && !agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (!agent) {
          agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve) => setTimeout(() => resolve(), ms));
        });
      }
      _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode || 0;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode === HttpCodes.NotFound) {
              resolve(response);
            }
            function dateTimeDeserializer(key, value) {
              if (typeof value === "string") {
                const a = new Date(value);
                if (!isNaN(a.valueOf())) {
                  return a;
                }
              }
              return value;
            }
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                response.result = obj;
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = `Failed request: (${statusCode})`;
              }
              const err = new HttpClientError(msg, statusCode);
              err.result = response.result;
              reject(err);
            } else {
              resolve(response);
            }
          }));
        });
      }
    };
    exports.HttpClient = HttpClient;
    var lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
  }
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/lib/auth.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
    var BasicCredentialHandler = class {
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Bearer ${this.token}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error2) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error2.statusCode}
 
        Error Message: ${error2.result.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            let id_token_url = OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            core_1.debug(`ID token url is ${id_token_url}`);
            const id_token = yield OidcClient.getCall(id_token_url);
            core_1.setSecret(id_token);
            return id_token;
          } catch (error2) {
            throw new Error(`Error message: ${error2.message}`);
          }
        });
      }
    };
    exports.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  "node_modules/@actions/core/lib/summary.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
    var os_1 = require("os");
    var fs_1 = require("fs");
    var { access, appendFile, writeFile } = fs_1.promises;
    exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    var Summary = class {
      constructor() {
        this._buffer = "";
      }
      filePath() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      write(options) {
        return __awaiter(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      clear() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      stringify() {
        return this._buffer;
      }
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
      }
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
      }
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
      }
      addLink(text, href) {
        const element = this.wrap("a", text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports.markdownSummary = _summary;
    exports.summary = _summary;
  }
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  "node_modules/@actions/core/lib/path-utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
    var path = __importStar(require("path"));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, "/");
    }
    exports.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, "\\");
    }
    exports.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path.sep);
    }
    exports.toPlatformPath = toPlatformPath;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils();
    var os = __importStar(require("os"));
    var path = __importStar(require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = utils_1.toCommandValue(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("ENV", file_command_1.prepareKeyValueMessage(name, val));
      }
      command_1.issueCommand("set-env", { name }, convertedVal);
    }
    exports.exportVariable = exportVariable;
    function setSecret(secret) {
      command_1.issueCommand("add-mask", {}, secret);
    }
    exports.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        file_command_1.issueFileCommand("PATH", inputPath);
      } else {
        command_1.issueCommand("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path.delimiter}${process.env["PATH"]}`;
    }
    exports.addPath = addPath;
    function getInput2(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports.getInput = getInput2;
    function getMultilineInput(name, options) {
      const inputs = getInput2(name, options).split("\n").filter((x) => x !== "");
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    exports.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput2(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports.getBooleanInput = getBooleanInput;
    function setOutput(name, value) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("OUTPUT", file_command_1.prepareKeyValueMessage(name, value));
      }
      process.stdout.write(os.EOL);
      command_1.issueCommand("set-output", { name }, utils_1.toCommandValue(value));
    }
    exports.setOutput = setOutput;
    function setCommandEcho(enabled) {
      command_1.issue("echo", enabled ? "on" : "off");
    }
    exports.setCommandEcho = setCommandEcho;
    function setFailed(message) {
      process.exitCode = ExitCode.Failure;
      error2(message);
    }
    exports.setFailed = setFailed;
    function isDebug() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    exports.isDebug = isDebug;
    function debug2(message) {
      command_1.issueCommand("debug", {}, message);
    }
    exports.debug = debug2;
    function error2(message, properties = {}) {
      command_1.issueCommand("error", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.error = error2;
    function warning2(message, properties = {}) {
      command_1.issueCommand("warning", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.warning = warning2;
    function notice(message, properties = {}) {
      command_1.issueCommand("notice", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.notice = notice;
    function info2(message) {
      process.stdout.write(message + os.EOL);
    }
    exports.info = info2;
    function startGroup(name) {
      command_1.issue("group", name);
    }
    exports.startGroup = startGroup;
    function endGroup() {
      command_1.issue("endgroup");
    }
    exports.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports.group = group;
    function saveState(name, value) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("STATE", file_command_1.prepareKeyValueMessage(name, value));
      }
      command_1.issueCommand("save-state", { name }, utils_1.toCommandValue(value));
    }
    exports.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    exports.getState = getState;
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports, "summary", { enumerable: true, get: function() {
      return summary_1.summary;
    } });
    var summary_2 = require_summary();
    Object.defineProperty(exports, "markdownSummary", { enumerable: true, get: function() {
      return summary_2.markdownSummary;
    } });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports, "toPosixPath", { enumerable: true, get: function() {
      return path_utils_1.toPosixPath;
    } });
    Object.defineProperty(exports, "toWin32Path", { enumerable: true, get: function() {
      return path_utils_1.toWin32Path;
    } });
    Object.defineProperty(exports, "toPlatformPath", { enumerable: true, get: function() {
      return path_utils_1.toPlatformPath;
    } });
  }
});

// node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({
  "node_modules/@actions/io/lib/io-util.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rename = exports.readlink = exports.readdir = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
    var fs = __importStar(require("fs"));
    var path = __importStar(require("path"));
    _a = fs.promises, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
    exports.IS_WINDOWS = process.platform === "win32";
    function exists(fsPath) {
      return __awaiter(this, void 0, void 0, function* () {
        try {
          yield exports.stat(fsPath);
        } catch (err) {
          if (err.code === "ENOENT") {
            return false;
          }
          throw err;
        }
        return true;
      });
    }
    exports.exists = exists;
    function isDirectory(fsPath, useStat = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
        return stats.isDirectory();
      });
    }
    exports.isDirectory = isDirectory;
    function isRooted(p) {
      p = normalizeSeparators(p);
      if (!p) {
        throw new Error('isRooted() parameter "p" cannot be empty');
      }
      if (exports.IS_WINDOWS) {
        return p.startsWith("\\") || /^[A-Z]:/i.test(p);
      }
      return p.startsWith("/");
    }
    exports.isRooted = isRooted;
    function tryGetExecutablePath(filePath, extensions) {
      return __awaiter(this, void 0, void 0, function* () {
        let stats = void 0;
        try {
          stats = yield exports.stat(filePath);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
          }
        }
        if (stats && stats.isFile()) {
          if (exports.IS_WINDOWS) {
            const upperExt = path.extname(filePath).toUpperCase();
            if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) {
              return filePath;
            }
          } else {
            if (isUnixExecutable(stats)) {
              return filePath;
            }
          }
        }
        const originalFilePath = filePath;
        for (const extension of extensions) {
          filePath = originalFilePath + extension;
          stats = void 0;
          try {
            stats = yield exports.stat(filePath);
          } catch (err) {
            if (err.code !== "ENOENT") {
              console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
          }
          if (stats && stats.isFile()) {
            if (exports.IS_WINDOWS) {
              try {
                const directory = path.dirname(filePath);
                const upperName = path.basename(filePath).toUpperCase();
                for (const actualName of yield exports.readdir(directory)) {
                  if (upperName === actualName.toUpperCase()) {
                    filePath = path.join(directory, actualName);
                    break;
                  }
                }
              } catch (err) {
                console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
              }
              return filePath;
            } else {
              if (isUnixExecutable(stats)) {
                return filePath;
              }
            }
          }
        }
        return "";
      });
    }
    exports.tryGetExecutablePath = tryGetExecutablePath;
    function normalizeSeparators(p) {
      p = p || "";
      if (exports.IS_WINDOWS) {
        p = p.replace(/\//g, "\\");
        return p.replace(/\\\\+/g, "\\");
      }
      return p.replace(/\/\/+/g, "/");
    }
    function isUnixExecutable(stats) {
      return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
    }
    function getCmdPath() {
      var _a2;
      return (_a2 = process.env["COMSPEC"]) !== null && _a2 !== void 0 ? _a2 : `cmd.exe`;
    }
    exports.getCmdPath = getCmdPath;
  }
});

// node_modules/@actions/io/lib/io.js
var require_io = __commonJS({
  "node_modules/@actions/io/lib/io.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
    var assert_1 = require("assert");
    var childProcess = __importStar(require("child_process"));
    var path = __importStar(require("path"));
    var util_1 = require("util");
    var ioUtil = __importStar(require_io_util());
    var exec2 = util_1.promisify(childProcess.exec);
    var execFile = util_1.promisify(childProcess.execFile);
    function cp(source, dest, options = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        const { force, recursive, copySourceDirectory } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        if (destStat && destStat.isFile() && !force) {
          return;
        }
        const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path.join(dest, path.basename(source)) : dest;
        if (!(yield ioUtil.exists(source))) {
          throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
          if (!recursive) {
            throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
          } else {
            yield cpDirRecursive(source, newDest, 0, force);
          }
        } else {
          if (path.relative(source, newDest) === "") {
            throw new Error(`'${newDest}' and '${source}' are the same file`);
          }
          yield copyFile(source, newDest, force);
        }
      });
    }
    exports.cp = cp;
    function mv(source, dest, options = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
          let destExists = true;
          if (yield ioUtil.isDirectory(dest)) {
            dest = path.join(dest, path.basename(source));
            destExists = yield ioUtil.exists(dest);
          }
          if (destExists) {
            if (options.force == null || options.force) {
              yield rmRF(dest);
            } else {
              throw new Error("Destination already exists");
            }
          }
        }
        yield mkdirP(path.dirname(dest));
        yield ioUtil.rename(source, dest);
      });
    }
    exports.mv = mv;
    function rmRF(inputPath) {
      return __awaiter(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
          if (/[*"<>|]/.test(inputPath)) {
            throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
          }
          try {
            const cmdPath = ioUtil.getCmdPath();
            if (yield ioUtil.isDirectory(inputPath, true)) {
              yield exec2(`${cmdPath} /s /c "rd /s /q "%inputPath%""`, {
                env: { inputPath }
              });
            } else {
              yield exec2(`${cmdPath} /s /c "del /f /a "%inputPath%""`, {
                env: { inputPath }
              });
            }
          } catch (err) {
            if (err.code !== "ENOENT")
              throw err;
          }
          try {
            yield ioUtil.unlink(inputPath);
          } catch (err) {
            if (err.code !== "ENOENT")
              throw err;
          }
        } else {
          let isDir = false;
          try {
            isDir = yield ioUtil.isDirectory(inputPath);
          } catch (err) {
            if (err.code !== "ENOENT")
              throw err;
            return;
          }
          if (isDir) {
            yield execFile(`rm`, [`-rf`, `${inputPath}`]);
          } else {
            yield ioUtil.unlink(inputPath);
          }
        }
      });
    }
    exports.rmRF = rmRF;
    function mkdirP(fsPath) {
      return __awaiter(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, "a path argument must be provided");
        yield ioUtil.mkdir(fsPath, { recursive: true });
      });
    }
    exports.mkdirP = mkdirP;
    function which(tool, check) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        if (check) {
          const result = yield which(tool, false);
          if (!result) {
            if (ioUtil.IS_WINDOWS) {
              throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
            } else {
              throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
            }
          }
          return result;
        }
        const matches = yield findInPath(tool);
        if (matches && matches.length > 0) {
          return matches[0];
        }
        return "";
      });
    }
    exports.which = which;
    function findInPath(tool) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        const extensions = [];
        if (ioUtil.IS_WINDOWS && process.env["PATHEXT"]) {
          for (const extension of process.env["PATHEXT"].split(path.delimiter)) {
            if (extension) {
              extensions.push(extension);
            }
          }
        }
        if (ioUtil.isRooted(tool)) {
          const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
          if (filePath) {
            return [filePath];
          }
          return [];
        }
        if (tool.includes(path.sep)) {
          return [];
        }
        const directories = [];
        if (process.env.PATH) {
          for (const p of process.env.PATH.split(path.delimiter)) {
            if (p) {
              directories.push(p);
            }
          }
        }
        const matches = [];
        for (const directory of directories) {
          const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);
          if (filePath) {
            matches.push(filePath);
          }
        }
        return matches;
      });
    }
    exports.findInPath = findInPath;
    function readCopyOptions(options) {
      const force = options.force == null ? true : options.force;
      const recursive = Boolean(options.recursive);
      const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
      return { force, recursive, copySourceDirectory };
    }
    function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
      return __awaiter(this, void 0, void 0, function* () {
        if (currentDepth >= 255)
          return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
          const srcFile = `${sourceDir}/${fileName}`;
          const destFile = `${destDir}/${fileName}`;
          const srcFileStat = yield ioUtil.lstat(srcFile);
          if (srcFileStat.isDirectory()) {
            yield cpDirRecursive(srcFile, destFile, currentDepth, force);
          } else {
            yield copyFile(srcFile, destFile, force);
          }
        }
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
      });
    }
    function copyFile(srcFile, destFile, force) {
      return __awaiter(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
          try {
            yield ioUtil.lstat(destFile);
            yield ioUtil.unlink(destFile);
          } catch (e) {
            if (e.code === "EPERM") {
              yield ioUtil.chmod(destFile, "0666");
              yield ioUtil.unlink(destFile);
            }
          }
          const symlinkFull = yield ioUtil.readlink(srcFile);
          yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? "junction" : null);
        } else if (!(yield ioUtil.exists(destFile)) || force) {
          yield ioUtil.copyFile(srcFile, destFile);
        }
      });
    }
  }
});

// node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({
  "node_modules/@actions/exec/lib/toolrunner.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.argStringToArray = exports.ToolRunner = void 0;
    var os = __importStar(require("os"));
    var events = __importStar(require("events"));
    var child = __importStar(require("child_process"));
    var path = __importStar(require("path"));
    var io = __importStar(require_io());
    var ioUtil = __importStar(require_io_util());
    var timers_1 = require("timers");
    var IS_WINDOWS = process.platform === "win32";
    var ToolRunner = class extends events.EventEmitter {
      constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
          throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
      }
      _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
          this.options.listeners.debug(message);
        }
      }
      _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? "" : "[command]";
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            cmd += toolPath;
            for (const a of args) {
              cmd += ` ${a}`;
            }
          } else if (options.windowsVerbatimArguments) {
            cmd += `"${toolPath}"`;
            for (const a of args) {
              cmd += ` ${a}`;
            }
          } else {
            cmd += this._windowsQuoteCmdArg(toolPath);
            for (const a of args) {
              cmd += ` ${this._windowsQuoteCmdArg(a)}`;
            }
          }
        } else {
          cmd += toolPath;
          for (const a of args) {
            cmd += ` ${a}`;
          }
        }
        return cmd;
      }
      _processLineBuffer(data, strBuffer, onLine) {
        try {
          let s = strBuffer + data.toString();
          let n = s.indexOf(os.EOL);
          while (n > -1) {
            const line = s.substring(0, n);
            onLine(line);
            s = s.substring(n + os.EOL.length);
            n = s.indexOf(os.EOL);
          }
          return s;
        } catch (err) {
          this._debug(`error processing line. Failed with error ${err}`);
          return "";
        }
      }
      _getSpawnFileName() {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            return process.env["COMSPEC"] || "cmd.exe";
          }
        }
        return this.toolPath;
      }
      _getSpawnArgs(options) {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
            for (const a of this.args) {
              argline += " ";
              argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
            }
            argline += '"';
            return [argline];
          }
        }
        return this.args;
      }
      _endsWith(str, end) {
        return str.endsWith(end);
      }
      _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
      }
      _windowsQuoteCmdArg(arg) {
        if (!this._isCmdFile()) {
          return this._uvQuoteCmdArg(arg);
        }
        if (!arg) {
          return '""';
        }
        const cmdSpecialChars = [
          " ",
          "	",
          "&",
          "(",
          ")",
          "[",
          "]",
          "{",
          "}",
          "^",
          "=",
          ";",
          "!",
          "'",
          "+",
          ",",
          "`",
          "~",
          "|",
          "<",
          ">",
          '"'
        ];
        let needsQuotes = false;
        for (const char of arg) {
          if (cmdSpecialChars.some((x) => x === char)) {
            needsQuotes = true;
            break;
          }
        }
        if (!needsQuotes) {
          return arg;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
          reverse += arg[i - 1];
          if (quoteHit && arg[i - 1] === "\\") {
            reverse += "\\";
          } else if (arg[i - 1] === '"') {
            quoteHit = true;
            reverse += '"';
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split("").reverse().join("");
      }
      _uvQuoteCmdArg(arg) {
        if (!arg) {
          return '""';
        }
        if (!arg.includes(" ") && !arg.includes("	") && !arg.includes('"')) {
          return arg;
        }
        if (!arg.includes('"') && !arg.includes("\\")) {
          return `"${arg}"`;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
          reverse += arg[i - 1];
          if (quoteHit && arg[i - 1] === "\\") {
            reverse += "\\";
          } else if (arg[i - 1] === '"') {
            quoteHit = true;
            reverse += "\\";
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split("").reverse().join("");
      }
      _cloneExecOptions(options) {
        options = options || {};
        const result = {
          cwd: options.cwd || process.cwd(),
          env: options.env || process.env,
          silent: options.silent || false,
          windowsVerbatimArguments: options.windowsVerbatimArguments || false,
          failOnStdErr: options.failOnStdErr || false,
          ignoreReturnCode: options.ignoreReturnCode || false,
          delay: options.delay || 1e4
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
      }
      _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
          result.argv0 = `"${toolPath}"`;
        }
        return result;
      }
      exec() {
        return __awaiter(this, void 0, void 0, function* () {
          if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) {
            this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
          }
          this.toolPath = yield io.which(this.toolPath, true);
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            this._debug(`exec tool: ${this.toolPath}`);
            this._debug("arguments:");
            for (const arg of this.args) {
              this._debug(`   ${arg}`);
            }
            const optionsNonNull = this._cloneExecOptions(this.options);
            if (!optionsNonNull.silent && optionsNonNull.outStream) {
              optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
            }
            const state = new ExecState(optionsNonNull, this.toolPath);
            state.on("debug", (message) => {
              this._debug(message);
            });
            if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
              return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
            }
            const fileName = this._getSpawnFileName();
            const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
            let stdbuffer = "";
            if (cp.stdout) {
              cp.stdout.on("data", (data) => {
                if (this.options.listeners && this.options.listeners.stdout) {
                  this.options.listeners.stdout(data);
                }
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                  optionsNonNull.outStream.write(data);
                }
                stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                  if (this.options.listeners && this.options.listeners.stdline) {
                    this.options.listeners.stdline(line);
                  }
                });
              });
            }
            let errbuffer = "";
            if (cp.stderr) {
              cp.stderr.on("data", (data) => {
                state.processStderr = true;
                if (this.options.listeners && this.options.listeners.stderr) {
                  this.options.listeners.stderr(data);
                }
                if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
                  const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
                  s.write(data);
                }
                errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                  if (this.options.listeners && this.options.listeners.errline) {
                    this.options.listeners.errline(line);
                  }
                });
              });
            }
            cp.on("error", (err) => {
              state.processError = err.message;
              state.processExited = true;
              state.processClosed = true;
              state.CheckComplete();
            });
            cp.on("exit", (code) => {
              state.processExitCode = code;
              state.processExited = true;
              this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
              state.CheckComplete();
            });
            cp.on("close", (code) => {
              state.processExitCode = code;
              state.processExited = true;
              state.processClosed = true;
              this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
              state.CheckComplete();
            });
            state.on("done", (error2, exitCode) => {
              if (stdbuffer.length > 0) {
                this.emit("stdline", stdbuffer);
              }
              if (errbuffer.length > 0) {
                this.emit("errline", errbuffer);
              }
              cp.removeAllListeners();
              if (error2) {
                reject(error2);
              } else {
                resolve(exitCode);
              }
            });
            if (this.options.input) {
              if (!cp.stdin) {
                throw new Error("child process missing stdin");
              }
              cp.stdin.end(this.options.input);
            }
          }));
        });
      }
    };
    exports.ToolRunner = ToolRunner;
    function argStringToArray(argString) {
      const args = [];
      let inQuotes = false;
      let escaped = false;
      let arg = "";
      function append(c) {
        if (escaped && c !== '"') {
          arg += "\\";
        }
        arg += c;
        escaped = false;
      }
      for (let i = 0; i < argString.length; i++) {
        const c = argString.charAt(i);
        if (c === '"') {
          if (!escaped) {
            inQuotes = !inQuotes;
          } else {
            append(c);
          }
          continue;
        }
        if (c === "\\" && escaped) {
          append(c);
          continue;
        }
        if (c === "\\" && inQuotes) {
          escaped = true;
          continue;
        }
        if (c === " " && !inQuotes) {
          if (arg.length > 0) {
            args.push(arg);
            arg = "";
          }
          continue;
        }
        append(c);
      }
      if (arg.length > 0) {
        args.push(arg.trim());
      }
      return args;
    }
    exports.argStringToArray = argStringToArray;
    var ExecState = class extends events.EventEmitter {
      constructor(options, toolPath) {
        super();
        this.processClosed = false;
        this.processError = "";
        this.processExitCode = 0;
        this.processExited = false;
        this.processStderr = false;
        this.delay = 1e4;
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
          throw new Error("toolPath must not be empty");
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
          this.delay = options.delay;
        }
      }
      CheckComplete() {
        if (this.done) {
          return;
        }
        if (this.processClosed) {
          this._setResult();
        } else if (this.processExited) {
          this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
        }
      }
      _debug(message) {
        this.emit("debug", message);
      }
      _setResult() {
        let error2;
        if (this.processExited) {
          if (this.processError) {
            error2 = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
          } else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
            error2 = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
          } else if (this.processStderr && this.options.failOnStdErr) {
            error2 = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
          }
        }
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
        this.done = true;
        this.emit("done", error2, this.processExitCode);
      }
      static HandleTimeout(state) {
        if (state.done) {
          return;
        }
        if (!state.processClosed && state.processExited) {
          const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
          state._debug(message);
        }
        state._setResult();
      }
    };
  }
});

// node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({
  "node_modules/@actions/exec/lib/exec.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExecOutput = exports.exec = void 0;
    var string_decoder_1 = require("string_decoder");
    var tr = __importStar(require_toolrunner());
    function exec2(commandLine, args, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const commandArgs = tr.argStringToArray(commandLine);
        if (commandArgs.length === 0) {
          throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        const toolPath = commandArgs[0];
        args = commandArgs.slice(1).concat(args || []);
        const runner = new tr.ToolRunner(toolPath, args, options);
        return runner.exec();
      });
    }
    exports.exec = exec2;
    function getExecOutput(commandLine, args, options) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, function* () {
        let stdout = "";
        let stderr = "";
        const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
        const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
        const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;
        const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
        const stdErrListener = (data) => {
          stderr += stderrDecoder.write(data);
          if (originalStdErrListener) {
            originalStdErrListener(data);
          }
        };
        const stdOutListener = (data) => {
          stdout += stdoutDecoder.write(data);
          if (originalStdoutListener) {
            originalStdoutListener(data);
          }
        };
        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
        const exitCode = yield exec2(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
        stdout += stdoutDecoder.end();
        stderr += stderrDecoder.end();
        return {
          exitCode,
          stdout,
          stderr
        };
      });
    }
    exports.getExecOutput = getExecOutput;
  }
});

// node_modules/@actions/github/lib/context.js
var require_context = __commonJS({
  "node_modules/@actions/github/lib/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Context = void 0;
    var fs_1 = require("fs");
    var os_1 = require("os");
    var Context = class {
      constructor() {
        var _a, _b, _c;
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
          if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {
            this.payload = JSON.parse(fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
          } else {
            const path = process.env.GITHUB_EVENT_PATH;
            process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`);
          }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
        this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
      }
      get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
      }
      get repo() {
        if (process.env.GITHUB_REPOSITORY) {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
          return { owner, repo };
        }
        if (this.payload.repository) {
          return {
            owner: this.payload.repository.owner.login,
            repo: this.payload.repository.name
          };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
      }
    };
    exports.Context = Context;
  }
});

// node_modules/@actions/github/lib/internal/utils.js
var require_utils2 = __commonJS({
  "node_modules/@actions/github/lib/internal/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getApiBaseUrl = exports.getProxyAgent = exports.getAuthString = void 0;
    var httpClient = __importStar(require_lib());
    function getAuthString(token, options) {
      if (!token && !options.auth) {
        throw new Error("Parameter token or opts.auth is required");
      } else if (token && options.auth) {
        throw new Error("Parameters token and opts.auth may not both be specified");
      }
      return typeof options.auth === "string" ? options.auth : `token ${token}`;
    }
    exports.getAuthString = getAuthString;
    function getProxyAgent(destinationUrl) {
      const hc = new httpClient.HttpClient();
      return hc.getAgent(destinationUrl);
    }
    exports.getProxyAgent = getProxyAgent;
    function getApiBaseUrl() {
      return process.env["GITHUB_API_URL"] || "https://api.github.com";
    }
    exports.getApiBaseUrl = getApiBaseUrl;
  }
});

// node_modules/universal-user-agent/dist-node/index.js
var require_dist_node = __commonJS({
  "node_modules/universal-user-agent/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getUserAgent() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === "object" && "version" in process) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return "<environment undetectable>";
    }
    exports.getUserAgent = getUserAgent;
  }
});

// node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({
  "node_modules/before-after-hook/lib/register.js"(exports, module2) {
    module2.exports = register;
    function register(state, name, method, options) {
      if (typeof method !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register.bind(null, state, name2, callback, options);
        }, method)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method(options);
        }
        return state.registry[name].reduce(function(method2, registered) {
          return registered.hook.bind(null, method2, options);
        }, method)();
      });
    }
  }
});

// node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({
  "node_modules/before-after-hook/lib/add.js"(exports, module2) {
    module2.exports = addHook;
    function addHook(state, kind, name, hook) {
      var orig = hook;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook = function(method, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
        };
      }
      if (kind === "after") {
        hook = function(method, options) {
          var result;
          return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook = function(method, options) {
          return Promise.resolve().then(method.bind(null, options)).catch(function(error2) {
            return orig(error2, options);
          });
        };
      }
      state.registry[name].push({
        hook,
        orig
      });
    }
  }
});

// node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({
  "node_modules/before-after-hook/lib/remove.js"(exports, module2) {
    module2.exports = removeHook;
    function removeHook(state, name, method) {
      if (!state.registry[name]) {
        return;
      }
      var index = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method);
      if (index === -1) {
        return;
      }
      state.registry[name].splice(index, 1);
    }
  }
});

// node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({
  "node_modules/before-after-hook/index.js"(exports, module2) {
    var register = require_register();
    var addHook = require_add();
    var removeHook = require_remove();
    var bind = Function.bind;
    var bindable = bind.bind(bind);
    function bindApi(hook, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state]);
      hook.api = { remove: removeHookRef };
      hook.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook = register.bind(null, state);
      bindApi(hook, state);
      return hook;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    module2.exports = Hook;
    module2.exports.Hook = Hook;
    module2.exports.Singular = Hook.Singular;
    module2.exports.Collection = Hook.Collection;
  }
});

// node_modules/is-plain-object/dist/is-plain-object.js
var require_is_plain_object = __commonJS({
  "node_modules/is-plain-object/dist/is-plain-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function isObject(o) {
      return Object.prototype.toString.call(o) === "[object Object]";
    }
    function isPlainObject(o) {
      var ctor, prot;
      if (isObject(o) === false)
        return false;
      ctor = o.constructor;
      if (ctor === void 0)
        return true;
      prot = ctor.prototype;
      if (isObject(prot) === false)
        return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    }
    exports.isPlainObject = isPlainObject;
  }
});

// node_modules/@octokit/endpoint/dist-node/index.js
var require_dist_node2 = __commonJS({
  "node_modules/@octokit/endpoint/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var isPlainObject = require_is_plain_object();
    var universalUserAgent = require_dist_node();
    function lowercaseKeys(object) {
      if (!object) {
        return {};
      }
      return Object.keys(object).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object[key];
        return newObj;
      }, {});
    }
    function mergeDeep(defaults, options) {
      const result = Object.assign({}, defaults);
      Object.keys(options).forEach((key) => {
        if (isPlainObject.isPlainObject(options[key])) {
          if (!(key in defaults))
            Object.assign(result, {
              [key]: options[key]
            });
          else
            result[key] = mergeDeep(defaults[key], options[key]);
        } else {
          Object.assign(result, {
            [key]: options[key]
          });
        }
      });
      return result;
    }
    function removeUndefinedProperties(obj) {
      for (const key in obj) {
        if (obj[key] === void 0) {
          delete obj[key];
        }
      }
      return obj;
    }
    function merge(defaults, route, options) {
      if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? {
          method,
          url
        } : {
          url: method
        }, options);
      } else {
        options = Object.assign({}, route);
      }
      options.headers = lowercaseKeys(options.headers);
      removeUndefinedProperties(options);
      removeUndefinedProperties(options.headers);
      const mergedOptions = mergeDeep(defaults || {}, options);
      if (defaults && defaults.mediaType.previews.length) {
        mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
      }
      mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
      return mergedOptions;
    }
    function addQueryParameters(url, parameters) {
      const separator = /\?/.test(url) ? "&" : "?";
      const names = Object.keys(parameters);
      if (names.length === 0) {
        return url;
      }
      return url + separator + names.map((name) => {
        if (name === "q") {
          return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
        }
        return `${name}=${encodeURIComponent(parameters[name])}`;
      }).join("&");
    }
    var urlVariableRegex = /\{[^}]+\}/g;
    function removeNonChars(variableName) {
      return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
    }
    function extractUrlVariableNames(url) {
      const matches = url.match(urlVariableRegex);
      if (!matches) {
        return [];
      }
      return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
    }
    function omit(object, keysToOmit) {
      return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
        obj[key] = object[key];
        return obj;
      }, {});
    }
    function encodeReserved(str) {
      return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
          part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
      }).join("");
    }
    function encodeUnreserved(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeValue(operator, value, key) {
      value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
      if (key) {
        return encodeUnreserved(key) + "=" + value;
      } else {
        return value;
      }
    }
    function isDefined(value) {
      return value !== void 0 && value !== null;
    }
    function isKeyOperator(operator) {
      return operator === ";" || operator === "&" || operator === "?";
    }
    function getValues(context2, operator, key, modifier) {
      var value = context2[key], result = [];
      if (isDefined(value) && value !== "") {
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
          value = value.toString();
          if (modifier && modifier !== "*") {
            value = value.substring(0, parseInt(modifier, 10));
          }
          result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
        } else {
          if (modifier === "*") {
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  result.push(encodeValue(operator, value[k], k));
                }
              });
            }
          } else {
            const tmp = [];
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                tmp.push(encodeValue(operator, value2));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  tmp.push(encodeUnreserved(k));
                  tmp.push(encodeValue(operator, value[k].toString()));
                }
              });
            }
            if (isKeyOperator(operator)) {
              result.push(encodeUnreserved(key) + "=" + tmp.join(","));
            } else if (tmp.length !== 0) {
              result.push(tmp.join(","));
            }
          }
        }
      } else {
        if (operator === ";") {
          if (isDefined(value)) {
            result.push(encodeUnreserved(key));
          }
        } else if (value === "" && (operator === "&" || operator === "?")) {
          result.push(encodeUnreserved(key) + "=");
        } else if (value === "") {
          result.push("");
        }
      }
      return result;
    }
    function parseUrl(template) {
      return {
        expand: expand.bind(null, template)
      };
    }
    function expand(template, context2) {
      var operators = ["+", "#", ".", "/", ";", "?", "&"];
      return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
        if (expression) {
          let operator = "";
          const values = [];
          if (operators.indexOf(expression.charAt(0)) !== -1) {
            operator = expression.charAt(0);
            expression = expression.substr(1);
          }
          expression.split(/,/g).forEach(function(variable) {
            var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
            values.push(getValues(context2, operator, tmp[1], tmp[2] || tmp[3]));
          });
          if (operator && operator !== "+") {
            var separator = ",";
            if (operator === "?") {
              separator = "&";
            } else if (operator !== "#") {
              separator = operator;
            }
            return (values.length !== 0 ? operator : "") + values.join(separator);
          } else {
            return values.join(",");
          }
        } else {
          return encodeReserved(literal);
        }
      });
    }
    function parse2(options) {
      let method = options.method.toUpperCase();
      let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
      let headers = Object.assign({}, options.headers);
      let body;
      let parameters = omit(options, ["method", "baseUrl", "url", "headers", "request", "mediaType"]);
      const urlVariableNames = extractUrlVariableNames(url);
      url = parseUrl(url).expand(parameters);
      if (!/^http/.test(url)) {
        url = options.baseUrl + url;
      }
      const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
      const remainingParameters = omit(parameters, omittedParameters);
      const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
      if (!isBinaryRequest) {
        if (options.mediaType.format) {
          headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
        }
        if (options.mediaType.previews.length) {
          const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
          headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
            const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
            return `application/vnd.github.${preview}-preview${format}`;
          }).join(",");
        }
      }
      if (["GET", "HEAD"].includes(method)) {
        url = addQueryParameters(url, remainingParameters);
      } else {
        if ("data" in remainingParameters) {
          body = remainingParameters.data;
        } else {
          if (Object.keys(remainingParameters).length) {
            body = remainingParameters;
          } else {
            headers["content-length"] = 0;
          }
        }
      }
      if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
      }
      if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
        body = "";
      }
      return Object.assign({
        method,
        url,
        headers
      }, typeof body !== "undefined" ? {
        body
      } : null, options.request ? {
        request: options.request
      } : null);
    }
    function endpointWithDefaults(defaults, route, options) {
      return parse2(merge(defaults, route, options));
    }
    function withDefaults(oldDefaults, newDefaults) {
      const DEFAULTS2 = merge(oldDefaults, newDefaults);
      const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
      return Object.assign(endpoint2, {
        DEFAULTS: DEFAULTS2,
        defaults: withDefaults.bind(null, DEFAULTS2),
        merge: merge.bind(null, DEFAULTS2),
        parse: parse2
      });
    }
    var VERSION = "6.0.12";
    var userAgent = `octokit-endpoint.js/${VERSION} ${universalUserAgent.getUserAgent()}`;
    var DEFAULTS = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent
      },
      mediaType: {
        format: "",
        previews: []
      }
    };
    var endpoint = withDefaults(null, DEFAULTS);
    exports.endpoint = endpoint;
  }
});

// node_modules/webidl-conversions/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/webidl-conversions/lib/index.js"(exports, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// node_modules/whatwg-url/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/whatwg-url/lib/utils.js"(exports, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "node_modules/tr46/lib/mappingTable.json"(exports, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "node_modules/tr46/index.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error2 = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error2 = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error2 = true;
          break;
        }
      }
      return {
        label,
        error: error2
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "node_modules/whatwg-url/lib/url-state-machine.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "node_modules/whatwg-url/lib/URL-impl.js"(exports) {
    "use strict";
    var usm = require_url_state_machine();
    exports.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "node_modules/whatwg-url/lib/URL.js"(exports, module2) {
    "use strict";
    var conversions = require_lib2();
    var utils = require_utils3();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL3(url) {
      if (!this || this[impl] || !(this instanceof URL3)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL3.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL3.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL3.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL3.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL3.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL3.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL3,
      expose: {
        Window: { URL: URL3 },
        Worker: { URL: URL3 }
      }
    };
  }
});

// node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "node_modules/whatwg-url/lib/public-api.js"(exports) {
    "use strict";
    exports.URL = require_URL().interface;
    exports.serializeURL = require_url_state_machine().serializeURL;
    exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports.basicURLParse = require_url_state_machine().basicURLParse;
    exports.setTheUsername = require_url_state_machine().setTheUsername;
    exports.setThePassword = require_url_state_machine().setThePassword;
    exports.serializeHost = require_url_state_machine().serializeHost;
    exports.serializeInteger = require_url_state_machine().serializeInteger;
    exports.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/node-fetch/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/node-fetch/lib/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob = class {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error2;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(
            new Blob([], {
              type: ct.toLowerCase()
            }),
            {
              [BUFFER]: buf
            }
          );
        });
      },
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      buffer() {
        return consumeBody.call(this);
      },
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class {
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      raw() {
        return this[MAP];
      }
      keys() {
        return createHeadersIterator(this, "key");
      }
      values() {
        return createHeadersIterator(this, "value");
      }
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response = class {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      clone() {
        return new Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL3 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL3(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      clone() {
        return new Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request) {
      const parsedURL = request[INTERNALS$2].parsedURL;
      const headers = new Headers(request[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body != null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    function fetch2(url, opts) {
      if (!fetch2.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch2.Promise;
      return new fetch2.Promise(function(resolve, reject) {
        const request = new Request(url, opts);
        const options = getNodeRequestOptions(request);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort2() {
          let error2 = new AbortError("The user aborted a request.");
          reject(error2);
          if (request.body && request.body instanceof Stream.Readable) {
            request.body.destroy(error2);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error2);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
              finalize();
            }, request.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
          finalize();
        });
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch2.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request.url).toString();
            } catch (err) {
              if (request.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request.counter >= request.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: request.body,
                  signal: request.signal,
                  timeout: request.timeout,
                  size: request.size
                };
                if (!isDomainOrSubdomain(request.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch2(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request.size,
            timeout: request.timeout,
            counter: request.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw = res.pipe(new PassThrough$1());
            raw.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        writeToStream(req, request);
      });
    }
    fetch2.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch2.Promise = global.Promise;
    module2.exports = exports = fetch2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = exports;
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.FetchError = FetchError;
  }
});

// node_modules/deprecation/dist-node/index.js
var require_dist_node3 = __commonJS({
  "node_modules/deprecation/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Deprecation = class extends Error {
      constructor(message) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "Deprecation";
      }
    };
    exports.Deprecation = Deprecation;
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node4 = __commonJS({
  "node_modules/@octokit/request-error/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var deprecation = require_dist_node3();
    var once = _interopDefault(require_once());
    var logOnceCode = once((deprecation2) => console.warn(deprecation2));
    var logOnceHeaders = once((deprecation2) => console.warn(deprecation2));
    var RequestError = class extends Error {
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
          headers = options.headers;
        }
        if ("response" in options) {
          this.response = options.response;
          headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
          get() {
            logOnceCode(new deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
            return statusCode;
          }
        });
        Object.defineProperty(this, "headers", {
          get() {
            logOnceHeaders(new deprecation.Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
            return headers || {};
          }
        });
      }
    };
    exports.RequestError = RequestError;
  }
});

// node_modules/@octokit/request/dist-node/index.js
var require_dist_node5 = __commonJS({
  "node_modules/@octokit/request/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var endpoint = require_dist_node2();
    var universalUserAgent = require_dist_node();
    var isPlainObject = require_is_plain_object();
    var nodeFetch = _interopDefault(require_lib3());
    var requestError = require_dist_node4();
    var VERSION = "5.6.3";
    function getBufferResponse(response) {
      return response.arrayBuffer();
    }
    function fetchWrapper(requestOptions) {
      const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
      if (isPlainObject.isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
      }
      let headers = {};
      let status;
      let url;
      const fetch2 = requestOptions.request && requestOptions.request.fetch || nodeFetch;
      return fetch2(requestOptions.url, Object.assign(
        {
          method: requestOptions.method,
          body: requestOptions.body,
          headers: requestOptions.headers,
          redirect: requestOptions.redirect
        },
        requestOptions.request
      )).then(async (response) => {
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
          headers[keyAndValue[0]] = keyAndValue[1];
        }
        if ("deprecation" in headers) {
          const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
          const deprecationLink = matches && matches.pop();
          log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
        }
        if (status === 204 || status === 205) {
          return;
        }
        if (requestOptions.method === "HEAD") {
          if (status < 400) {
            return;
          }
          throw new requestError.RequestError(response.statusText, status, {
            response: {
              url,
              status,
              headers,
              data: void 0
            },
            request: requestOptions
          });
        }
        if (status === 304) {
          throw new requestError.RequestError("Not modified", status, {
            response: {
              url,
              status,
              headers,
              data: await getResponseData(response)
            },
            request: requestOptions
          });
        }
        if (status >= 400) {
          const data = await getResponseData(response);
          const error2 = new requestError.RequestError(toErrorMessage(data), status, {
            response: {
              url,
              status,
              headers,
              data
            },
            request: requestOptions
          });
          throw error2;
        }
        return getResponseData(response);
      }).then((data) => {
        return {
          status,
          url,
          headers,
          data
        };
      }).catch((error2) => {
        if (error2 instanceof requestError.RequestError)
          throw error2;
        throw new requestError.RequestError(error2.message, 500, {
          request: requestOptions
        });
      });
    }
    async function getResponseData(response) {
      const contentType = response.headers.get("content-type");
      if (/application\/json/.test(contentType)) {
        return response.json();
      }
      if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
        return response.text();
      }
      return getBufferResponse(response);
    }
    function toErrorMessage(data) {
      if (typeof data === "string")
        return data;
      if ("message" in data) {
        if (Array.isArray(data.errors)) {
          return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
        }
        return data.message;
      }
      return `Unknown error: ${JSON.stringify(data)}`;
    }
    function withDefaults(oldEndpoint, newDefaults) {
      const endpoint2 = oldEndpoint.defaults(newDefaults);
      const newApi = function(route, parameters) {
        const endpointOptions = endpoint2.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
          return fetchWrapper(endpoint2.parse(endpointOptions));
        }
        const request2 = (route2, parameters2) => {
          return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
        };
        Object.assign(request2, {
          endpoint: endpoint2,
          defaults: withDefaults.bind(null, endpoint2)
        });
        return endpointOptions.request.hook(request2, endpointOptions);
      };
      return Object.assign(newApi, {
        endpoint: endpoint2,
        defaults: withDefaults.bind(null, endpoint2)
      });
    }
    var request = withDefaults(endpoint.endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION} ${universalUserAgent.getUserAgent()}`
      }
    });
    exports.request = request;
  }
});

// node_modules/@octokit/graphql/dist-node/index.js
var require_dist_node6 = __commonJS({
  "node_modules/@octokit/graphql/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var request = require_dist_node5();
    var universalUserAgent = require_dist_node();
    var VERSION = "4.8.0";
    function _buildMessageForResponseErrors(data) {
      return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
    }
    var GraphqlResponseError = class extends Error {
      constructor(request2, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
    };
    var NON_VARIABLE_OPTIONS = ["method", "baseUrl", "url", "headers", "request", "query", "mediaType"];
    var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
    var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
    function graphql(request2, query, options) {
      if (options) {
        if (typeof query === "string" && "query" in options) {
          return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
        }
        for (const key in options) {
          if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
            continue;
          return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
        }
      }
      const parsedOptions = typeof query === "string" ? Object.assign({
        query
      }, options) : query;
      const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
          result[key] = parsedOptions[key];
          return result;
        }
        if (!result.variables) {
          result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
      }, {});
      const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
      if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
      }
      return request2(requestOptions).then((response) => {
        if (response.data.errors) {
          const headers = {};
          for (const key of Object.keys(response.headers)) {
            headers[key] = response.headers[key];
          }
          throw new GraphqlResponseError(requestOptions, headers, response.data);
        }
        return response.data.data;
      });
    }
    function withDefaults(request$1, newDefaults) {
      const newRequest = request$1.defaults(newDefaults);
      const newApi = (query, options) => {
        return graphql(newRequest, query, options);
      };
      return Object.assign(newApi, {
        defaults: withDefaults.bind(null, newRequest),
        endpoint: request.request.endpoint
      });
    }
    var graphql$1 = withDefaults(request.request, {
      headers: {
        "user-agent": `octokit-graphql.js/${VERSION} ${universalUserAgent.getUserAgent()}`
      },
      method: "POST",
      url: "/graphql"
    });
    function withCustomRequest(customRequest) {
      return withDefaults(customRequest, {
        method: "POST",
        url: "/graphql"
      });
    }
    exports.GraphqlResponseError = GraphqlResponseError;
    exports.graphql = graphql$1;
    exports.withCustomRequest = withCustomRequest;
  }
});

// node_modules/@octokit/auth-token/dist-node/index.js
var require_dist_node7 = __commonJS({
  "node_modules/@octokit/auth-token/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
    var REGEX_IS_INSTALLATION = /^ghs_/;
    var REGEX_IS_USER_TO_SERVER = /^ghu_/;
    async function auth(token) {
      const isApp = token.split(/\./).length === 3;
      const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
      const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
      const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
      return {
        type: "token",
        token,
        tokenType
      };
    }
    function withAuthorizationPrefix(token) {
      if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
      }
      return `token ${token}`;
    }
    async function hook(token, request, route, parameters) {
      const endpoint = request.endpoint.merge(route, parameters);
      endpoint.headers.authorization = withAuthorizationPrefix(token);
      return request(endpoint);
    }
    var createTokenAuth = function createTokenAuth2(token) {
      if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
      }
      if (typeof token !== "string") {
        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
      }
      token = token.replace(/^(token|bearer) +/i, "");
      return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token)
      });
    };
    exports.createTokenAuth = createTokenAuth;
  }
});

// node_modules/@octokit/core/dist-node/index.js
var require_dist_node8 = __commonJS({
  "node_modules/@octokit/core/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var universalUserAgent = require_dist_node();
    var beforeAfterHook = require_before_after_hook();
    var request = require_dist_node5();
    var graphql = require_dist_node6();
    var authToken = require_dist_node7();
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var VERSION = "3.6.0";
    var _excluded = ["authStrategy"];
    var Octokit = class {
      constructor(options = {}) {
        const hook = new beforeAfterHook.Collection();
        const requestDefaults = {
          baseUrl: request.request.endpoint.DEFAULTS.baseUrl,
          headers: {},
          request: Object.assign({}, options.request, {
            hook: hook.bind(null, "request")
          }),
          mediaType: {
            previews: [],
            format: ""
          }
        };
        requestDefaults.headers["user-agent"] = [options.userAgent, `octokit-core.js/${VERSION} ${universalUserAgent.getUserAgent()}`].filter(Boolean).join(" ");
        if (options.baseUrl) {
          requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
          requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
          requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = request.request.defaults(requestDefaults);
        this.graphql = graphql.withCustomRequest(this.request).defaults(requestDefaults);
        this.log = Object.assign({
          debug: () => {
          },
          info: () => {
          },
          warn: console.warn.bind(console),
          error: console.error.bind(console)
        }, options.log);
        this.hook = hook;
        if (!options.authStrategy) {
          if (!options.auth) {
            this.auth = async () => ({
              type: "unauthenticated"
            });
          } else {
            const auth = authToken.createTokenAuth(options.auth);
            hook.wrap("request", auth.hook);
            this.auth = auth;
          }
        } else {
          const {
            authStrategy
          } = options, otherOptions = _objectWithoutProperties(options, _excluded);
          const auth = authStrategy(Object.assign({
            request: this.request,
            log: this.log,
            octokit: this,
            octokitOptions: otherOptions
          }, options.auth));
          hook.wrap("request", auth.hook);
          this.auth = auth;
        }
        const classConstructor = this.constructor;
        classConstructor.plugins.forEach((plugin) => {
          Object.assign(this, plugin(this, options));
        });
      }
      static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
          constructor(...args) {
            const options = args[0] || {};
            if (typeof defaults === "function") {
              super(defaults(options));
              return;
            }
            super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null));
          }
        };
        return OctokitWithDefaults;
      }
      static plugin(...newPlugins) {
        var _a;
        const currentPlugins = this.plugins;
        const NewOctokit = (_a = class extends this {
        }, _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))), _a);
        return NewOctokit;
      }
    };
    Octokit.VERSION = VERSION;
    Octokit.plugins = [];
    exports.Octokit = Octokit;
  }
});

// node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
var require_dist_node9 = __commonJS({
  "node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var Endpoints = {
      actions: {
        addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
        approveWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],
        cancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],
        createOrUpdateEnvironmentSecret: ["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
        createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        createRegistrationTokenForOrg: ["POST /orgs/{org}/actions/runners/registration-token"],
        createRegistrationTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/registration-token"],
        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
        createRemoveTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/remove-token"],
        createWorkflowDispatch: ["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],
        deleteArtifact: ["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        deleteEnvironmentSecret: ["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
        deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        deleteSelfHostedRunnerFromOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}"],
        deleteSelfHostedRunnerFromRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],
        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
        deleteWorkflowRunLogs: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
        disableSelectedRepositoryGithubActionsOrganization: ["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],
        disableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],
        downloadArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],
        downloadJobLogsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],
        downloadWorkflowRunAttemptLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],
        downloadWorkflowRunLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
        enableSelectedRepositoryGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],
        enableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],
        getAllowedActionsOrganization: ["GET /orgs/{org}/actions/permissions/selected-actions"],
        getAllowedActionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],
        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        getEnvironmentPublicKey: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],
        getEnvironmentSecret: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
        getGithubActionsPermissionsOrganization: ["GET /orgs/{org}/actions/permissions"],
        getGithubActionsPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions"],
        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
        getPendingDeploymentsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
        getRepoPermissions: ["GET /repos/{owner}/{repo}/actions/permissions", {}, {
          renamed: ["actions", "getGithubActionsPermissionsRepository"]
        }],
        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        getReviewsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],
        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
        getSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],
        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
        getWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],
        getWorkflowRunUsage: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],
        getWorkflowUsage: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],
        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
        listEnvironmentSecrets: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],
        listJobsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],
        listJobsForWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],
        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
        listRunnerApplicationsForRepo: ["GET /repos/{owner}/{repo}/actions/runners/downloads"],
        listSelectedReposForOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],
        listSelectedRepositoriesEnabledGithubActionsOrganization: ["GET /orgs/{org}/actions/permissions/repositories"],
        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
        listWorkflowRunArtifacts: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],
        listWorkflowRuns: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],
        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
        removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
        reviewPendingDeploymentsForRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
        setAllowedActionsOrganization: ["PUT /orgs/{org}/actions/permissions/selected-actions"],
        setAllowedActionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],
        setGithubActionsPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions"],
        setGithubActionsPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions"],
        setSelectedReposForOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],
        setSelectedRepositoriesEnabledGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories"]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
        deleteThreadSubscription: ["DELETE /notifications/threads/{thread_id}/subscription"],
        getFeeds: ["GET /feeds"],
        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
        getThread: ["GET /notifications/threads/{thread_id}"],
        getThreadSubscriptionForAuthenticatedUser: ["GET /notifications/threads/{thread_id}/subscription"],
        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
        listNotificationsForAuthenticatedUser: ["GET /notifications"],
        listOrgEventsForAuthenticatedUser: ["GET /users/{username}/events/orgs/{org}"],
        listPublicEvents: ["GET /events"],
        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
        listPublicEventsForUser: ["GET /users/{username}/events/public"],
        listPublicOrgEvents: ["GET /orgs/{org}/events"],
        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
        listReceivedPublicEventsForUser: ["GET /users/{username}/received_events/public"],
        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
        listRepoNotificationsForAuthenticatedUser: ["GET /repos/{owner}/{repo}/notifications"],
        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
        listReposStarredByUser: ["GET /users/{username}/starred"],
        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
        markNotificationsAsRead: ["PUT /notifications"],
        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
        setThreadSubscription: ["PUT /notifications/threads/{thread_id}/subscription"],
        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
      },
      apps: {
        addRepoToInstallation: ["PUT /user/installations/{installation_id}/repositories/{repository_id}", {}, {
          renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"]
        }],
        addRepoToInstallationForAuthenticatedUser: ["PUT /user/installations/{installation_id}/repositories/{repository_id}"],
        checkToken: ["POST /applications/{client_id}/token"],
        createContentAttachment: ["POST /content_references/{content_reference_id}/attachments", {
          mediaType: {
            previews: ["corsair"]
          }
        }],
        createContentAttachmentForRepo: ["POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments", {
          mediaType: {
            previews: ["corsair"]
          }
        }],
        createFromManifest: ["POST /app-manifests/{code}/conversions"],
        createInstallationAccessToken: ["POST /app/installations/{installation_id}/access_tokens"],
        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
        deleteInstallation: ["DELETE /app/installations/{installation_id}"],
        deleteToken: ["DELETE /applications/{client_id}/token"],
        getAuthenticated: ["GET /app"],
        getBySlug: ["GET /apps/{app_slug}"],
        getInstallation: ["GET /app/installations/{installation_id}"],
        getOrgInstallation: ["GET /orgs/{org}/installation"],
        getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
        getSubscriptionPlanForAccount: ["GET /marketplace_listing/accounts/{account_id}"],
        getSubscriptionPlanForAccountStubbed: ["GET /marketplace_listing/stubbed/accounts/{account_id}"],
        getUserInstallation: ["GET /users/{username}/installation"],
        getWebhookConfigForApp: ["GET /app/hook/config"],
        getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
        listAccountsForPlanStubbed: ["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],
        listInstallationReposForAuthenticatedUser: ["GET /user/installations/{installation_id}/repositories"],
        listInstallations: ["GET /app/installations"],
        listInstallationsForAuthenticatedUser: ["GET /user/installations"],
        listPlans: ["GET /marketplace_listing/plans"],
        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
        listReposAccessibleToInstallation: ["GET /installation/repositories"],
        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
        listSubscriptionsForAuthenticatedUserStubbed: ["GET /user/marketplace_purchases/stubbed"],
        listWebhookDeliveries: ["GET /app/hook/deliveries"],
        redeliverWebhookDelivery: ["POST /app/hook/deliveries/{delivery_id}/attempts"],
        removeRepoFromInstallation: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}", {}, {
          renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"]
        }],
        removeRepoFromInstallationForAuthenticatedUser: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],
        resetToken: ["PATCH /applications/{client_id}/token"],
        revokeInstallationAccessToken: ["DELETE /installation/token"],
        scopeToken: ["POST /applications/{client_id}/token/scoped"],
        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
        unsuspendInstallation: ["DELETE /app/installations/{installation_id}/suspended"],
        updateWebhookConfigForApp: ["PATCH /app/hook/config"]
      },
      billing: {
        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
        getGithubActionsBillingUser: ["GET /users/{username}/settings/billing/actions"],
        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
        getGithubPackagesBillingUser: ["GET /users/{username}/settings/billing/packages"],
        getSharedStorageBillingOrg: ["GET /orgs/{org}/settings/billing/shared-storage"],
        getSharedStorageBillingUser: ["GET /users/{username}/settings/billing/shared-storage"]
      },
      checks: {
        create: ["POST /repos/{owner}/{repo}/check-runs"],
        createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
        get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
        getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
        listAnnotations: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],
        listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
        listForSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],
        listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
        rerequestRun: ["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],
        rerequestSuite: ["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],
        setSuitesPreferences: ["PATCH /repos/{owner}/{repo}/check-suites/preferences"],
        update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
      },
      codeScanning: {
        deleteAnalysis: ["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],
        getAlert: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", {}, {
          renamedParameters: {
            alert_id: "alert_number"
          }
        }],
        getAnalysis: ["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],
        getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
        listAlertInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
        listAlertsInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", {}, {
          renamed: ["codeScanning", "listAlertInstances"]
        }],
        listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
        updateAlert: ["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],
        uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
      },
      codesOfConduct: {
        getAllCodesOfConduct: ["GET /codes_of_conduct"],
        getConductCode: ["GET /codes_of_conduct/{key}"]
      },
      emojis: {
        get: ["GET /emojis"]
      },
      enterpriseAdmin: {
        disableSelectedOrganizationGithubActionsEnterprise: ["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],
        enableSelectedOrganizationGithubActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],
        getAllowedActionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],
        getGithubActionsPermissionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions"],
        listSelectedOrganizationsEnabledGithubActionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions/organizations"],
        setAllowedActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],
        setGithubActionsPermissionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions"],
        setSelectedOrganizationsEnabledGithubActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/organizations"]
      },
      gists: {
        checkIsStarred: ["GET /gists/{gist_id}/star"],
        create: ["POST /gists"],
        createComment: ["POST /gists/{gist_id}/comments"],
        delete: ["DELETE /gists/{gist_id}"],
        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
        fork: ["POST /gists/{gist_id}/forks"],
        get: ["GET /gists/{gist_id}"],
        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
        getRevision: ["GET /gists/{gist_id}/{sha}"],
        list: ["GET /gists"],
        listComments: ["GET /gists/{gist_id}/comments"],
        listCommits: ["GET /gists/{gist_id}/commits"],
        listForUser: ["GET /users/{username}/gists"],
        listForks: ["GET /gists/{gist_id}/forks"],
        listPublic: ["GET /gists/public"],
        listStarred: ["GET /gists/starred"],
        star: ["PUT /gists/{gist_id}/star"],
        unstar: ["DELETE /gists/{gist_id}/star"],
        update: ["PATCH /gists/{gist_id}"],
        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
      },
      git: {
        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
      },
      gitignore: {
        getAllTemplates: ["GET /gitignore/templates"],
        getTemplate: ["GET /gitignore/templates/{name}"]
      },
      interactions: {
        getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
        getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
        getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
        getRestrictionsForYourPublicRepos: ["GET /user/interaction-limits", {}, {
          renamed: ["interactions", "getRestrictionsForAuthenticatedUser"]
        }],
        removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
        removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
        removeRestrictionsForRepo: ["DELETE /repos/{owner}/{repo}/interaction-limits"],
        removeRestrictionsForYourPublicRepos: ["DELETE /user/interaction-limits", {}, {
          renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"]
        }],
        setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
        setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
        setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
        setRestrictionsForYourPublicRepos: ["PUT /user/interaction-limits", {}, {
          renamed: ["interactions", "setRestrictionsForAuthenticatedUser"]
        }]
      },
      issues: {
        addAssignees: ["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
        create: ["POST /repos/{owner}/{repo}/issues"],
        createComment: ["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        createLabel: ["POST /repos/{owner}/{repo}/labels"],
        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
        deleteComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
        deleteMilestone: ["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],
        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
        list: ["GET /issues"],
        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
        listEventsForTimeline: ["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],
        listForAuthenticatedUser: ["GET /user/issues"],
        listForOrg: ["GET /orgs/{org}/issues"],
        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
        listLabelsForMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],
        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
        listLabelsOnIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        removeAllLabels: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        removeAssignees: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
        removeLabel: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],
        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
        updateMilestone: ["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]
      },
      licenses: {
        get: ["GET /licenses/{license}"],
        getAllCommonlyUsed: ["GET /licenses"],
        getForRepo: ["GET /repos/{owner}/{repo}/license"]
      },
      markdown: {
        render: ["POST /markdown"],
        renderRaw: ["POST /markdown/raw", {
          headers: {
            "content-type": "text/plain; charset=utf-8"
          }
        }]
      },
      meta: {
        get: ["GET /meta"],
        getOctocat: ["GET /octocat"],
        getZen: ["GET /zen"],
        root: ["GET /"]
      },
      migrations: {
        cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
        deleteArchiveForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/archive"],
        deleteArchiveForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/archive"],
        downloadArchiveForOrg: ["GET /orgs/{org}/migrations/{migration_id}/archive"],
        getArchiveForAuthenticatedUser: ["GET /user/migrations/{migration_id}/archive"],
        getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
        getImportStatus: ["GET /repos/{owner}/{repo}/import"],
        getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
        getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
        getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
        listForAuthenticatedUser: ["GET /user/migrations"],
        listForOrg: ["GET /orgs/{org}/migrations"],
        listReposForAuthenticatedUser: ["GET /user/migrations/{migration_id}/repositories"],
        listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
        listReposForUser: ["GET /user/migrations/{migration_id}/repositories", {}, {
          renamed: ["migrations", "listReposForAuthenticatedUser"]
        }],
        mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
        setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
        startForAuthenticatedUser: ["POST /user/migrations"],
        startForOrg: ["POST /orgs/{org}/migrations"],
        startImport: ["PUT /repos/{owner}/{repo}/import"],
        unlockRepoForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],
        unlockRepoForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],
        updateImport: ["PATCH /repos/{owner}/{repo}/import"]
      },
      orgs: {
        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
        cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
        convertMemberToOutsideCollaborator: ["PUT /orgs/{org}/outside_collaborators/{username}"],
        createInvitation: ["POST /orgs/{org}/invitations"],
        createWebhook: ["POST /orgs/{org}/hooks"],
        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
        get: ["GET /orgs/{org}"],
        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
        getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
        getWebhookDelivery: ["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],
        list: ["GET /organizations"],
        listAppInstallations: ["GET /orgs/{org}/installations"],
        listBlockedUsers: ["GET /orgs/{org}/blocks"],
        listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
        listForAuthenticatedUser: ["GET /user/orgs"],
        listForUser: ["GET /users/{username}/orgs"],
        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
        listMembers: ["GET /orgs/{org}/members"],
        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
        listPendingInvitations: ["GET /orgs/{org}/invitations"],
        listPublicMembers: ["GET /orgs/{org}/public_members"],
        listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /orgs/{org}/hooks"],
        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: ["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
        removeMember: ["DELETE /orgs/{org}/members/{username}"],
        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
        removeOutsideCollaborator: ["DELETE /orgs/{org}/outside_collaborators/{username}"],
        removePublicMembershipForAuthenticatedUser: ["DELETE /orgs/{org}/public_members/{username}"],
        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
        setPublicMembershipForAuthenticatedUser: ["PUT /orgs/{org}/public_members/{username}"],
        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
        update: ["PATCH /orgs/{org}"],
        updateMembershipForAuthenticatedUser: ["PATCH /user/memberships/orgs/{org}"],
        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
        updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
      },
      packages: {
        deletePackageForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}"],
        deletePackageForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],
        deletePackageForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}"],
        deletePackageVersionForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        deletePackageVersionForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        deletePackageVersionForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        getAllPackageVersionsForAPackageOwnedByAnOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions", {}, {
          renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"]
        }],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions", {}, {
          renamed: ["packages", "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]
        }],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions"],
        getAllPackageVersionsForPackageOwnedByOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],
        getAllPackageVersionsForPackageOwnedByUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions"],
        getPackageForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}"],
        getPackageForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}"],
        getPackageForUser: ["GET /users/{username}/packages/{package_type}/{package_name}"],
        getPackageVersionForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        getPackageVersionForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        getPackageVersionForUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
        listPackagesForAuthenticatedUser: ["GET /user/packages"],
        listPackagesForOrganization: ["GET /orgs/{org}/packages"],
        listPackagesForUser: ["GET /users/{username}/packages"],
        restorePackageForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/restore{?token}"],
        restorePackageForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],
        restorePackageForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],
        restorePackageVersionForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
        restorePackageVersionForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
        restorePackageVersionForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]
      },
      projects: {
        addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
        createCard: ["POST /projects/columns/{column_id}/cards"],
        createColumn: ["POST /projects/{project_id}/columns"],
        createForAuthenticatedUser: ["POST /user/projects"],
        createForOrg: ["POST /orgs/{org}/projects"],
        createForRepo: ["POST /repos/{owner}/{repo}/projects"],
        delete: ["DELETE /projects/{project_id}"],
        deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
        deleteColumn: ["DELETE /projects/columns/{column_id}"],
        get: ["GET /projects/{project_id}"],
        getCard: ["GET /projects/columns/cards/{card_id}"],
        getColumn: ["GET /projects/columns/{column_id}"],
        getPermissionForUser: ["GET /projects/{project_id}/collaborators/{username}/permission"],
        listCards: ["GET /projects/columns/{column_id}/cards"],
        listCollaborators: ["GET /projects/{project_id}/collaborators"],
        listColumns: ["GET /projects/{project_id}/columns"],
        listForOrg: ["GET /orgs/{org}/projects"],
        listForRepo: ["GET /repos/{owner}/{repo}/projects"],
        listForUser: ["GET /users/{username}/projects"],
        moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
        moveColumn: ["POST /projects/columns/{column_id}/moves"],
        removeCollaborator: ["DELETE /projects/{project_id}/collaborators/{username}"],
        update: ["PATCH /projects/{project_id}"],
        updateCard: ["PATCH /projects/columns/cards/{card_id}"],
        updateColumn: ["PATCH /projects/columns/{column_id}"]
      },
      pulls: {
        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        create: ["POST /repos/{owner}/{repo}/pulls"],
        createReplyForReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],
        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        createReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
        deletePendingReview: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
        deleteReviewComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        dismissReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],
        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
        getReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        list: ["GET /repos/{owner}/{repo}/pulls"],
        listCommentsForReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],
        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
        listRequestedReviewers: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
        listReviewComments: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        removeRequestedReviewers: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
        requestReviewers: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
        submitReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],
        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
        updateBranch: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],
        updateReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
        updateReviewComment: ["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]
      },
      rateLimit: {
        get: ["GET /rate_limit"]
      },
      reactions: {
        createForCommitComment: ["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
        createForIssue: ["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        createForIssueComment: ["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
        createForPullRequestReviewComment: ["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
        createForRelease: ["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],
        createForTeamDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
        createForTeamDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],
        deleteForCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],
        deleteForIssue: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],
        deleteForIssueComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],
        deleteForPullRequestComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],
        deleteForTeamDiscussion: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],
        deleteForTeamDiscussionComment: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],
        listForCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
        listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        listForIssueComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
        listForPullRequestReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
        listForTeamDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
        listForTeamDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]
      },
      repos: {
        acceptInvitation: ["PATCH /user/repository_invitations/{invitation_id}", {}, {
          renamed: ["repos", "acceptInvitationForAuthenticatedUser"]
        }],
        acceptInvitationForAuthenticatedUser: ["PATCH /user/repository_invitations/{invitation_id}"],
        addAppAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
          mapToData: "apps"
        }],
        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
        addStatusCheckContexts: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
          mapToData: "contexts"
        }],
        addTeamAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
          mapToData: "teams"
        }],
        addUserAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
          mapToData: "users"
        }],
        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
        checkVulnerabilityAlerts: ["GET /repos/{owner}/{repo}/vulnerability-alerts"],
        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
        compareCommitsWithBasehead: ["GET /repos/{owner}/{repo}/compare/{basehead}"],
        createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
        createCommitComment: ["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
        createCommitSignatureProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
        createDeploymentStatus: ["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
        createForAuthenticatedUser: ["POST /user/repos"],
        createFork: ["POST /repos/{owner}/{repo}/forks"],
        createInOrg: ["POST /orgs/{org}/repos"],
        createOrUpdateEnvironment: ["PUT /repos/{owner}/{repo}/environments/{environment_name}"],
        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
        createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
        createRelease: ["POST /repos/{owner}/{repo}/releases"],
        createUsingTemplate: ["POST /repos/{template_owner}/{template_repo}/generate"],
        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
        declineInvitation: ["DELETE /user/repository_invitations/{invitation_id}", {}, {
          renamed: ["repos", "declineInvitationForAuthenticatedUser"]
        }],
        declineInvitationForAuthenticatedUser: ["DELETE /user/repository_invitations/{invitation_id}"],
        delete: ["DELETE /repos/{owner}/{repo}"],
        deleteAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
        deleteAdminBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
        deleteAnEnvironment: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],
        deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        deleteBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],
        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
        deleteCommitSignatureProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
        deleteDeployment: ["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],
        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
        deleteInvitation: ["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],
        deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
        deletePullRequestReviewProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
        deleteReleaseAsset: ["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
        disableAutomatedSecurityFixes: ["DELETE /repos/{owner}/{repo}/automated-security-fixes"],
        disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
        disableVulnerabilityAlerts: ["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],
        downloadArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}", {}, {
          renamed: ["repos", "downloadZipballArchive"]
        }],
        downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
        downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
        enableAutomatedSecurityFixes: ["PUT /repos/{owner}/{repo}/automated-security-fixes"],
        enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
        enableVulnerabilityAlerts: ["PUT /repos/{owner}/{repo}/vulnerability-alerts"],
        generateReleaseNotes: ["POST /repos/{owner}/{repo}/releases/generate-notes"],
        get: ["GET /repos/{owner}/{repo}"],
        getAccessRestrictions: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
        getAdminBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
        getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
        getAllStatusCheckContexts: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],
        getAllTopics: ["GET /repos/{owner}/{repo}/topics", {
          mediaType: {
            previews: ["mercy"]
          }
        }],
        getAppsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],
        getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
        getBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection"],
        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
        getCollaboratorPermissionLevel: ["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],
        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
        getCommitSignatureProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
        getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
        getDeploymentStatus: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],
        getEnvironment: ["GET /repos/{owner}/{repo}/environments/{environment_name}"],
        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
        getPages: ["GET /repos/{owner}/{repo}/pages"],
        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
        getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
        getPullRequestReviewProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
        getReadme: ["GET /repos/{owner}/{repo}/readme"],
        getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
        getStatusChecksProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
        getTeamsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],
        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
        getUsersWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],
        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
        getWebhookConfigForRepo: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],
        getWebhookDelivery: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],
        listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
        listBranches: ["GET /repos/{owner}/{repo}/branches"],
        listBranchesForHeadCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],
        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
        listCommentsForCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
        listCommitStatusesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],
        listCommits: ["GET /repos/{owner}/{repo}/commits"],
        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
        listDeploymentStatuses: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
        listForAuthenticatedUser: ["GET /user/repos"],
        listForOrg: ["GET /orgs/{org}/repos"],
        listForUser: ["GET /users/{username}/repos"],
        listForks: ["GET /repos/{owner}/{repo}/forks"],
        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
        listPublic: ["GET /repositories"],
        listPullRequestsAssociatedWithCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],
        listReleaseAssets: ["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],
        listReleases: ["GET /repos/{owner}/{repo}/releases"],
        listTags: ["GET /repos/{owner}/{repo}/tags"],
        listTeams: ["GET /repos/{owner}/{repo}/teams"],
        listWebhookDeliveries: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
        merge: ["POST /repos/{owner}/{repo}/merges"],
        mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
        removeAppAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
          mapToData: "apps"
        }],
        removeCollaborator: ["DELETE /repos/{owner}/{repo}/collaborators/{username}"],
        removeStatusCheckContexts: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
          mapToData: "contexts"
        }],
        removeStatusCheckProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
        removeTeamAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
          mapToData: "teams"
        }],
        removeUserAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
          mapToData: "users"
        }],
        renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
        replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics", {
          mediaType: {
            previews: ["mercy"]
          }
        }],
        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
        setAdminBranchProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
        setAppAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
          mapToData: "apps"
        }],
        setStatusCheckContexts: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
          mapToData: "contexts"
        }],
        setTeamAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
          mapToData: "teams"
        }],
        setUserAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
          mapToData: "users"
        }],
        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
        transfer: ["POST /repos/{owner}/{repo}/transfer"],
        update: ["PATCH /repos/{owner}/{repo}"],
        updateBranchProtection: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],
        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
        updateInvitation: ["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],
        updatePullRequestReviewProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
        updateReleaseAsset: ["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        updateStatusCheckPotection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", {}, {
          renamed: ["repos", "updateStatusCheckProtection"]
        }],
        updateStatusCheckProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
        updateWebhookConfigForRepo: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],
        uploadReleaseAsset: ["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}", {
          baseUrl: "https://uploads.github.com"
        }]
      },
      search: {
        code: ["GET /search/code"],
        commits: ["GET /search/commits"],
        issuesAndPullRequests: ["GET /search/issues"],
        labels: ["GET /search/labels"],
        repos: ["GET /search/repositories"],
        topics: ["GET /search/topics", {
          mediaType: {
            previews: ["mercy"]
          }
        }],
        users: ["GET /search/users"]
      },
      secretScanning: {
        getAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],
        listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
        updateAlert: ["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: ["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],
        addOrUpdateProjectPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
        addOrUpdateRepoPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
        checkPermissionsForProjectInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
        checkPermissionsForRepoInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
        create: ["POST /orgs/{org}/teams"],
        createDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
        deleteDiscussionCommentInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
        deleteDiscussionInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
        getDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
        getDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
        getMembershipForUserInOrg: ["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],
        list: ["GET /orgs/{org}/teams"],
        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
        listDiscussionCommentsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
        listForAuthenticatedUser: ["GET /user/teams"],
        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
        listPendingInvitationsInOrg: ["GET /orgs/{org}/teams/{team_slug}/invitations"],
        listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
        removeMembershipForUserInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],
        removeProjectInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
        removeRepoInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
        updateDiscussionCommentInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
        updateDiscussionInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
      },
      users: {
        addEmailForAuthenticated: ["POST /user/emails", {}, {
          renamed: ["users", "addEmailForAuthenticatedUser"]
        }],
        addEmailForAuthenticatedUser: ["POST /user/emails"],
        block: ["PUT /user/blocks/{username}"],
        checkBlocked: ["GET /user/blocks/{username}"],
        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
        createGpgKeyForAuthenticated: ["POST /user/gpg_keys", {}, {
          renamed: ["users", "createGpgKeyForAuthenticatedUser"]
        }],
        createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
        createPublicSshKeyForAuthenticated: ["POST /user/keys", {}, {
          renamed: ["users", "createPublicSshKeyForAuthenticatedUser"]
        }],
        createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
        deleteEmailForAuthenticated: ["DELETE /user/emails", {}, {
          renamed: ["users", "deleteEmailForAuthenticatedUser"]
        }],
        deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
        deleteGpgKeyForAuthenticated: ["DELETE /user/gpg_keys/{gpg_key_id}", {}, {
          renamed: ["users", "deleteGpgKeyForAuthenticatedUser"]
        }],
        deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
        deletePublicSshKeyForAuthenticated: ["DELETE /user/keys/{key_id}", {}, {
          renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"]
        }],
        deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
        follow: ["PUT /user/following/{username}"],
        getAuthenticated: ["GET /user"],
        getByUsername: ["GET /users/{username}"],
        getContextForUser: ["GET /users/{username}/hovercard"],
        getGpgKeyForAuthenticated: ["GET /user/gpg_keys/{gpg_key_id}", {}, {
          renamed: ["users", "getGpgKeyForAuthenticatedUser"]
        }],
        getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
        getPublicSshKeyForAuthenticated: ["GET /user/keys/{key_id}", {}, {
          renamed: ["users", "getPublicSshKeyForAuthenticatedUser"]
        }],
        getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
        list: ["GET /users"],
        listBlockedByAuthenticated: ["GET /user/blocks", {}, {
          renamed: ["users", "listBlockedByAuthenticatedUser"]
        }],
        listBlockedByAuthenticatedUser: ["GET /user/blocks"],
        listEmailsForAuthenticated: ["GET /user/emails", {}, {
          renamed: ["users", "listEmailsForAuthenticatedUser"]
        }],
        listEmailsForAuthenticatedUser: ["GET /user/emails"],
        listFollowedByAuthenticated: ["GET /user/following", {}, {
          renamed: ["users", "listFollowedByAuthenticatedUser"]
        }],
        listFollowedByAuthenticatedUser: ["GET /user/following"],
        listFollowersForAuthenticatedUser: ["GET /user/followers"],
        listFollowersForUser: ["GET /users/{username}/followers"],
        listFollowingForUser: ["GET /users/{username}/following"],
        listGpgKeysForAuthenticated: ["GET /user/gpg_keys", {}, {
          renamed: ["users", "listGpgKeysForAuthenticatedUser"]
        }],
        listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
        listPublicEmailsForAuthenticated: ["GET /user/public_emails", {}, {
          renamed: ["users", "listPublicEmailsForAuthenticatedUser"]
        }],
        listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
        listPublicKeysForUser: ["GET /users/{username}/keys"],
        listPublicSshKeysForAuthenticated: ["GET /user/keys", {}, {
          renamed: ["users", "listPublicSshKeysForAuthenticatedUser"]
        }],
        listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
        setPrimaryEmailVisibilityForAuthenticated: ["PATCH /user/email/visibility", {}, {
          renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"]
        }],
        setPrimaryEmailVisibilityForAuthenticatedUser: ["PATCH /user/email/visibility"],
        unblock: ["DELETE /user/blocks/{username}"],
        unfollow: ["DELETE /user/following/{username}"],
        updateAuthenticated: ["PATCH /user"]
      }
    };
    var VERSION = "5.13.0";
    function endpointsToMethods(octokit, endpointsMap) {
      const newMethods = {};
      for (const [scope, endpoints] of Object.entries(endpointsMap)) {
        for (const [methodName, endpoint] of Object.entries(endpoints)) {
          const [route, defaults, decorations] = endpoint;
          const [method, url] = route.split(/ /);
          const endpointDefaults = Object.assign({
            method,
            url
          }, defaults);
          if (!newMethods[scope]) {
            newMethods[scope] = {};
          }
          const scopeMethods = newMethods[scope];
          if (decorations) {
            scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
            continue;
          }
          scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
        }
      }
      return newMethods;
    }
    function decorate(octokit, scope, methodName, defaults, decorations) {
      const requestWithDefaults = octokit.request.defaults(defaults);
      function withDecorations(...args) {
        let options = requestWithDefaults.endpoint.merge(...args);
        if (decorations.mapToData) {
          options = Object.assign({}, options, {
            data: options[decorations.mapToData],
            [decorations.mapToData]: void 0
          });
          return requestWithDefaults(options);
        }
        if (decorations.renamed) {
          const [newScope, newMethodName] = decorations.renamed;
          octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
        }
        if (decorations.deprecated) {
          octokit.log.warn(decorations.deprecated);
        }
        if (decorations.renamedParameters) {
          const options2 = requestWithDefaults.endpoint.merge(...args);
          for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
            if (name in options2) {
              octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
              if (!(alias in options2)) {
                options2[alias] = options2[name];
              }
              delete options2[name];
            }
          }
          return requestWithDefaults(options2);
        }
        return requestWithDefaults(...args);
      }
      return Object.assign(withDecorations, requestWithDefaults);
    }
    function restEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit, Endpoints);
      return {
        rest: api
      };
    }
    restEndpointMethods.VERSION = VERSION;
    function legacyRestEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit, Endpoints);
      return _objectSpread2(_objectSpread2({}, api), {}, {
        rest: api
      });
    }
    legacyRestEndpointMethods.VERSION = VERSION;
    exports.legacyRestEndpointMethods = legacyRestEndpointMethods;
    exports.restEndpointMethods = restEndpointMethods;
  }
});

// node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node10 = __commonJS({
  "node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var VERSION = "2.17.0";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function normalizePaginatedListResponse(response) {
      if (!response.data) {
        return _objectSpread2(_objectSpread2({}, response), {}, {
          data: []
        });
      }
      const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
      if (!responseNeedsNormalization)
        return response;
      const incompleteResults = response.data.incomplete_results;
      const repositorySelection = response.data.repository_selection;
      const totalCount = response.data.total_count;
      delete response.data.incomplete_results;
      delete response.data.repository_selection;
      delete response.data.total_count;
      const namespaceKey = Object.keys(response.data)[0];
      const data = response.data[namespaceKey];
      response.data = data;
      if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
      }
      if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
      }
      response.data.total_count = totalCount;
      return response;
    }
    function iterator(octokit, route, parameters) {
      const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
      const requestMethod = typeof route === "function" ? route : octokit.request;
      const method = options.method;
      const headers = options.headers;
      let url = options.url;
      return {
        [Symbol.asyncIterator]: () => ({
          async next() {
            if (!url)
              return {
                done: true
              };
            try {
              const response = await requestMethod({
                method,
                url,
                headers
              });
              const normalizedResponse = normalizePaginatedListResponse(response);
              url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
              return {
                value: normalizedResponse
              };
            } catch (error2) {
              if (error2.status !== 409)
                throw error2;
              url = "";
              return {
                value: {
                  status: 200,
                  headers: {},
                  data: []
                }
              };
            }
          }
        })
      };
    }
    function paginate(octokit, route, parameters, mapFn) {
      if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = void 0;
      }
      return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
    }
    function gather(octokit, results, iterator2, mapFn) {
      return iterator2.next().then((result) => {
        if (result.done) {
          return results;
        }
        let earlyExit = false;
        function done() {
          earlyExit = true;
        }
        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
        if (earlyExit) {
          return results;
        }
        return gather(octokit, results, iterator2, mapFn);
      });
    }
    var composePaginateRest = Object.assign(paginate, {
      iterator
    });
    var paginatingEndpoints = ["GET /app/hook/deliveries", "GET /app/installations", "GET /applications/grants", "GET /authorizations", "GET /enterprises/{enterprise}/actions/permissions/organizations", "GET /enterprises/{enterprise}/actions/runner-groups", "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations", "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners", "GET /enterprises/{enterprise}/actions/runners", "GET /enterprises/{enterprise}/actions/runners/downloads", "GET /events", "GET /gists", "GET /gists/public", "GET /gists/starred", "GET /gists/{gist_id}/comments", "GET /gists/{gist_id}/commits", "GET /gists/{gist_id}/forks", "GET /installation/repositories", "GET /issues", "GET /marketplace_listing/plans", "GET /marketplace_listing/plans/{plan_id}/accounts", "GET /marketplace_listing/stubbed/plans", "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts", "GET /networks/{owner}/{repo}/events", "GET /notifications", "GET /organizations", "GET /orgs/{org}/actions/permissions/repositories", "GET /orgs/{org}/actions/runner-groups", "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners", "GET /orgs/{org}/actions/runners", "GET /orgs/{org}/actions/runners/downloads", "GET /orgs/{org}/actions/secrets", "GET /orgs/{org}/actions/secrets/{secret_name}/repositories", "GET /orgs/{org}/blocks", "GET /orgs/{org}/credential-authorizations", "GET /orgs/{org}/events", "GET /orgs/{org}/failed_invitations", "GET /orgs/{org}/hooks", "GET /orgs/{org}/hooks/{hook_id}/deliveries", "GET /orgs/{org}/installations", "GET /orgs/{org}/invitations", "GET /orgs/{org}/invitations/{invitation_id}/teams", "GET /orgs/{org}/issues", "GET /orgs/{org}/members", "GET /orgs/{org}/migrations", "GET /orgs/{org}/migrations/{migration_id}/repositories", "GET /orgs/{org}/outside_collaborators", "GET /orgs/{org}/packages", "GET /orgs/{org}/projects", "GET /orgs/{org}/public_members", "GET /orgs/{org}/repos", "GET /orgs/{org}/secret-scanning/alerts", "GET /orgs/{org}/team-sync/groups", "GET /orgs/{org}/teams", "GET /orgs/{org}/teams/{team_slug}/discussions", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", "GET /orgs/{org}/teams/{team_slug}/invitations", "GET /orgs/{org}/teams/{team_slug}/members", "GET /orgs/{org}/teams/{team_slug}/projects", "GET /orgs/{org}/teams/{team_slug}/repos", "GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings", "GET /orgs/{org}/teams/{team_slug}/teams", "GET /projects/columns/{column_id}/cards", "GET /projects/{project_id}/collaborators", "GET /projects/{project_id}/columns", "GET /repos/{owner}/{repo}/actions/artifacts", "GET /repos/{owner}/{repo}/actions/runners", "GET /repos/{owner}/{repo}/actions/runners/downloads", "GET /repos/{owner}/{repo}/actions/runs", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs", "GET /repos/{owner}/{repo}/actions/secrets", "GET /repos/{owner}/{repo}/actions/workflows", "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", "GET /repos/{owner}/{repo}/assignees", "GET /repos/{owner}/{repo}/autolinks", "GET /repos/{owner}/{repo}/branches", "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", "GET /repos/{owner}/{repo}/code-scanning/alerts", "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", "GET /repos/{owner}/{repo}/code-scanning/analyses", "GET /repos/{owner}/{repo}/collaborators", "GET /repos/{owner}/{repo}/comments", "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/commits", "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments", "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls", "GET /repos/{owner}/{repo}/commits/{ref}/check-runs", "GET /repos/{owner}/{repo}/commits/{ref}/check-suites", "GET /repos/{owner}/{repo}/commits/{ref}/statuses", "GET /repos/{owner}/{repo}/contributors", "GET /repos/{owner}/{repo}/deployments", "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses", "GET /repos/{owner}/{repo}/events", "GET /repos/{owner}/{repo}/forks", "GET /repos/{owner}/{repo}/git/matching-refs/{ref}", "GET /repos/{owner}/{repo}/hooks", "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries", "GET /repos/{owner}/{repo}/invitations", "GET /repos/{owner}/{repo}/issues", "GET /repos/{owner}/{repo}/issues/comments", "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/issues/events", "GET /repos/{owner}/{repo}/issues/{issue_number}/comments", "GET /repos/{owner}/{repo}/issues/{issue_number}/events", "GET /repos/{owner}/{repo}/issues/{issue_number}/labels", "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions", "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline", "GET /repos/{owner}/{repo}/keys", "GET /repos/{owner}/{repo}/labels", "GET /repos/{owner}/{repo}/milestones", "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels", "GET /repos/{owner}/{repo}/notifications", "GET /repos/{owner}/{repo}/pages/builds", "GET /repos/{owner}/{repo}/projects", "GET /repos/{owner}/{repo}/pulls", "GET /repos/{owner}/{repo}/pulls/comments", "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments", "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits", "GET /repos/{owner}/{repo}/pulls/{pull_number}/files", "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews", "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", "GET /repos/{owner}/{repo}/releases", "GET /repos/{owner}/{repo}/releases/{release_id}/assets", "GET /repos/{owner}/{repo}/secret-scanning/alerts", "GET /repos/{owner}/{repo}/stargazers", "GET /repos/{owner}/{repo}/subscribers", "GET /repos/{owner}/{repo}/tags", "GET /repos/{owner}/{repo}/teams", "GET /repositories", "GET /repositories/{repository_id}/environments/{environment_name}/secrets", "GET /scim/v2/enterprises/{enterprise}/Groups", "GET /scim/v2/enterprises/{enterprise}/Users", "GET /scim/v2/organizations/{org}/Users", "GET /search/code", "GET /search/commits", "GET /search/issues", "GET /search/labels", "GET /search/repositories", "GET /search/topics", "GET /search/users", "GET /teams/{team_id}/discussions", "GET /teams/{team_id}/discussions/{discussion_number}/comments", "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", "GET /teams/{team_id}/discussions/{discussion_number}/reactions", "GET /teams/{team_id}/invitations", "GET /teams/{team_id}/members", "GET /teams/{team_id}/projects", "GET /teams/{team_id}/repos", "GET /teams/{team_id}/team-sync/group-mappings", "GET /teams/{team_id}/teams", "GET /user/blocks", "GET /user/emails", "GET /user/followers", "GET /user/following", "GET /user/gpg_keys", "GET /user/installations", "GET /user/installations/{installation_id}/repositories", "GET /user/issues", "GET /user/keys", "GET /user/marketplace_purchases", "GET /user/marketplace_purchases/stubbed", "GET /user/memberships/orgs", "GET /user/migrations", "GET /user/migrations/{migration_id}/repositories", "GET /user/orgs", "GET /user/packages", "GET /user/public_emails", "GET /user/repos", "GET /user/repository_invitations", "GET /user/starred", "GET /user/subscriptions", "GET /user/teams", "GET /users", "GET /users/{username}/events", "GET /users/{username}/events/orgs/{org}", "GET /users/{username}/events/public", "GET /users/{username}/followers", "GET /users/{username}/following", "GET /users/{username}/gists", "GET /users/{username}/gpg_keys", "GET /users/{username}/keys", "GET /users/{username}/orgs", "GET /users/{username}/packages", "GET /users/{username}/projects", "GET /users/{username}/received_events", "GET /users/{username}/received_events/public", "GET /users/{username}/repos", "GET /users/{username}/starred", "GET /users/{username}/subscriptions"];
    function isPaginatingEndpoint(arg) {
      if (typeof arg === "string") {
        return paginatingEndpoints.includes(arg);
      } else {
        return false;
      }
    }
    function paginateRest(octokit) {
      return {
        paginate: Object.assign(paginate.bind(null, octokit), {
          iterator: iterator.bind(null, octokit)
        })
      };
    }
    paginateRest.VERSION = VERSION;
    exports.composePaginateRest = composePaginateRest;
    exports.isPaginatingEndpoint = isPaginatingEndpoint;
    exports.paginateRest = paginateRest;
    exports.paginatingEndpoints = paginatingEndpoints;
  }
});

// node_modules/@actions/github/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/@actions/github/lib/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOctokitOptions = exports.GitHub = exports.defaults = exports.context = void 0;
    var Context = __importStar(require_context());
    var Utils = __importStar(require_utils2());
    var core_1 = require_dist_node8();
    var plugin_rest_endpoint_methods_1 = require_dist_node9();
    var plugin_paginate_rest_1 = require_dist_node10();
    exports.context = new Context.Context();
    var baseUrl = Utils.getApiBaseUrl();
    exports.defaults = {
      baseUrl,
      request: {
        agent: Utils.getProxyAgent(baseUrl)
      }
    };
    exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports.defaults);
    function getOctokitOptions(token, options) {
      const opts = Object.assign({}, options || {});
      const auth = Utils.getAuthString(token, opts);
      if (auth) {
        opts.auth = auth;
      }
      return opts;
    }
    exports.getOctokitOptions = getOctokitOptions;
  }
});

// node_modules/@actions/github/lib/github.js
var require_github = __commonJS({
  "node_modules/@actions/github/lib/github.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOctokit = exports.context = void 0;
    var Context = __importStar(require_context());
    var utils_1 = require_utils4();
    exports.context = new Context.Context();
    function getOctokit(token, options, ...additionalPlugins) {
      const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
      return new GitHubWithPlugins(utils_1.getOctokitOptions(token, options));
    }
    exports.getOctokit = getOctokit;
  }
});

// node_modules/@actions/glob/lib/internal-glob-options-helper.js
var require_internal_glob_options_helper = __commonJS({
  "node_modules/@actions/glob/lib/internal-glob-options-helper.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOptions = void 0;
    var core = __importStar(require_core());
    function getOptions(copy) {
      const result = {
        followSymbolicLinks: true,
        implicitDescendants: true,
        matchDirectories: true,
        omitBrokenSymbolicLinks: true
      };
      if (copy) {
        if (typeof copy.followSymbolicLinks === "boolean") {
          result.followSymbolicLinks = copy.followSymbolicLinks;
          core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);
        }
        if (typeof copy.implicitDescendants === "boolean") {
          result.implicitDescendants = copy.implicitDescendants;
          core.debug(`implicitDescendants '${result.implicitDescendants}'`);
        }
        if (typeof copy.matchDirectories === "boolean") {
          result.matchDirectories = copy.matchDirectories;
          core.debug(`matchDirectories '${result.matchDirectories}'`);
        }
        if (typeof copy.omitBrokenSymbolicLinks === "boolean") {
          result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks;
          core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);
        }
      }
      return result;
    }
    exports.getOptions = getOptions;
  }
});

// node_modules/@actions/glob/lib/internal-path-helper.js
var require_internal_path_helper = __commonJS({
  "node_modules/@actions/glob/lib/internal-path-helper.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.safeTrimTrailingSeparator = exports.normalizeSeparators = exports.hasRoot = exports.hasAbsoluteRoot = exports.ensureAbsoluteRoot = exports.dirname = void 0;
    var path = __importStar(require("path"));
    var assert_1 = __importDefault(require("assert"));
    var IS_WINDOWS = process.platform === "win32";
    function dirname(p) {
      p = safeTrimTrailingSeparator(p);
      if (IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p)) {
        return p;
      }
      let result = path.dirname(p);
      if (IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result)) {
        result = safeTrimTrailingSeparator(result);
      }
      return result;
    }
    exports.dirname = dirname;
    function ensureAbsoluteRoot(root, itemPath) {
      assert_1.default(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);
      assert_1.default(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);
      if (hasAbsoluteRoot(itemPath)) {
        return itemPath;
      }
      if (IS_WINDOWS) {
        if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
          let cwd = process.cwd();
          assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
          if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {
            if (itemPath.length === 2) {
              return `${itemPath[0]}:\\${cwd.substr(3)}`;
            } else {
              if (!cwd.endsWith("\\")) {
                cwd += "\\";
              }
              return `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`;
            }
          } else {
            return `${itemPath[0]}:\\${itemPath.substr(2)}`;
          }
        } else if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
          const cwd = process.cwd();
          assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
          return `${cwd[0]}:\\${itemPath.substr(1)}`;
        }
      }
      assert_1.default(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);
      if (root.endsWith("/") || IS_WINDOWS && root.endsWith("\\")) {
      } else {
        root += path.sep;
      }
      return root + itemPath;
    }
    exports.ensureAbsoluteRoot = ensureAbsoluteRoot;
    function hasAbsoluteRoot(itemPath) {
      assert_1.default(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);
      itemPath = normalizeSeparators(itemPath);
      if (IS_WINDOWS) {
        return itemPath.startsWith("\\\\") || /^[A-Z]:\\/i.test(itemPath);
      }
      return itemPath.startsWith("/");
    }
    exports.hasAbsoluteRoot = hasAbsoluteRoot;
    function hasRoot(itemPath) {
      assert_1.default(itemPath, `isRooted parameter 'itemPath' must not be empty`);
      itemPath = normalizeSeparators(itemPath);
      if (IS_WINDOWS) {
        return itemPath.startsWith("\\") || /^[A-Z]:/i.test(itemPath);
      }
      return itemPath.startsWith("/");
    }
    exports.hasRoot = hasRoot;
    function normalizeSeparators(p) {
      p = p || "";
      if (IS_WINDOWS) {
        p = p.replace(/\//g, "\\");
        const isUnc = /^\\\\+[^\\]/.test(p);
        return (isUnc ? "\\" : "") + p.replace(/\\\\+/g, "\\");
      }
      return p.replace(/\/\/+/g, "/");
    }
    exports.normalizeSeparators = normalizeSeparators;
    function safeTrimTrailingSeparator(p) {
      if (!p) {
        return "";
      }
      p = normalizeSeparators(p);
      if (!p.endsWith(path.sep)) {
        return p;
      }
      if (p === path.sep) {
        return p;
      }
      if (IS_WINDOWS && /^[A-Z]:\\$/i.test(p)) {
        return p;
      }
      return p.substr(0, p.length - 1);
    }
    exports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
  }
});

// node_modules/@actions/glob/lib/internal-match-kind.js
var require_internal_match_kind = __commonJS({
  "node_modules/@actions/glob/lib/internal-match-kind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MatchKind = void 0;
    var MatchKind;
    (function(MatchKind2) {
      MatchKind2[MatchKind2["None"] = 0] = "None";
      MatchKind2[MatchKind2["Directory"] = 1] = "Directory";
      MatchKind2[MatchKind2["File"] = 2] = "File";
      MatchKind2[MatchKind2["All"] = 3] = "All";
    })(MatchKind = exports.MatchKind || (exports.MatchKind = {}));
  }
});

// node_modules/@actions/glob/lib/internal-pattern-helper.js
var require_internal_pattern_helper = __commonJS({
  "node_modules/@actions/glob/lib/internal-pattern-helper.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partialMatch = exports.match = exports.getSearchPaths = void 0;
    var pathHelper = __importStar(require_internal_path_helper());
    var internal_match_kind_1 = require_internal_match_kind();
    var IS_WINDOWS = process.platform === "win32";
    function getSearchPaths(patterns) {
      patterns = patterns.filter((x) => !x.negate);
      const searchPathMap = {};
      for (const pattern of patterns) {
        const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
        searchPathMap[key] = "candidate";
      }
      const result = [];
      for (const pattern of patterns) {
        const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
        if (searchPathMap[key] === "included") {
          continue;
        }
        let foundAncestor = false;
        let tempKey = key;
        let parent = pathHelper.dirname(tempKey);
        while (parent !== tempKey) {
          if (searchPathMap[parent]) {
            foundAncestor = true;
            break;
          }
          tempKey = parent;
          parent = pathHelper.dirname(tempKey);
        }
        if (!foundAncestor) {
          result.push(pattern.searchPath);
          searchPathMap[key] = "included";
        }
      }
      return result;
    }
    exports.getSearchPaths = getSearchPaths;
    function match(patterns, itemPath) {
      let result = internal_match_kind_1.MatchKind.None;
      for (const pattern of patterns) {
        if (pattern.negate) {
          result &= ~pattern.match(itemPath);
        } else {
          result |= pattern.match(itemPath);
        }
      }
      return result;
    }
    exports.match = match;
    function partialMatch(patterns, itemPath) {
      return patterns.some((x) => !x.negate && x.partialMatch(itemPath));
    }
    exports.partialMatch = partialMatch;
  }
});

// node_modules/concat-map/index.js
var require_concat_map = __commonJS({
  "node_modules/concat-map/index.js"(exports, module2) {
    module2.exports = function(xs, fn) {
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x))
          res.push.apply(res, x);
        else
          res.push(x);
      }
      return res;
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
  }
});

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports, module2) {
    "use strict";
    module2.exports = balanced;
    function balanced(a, b, str) {
      if (a instanceof RegExp)
        a = maybeMatch(a, str);
      if (b instanceof RegExp)
        b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "node_modules/brace-expansion/index.js"(exports, module2) {
    var concatMap = require_concat_map();
    var balanced = require_balanced_match();
    module2.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m = balanced("{", "}", str);
      if (!m)
        return str.split(",");
      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(",");
      p[p.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
      }
      parts.push.apply(parts, p);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }
    function expand(str, isTop) {
      var expansions = [];
      var m = balanced("{", "}", str);
      if (!m || /\$$/.test(m.pre))
        return [str];
      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m.body.indexOf(",") >= 0;
      if (!isSequence && !isOptions) {
        if (m.post.match(/,.*\}/)) {
          str = m.pre + "{" + m.body + escClose + m.post;
          return expand(str);
        }
        return [str];
      }
      var n;
      if (isSequence) {
        n = m.body.split(/\.\./);
      } else {
        n = parseCommaParts(m.body);
        if (n.length === 1) {
          n = expand(n[0], false).map(embrace);
          if (n.length === 1) {
            var post = m.post.length ? expand(m.post, false) : [""];
            return post.map(function(p) {
              return m.pre + n[0] + p;
            });
          }
        }
      }
      var pre = m.pre;
      var post = m.post.length ? expand(m.post, false) : [""];
      var N;
      if (isSequence) {
        var x = numeric(n[0]);
        var y = numeric(n[1]);
        var width = Math.max(n[0].length, n[1].length);
        var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
        var test = lte;
        var reverse = y < x;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n.some(isPadded);
        N = [];
        for (var i = x; test(i, y); i += incr) {
          var c;
          if (isAlphaSequence) {
            c = String.fromCharCode(i);
            if (c === "\\")
              c = "";
          } else {
            c = String(i);
            if (pad) {
              var need = width - c.length;
              if (need > 0) {
                var z = new Array(need + 1).join("0");
                if (i < 0)
                  c = "-" + z + c.slice(1);
                else
                  c = z + c;
              }
            }
          }
          N.push(c);
        }
      } else {
        N = concatMap(n, function(el) {
          return expand(el, false);
        });
      }
      for (var j = 0; j < N.length; j++) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + N[j] + post[k];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }
      return expansions;
    }
  }
});

// node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS({
  "node_modules/minimatch/minimatch.js"(exports, module2) {
    module2.exports = minimatch;
    minimatch.Minimatch = Minimatch;
    var path = function() {
      try {
        return require("path");
      } catch (e) {
      }
    }() || {
      sep: "/"
    };
    minimatch.sep = path.sep;
    var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
    var expand = require_brace_expansion();
    var plTypes = {
      "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
      "?": { open: "(?:", close: ")?" },
      "+": { open: "(?:", close: ")+" },
      "*": { open: "(?:", close: ")*" },
      "@": { open: "(?:", close: ")" }
    };
    var qmark = "[^/]";
    var star = qmark + "*?";
    var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
    var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
    var reSpecials = charSet("().*{}+?[]^$\\!");
    function charSet(s) {
      return s.split("").reduce(function(set, c) {
        set[c] = true;
        return set;
      }, {});
    }
    var slashSplit = /\/+/;
    minimatch.filter = filter;
    function filter(pattern, options) {
      options = options || {};
      return function(p, i, list) {
        return minimatch(p, pattern, options);
      };
    }
    function ext(a, b) {
      b = b || {};
      var t = {};
      Object.keys(a).forEach(function(k) {
        t[k] = a[k];
      });
      Object.keys(b).forEach(function(k) {
        t[k] = b[k];
      });
      return t;
    }
    minimatch.defaults = function(def) {
      if (!def || typeof def !== "object" || !Object.keys(def).length) {
        return minimatch;
      }
      var orig = minimatch;
      var m = function minimatch2(p, pattern, options) {
        return orig(p, pattern, ext(def, options));
      };
      m.Minimatch = function Minimatch2(pattern, options) {
        return new orig.Minimatch(pattern, ext(def, options));
      };
      m.Minimatch.defaults = function defaults(options) {
        return orig.defaults(ext(def, options)).Minimatch;
      };
      m.filter = function filter2(pattern, options) {
        return orig.filter(pattern, ext(def, options));
      };
      m.defaults = function defaults(options) {
        return orig.defaults(ext(def, options));
      };
      m.makeRe = function makeRe2(pattern, options) {
        return orig.makeRe(pattern, ext(def, options));
      };
      m.braceExpand = function braceExpand2(pattern, options) {
        return orig.braceExpand(pattern, ext(def, options));
      };
      m.match = function(list, pattern, options) {
        return orig.match(list, pattern, ext(def, options));
      };
      return m;
    };
    Minimatch.defaults = function(def) {
      return minimatch.defaults(def).Minimatch;
    };
    function minimatch(p, pattern, options) {
      assertValidPattern(pattern);
      if (!options)
        options = {};
      if (!options.nocomment && pattern.charAt(0) === "#") {
        return false;
      }
      return new Minimatch(pattern, options).match(p);
    }
    function Minimatch(pattern, options) {
      if (!(this instanceof Minimatch)) {
        return new Minimatch(pattern, options);
      }
      assertValidPattern(pattern);
      if (!options)
        options = {};
      pattern = pattern.trim();
      if (!options.allowWindowsEscape && path.sep !== "/") {
        pattern = pattern.split(path.sep).join("/");
      }
      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;
      this.partial = !!options.partial;
      this.make();
    }
    Minimatch.prototype.debug = function() {
    };
    Minimatch.prototype.make = make;
    function make() {
      var pattern = this.pattern;
      var options = this.options;
      if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!pattern) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var set = this.globSet = this.braceExpand();
      if (options.debug)
        this.debug = function debug2() {
          console.error.apply(console, arguments);
        };
      this.debug(this.pattern, set);
      set = this.globParts = set.map(function(s) {
        return s.split(slashSplit);
      });
      this.debug(this.pattern, set);
      set = set.map(function(s, si, set2) {
        return s.map(this.parse, this);
      }, this);
      this.debug(this.pattern, set);
      set = set.filter(function(s) {
        return s.indexOf(false) === -1;
      });
      this.debug(this.pattern, set);
      this.set = set;
    }
    Minimatch.prototype.parseNegate = parseNegate;
    function parseNegate() {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;
      if (options.nonegate)
        return;
      for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++) {
        negate = !negate;
        negateOffset++;
      }
      if (negateOffset)
        this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }
    minimatch.braceExpand = function(pattern, options) {
      return braceExpand(pattern, options);
    };
    Minimatch.prototype.braceExpand = braceExpand;
    function braceExpand(pattern, options) {
      if (!options) {
        if (this instanceof Minimatch) {
          options = this.options;
        } else {
          options = {};
        }
      }
      pattern = typeof pattern === "undefined" ? this.pattern : pattern;
      assertValidPattern(pattern);
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        return [pattern];
      }
      return expand(pattern);
    }
    var MAX_PATTERN_LENGTH = 1024 * 64;
    var assertValidPattern = function(pattern) {
      if (typeof pattern !== "string") {
        throw new TypeError("invalid pattern");
      }
      if (pattern.length > MAX_PATTERN_LENGTH) {
        throw new TypeError("pattern is too long");
      }
    };
    Minimatch.prototype.parse = parse2;
    var SUBPARSE = {};
    function parse2(pattern, isSub) {
      assertValidPattern(pattern);
      var options = this.options;
      if (pattern === "**") {
        if (!options.noglobstar)
          return GLOBSTAR;
        else
          pattern = "*";
      }
      if (pattern === "")
        return "";
      var re = "";
      var hasMagic = !!options.nocase;
      var escaping = false;
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
      var self2 = this;
      function clearStateChar() {
        if (stateChar) {
          switch (stateChar) {
            case "*":
              re += star;
              hasMagic = true;
              break;
            case "?":
              re += qmark;
              hasMagic = true;
              break;
            default:
              re += "\\" + stateChar;
              break;
          }
          self2.debug("clearStateChar %j %j", stateChar, re);
          stateChar = false;
        }
      }
      for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
        this.debug("%s	%s %s %j", pattern, i, re, c);
        if (escaping && reSpecials[c]) {
          re += "\\" + c;
          escaping = false;
          continue;
        }
        switch (c) {
          case "/": {
            return false;
          }
          case "\\":
            clearStateChar();
            escaping = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            this.debug("%s	%s %s %j <-- stateChar", pattern, i, re, c);
            if (inClass) {
              this.debug("  in class");
              if (c === "!" && i === classStart + 1)
                c = "^";
              re += c;
              continue;
            }
            self2.debug("call clearStateChar %j", stateChar);
            clearStateChar();
            stateChar = c;
            if (options.noext)
              clearStateChar();
            continue;
          case "(":
            if (inClass) {
              re += "(";
              continue;
            }
            if (!stateChar) {
              re += "\\(";
              continue;
            }
            patternListStack.push({
              type: stateChar,
              start: i - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
            this.debug("plType %j %j", stateChar, re);
            stateChar = false;
            continue;
          case ")":
            if (inClass || !patternListStack.length) {
              re += "\\)";
              continue;
            }
            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            re += pl.close;
            if (pl.type === "!") {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
            continue;
          case "|":
            if (inClass || !patternListStack.length || escaping) {
              re += "\\|";
              escaping = false;
              continue;
            }
            clearStateChar();
            re += "|";
            continue;
          case "[":
            clearStateChar();
            if (inClass) {
              re += "\\" + c;
              continue;
            }
            inClass = true;
            classStart = i;
            reClassStart = re.length;
            re += c;
            continue;
          case "]":
            if (i === classStart + 1 || !inClass) {
              re += "\\" + c;
              escaping = false;
              continue;
            }
            var cs = pattern.substring(classStart + 1, i);
            try {
              RegExp("[" + cs + "]");
            } catch (er) {
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
            hasMagic = true;
            inClass = false;
            re += c;
            continue;
          default:
            clearStateChar();
            if (escaping) {
              escaping = false;
            } else if (reSpecials[c] && !(c === "^" && inClass)) {
              re += "\\";
            }
            re += c;
        }
      }
      if (inClass) {
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + "\\[" + sp[0];
        hasMagic = hasMagic || sp[1];
      }
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug("setting tail", re, pl);
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
          if (!$2) {
            $2 = "\\";
          }
          return $1 + $1 + $2 + "|";
        });
        this.debug("tail=%j\n   %s", tail, tail, pl, re);
        var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
        hasMagic = true;
        re = re.slice(0, pl.reStart) + t + "\\(" + tail;
      }
      clearStateChar();
      if (escaping) {
        re += "\\\\";
      }
      var addPatternStart = false;
      switch (re.charAt(0)) {
        case "[":
        case ".":
        case "(":
          addPatternStart = true;
      }
      for (var n = negativeLists.length - 1; n > -1; n--) {
        var nl = negativeLists[n];
        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);
        nlLast += nlAfter;
        var openParensBefore = nlBefore.split("(").length - 1;
        var cleanAfter = nlAfter;
        for (i = 0; i < openParensBefore; i++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
        }
        nlAfter = cleanAfter;
        var dollar = "";
        if (nlAfter === "" && isSub !== SUBPARSE) {
          dollar = "$";
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
      }
      if (re !== "" && hasMagic) {
        re = "(?=.)" + re;
      }
      if (addPatternStart) {
        re = patternStart + re;
      }
      if (isSub === SUBPARSE) {
        return [re, hasMagic];
      }
      if (!hasMagic) {
        return globUnescape(pattern);
      }
      var flags = options.nocase ? "i" : "";
      try {
        var regExp = new RegExp("^" + re + "$", flags);
      } catch (er) {
        return new RegExp("$.");
      }
      regExp._glob = pattern;
      regExp._src = re;
      return regExp;
    }
    minimatch.makeRe = function(pattern, options) {
      return new Minimatch(pattern, options || {}).makeRe();
    };
    Minimatch.prototype.makeRe = makeRe;
    function makeRe() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var set = this.set;
      if (!set.length) {
        this.regexp = false;
        return this.regexp;
      }
      var options = this.options;
      var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
      var flags = options.nocase ? "i" : "";
      var re = set.map(function(pattern) {
        return pattern.map(function(p) {
          return p === GLOBSTAR ? twoStar : typeof p === "string" ? regExpEscape(p) : p._src;
        }).join("\\/");
      }).join("|");
      re = "^(?:" + re + ")$";
      if (this.negate)
        re = "^(?!" + re + ").*$";
      try {
        this.regexp = new RegExp(re, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp;
    }
    minimatch.match = function(list, pattern, options) {
      options = options || {};
      var mm = new Minimatch(pattern, options);
      list = list.filter(function(f) {
        return mm.match(f);
      });
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list;
    };
    Minimatch.prototype.match = function match(f, partial) {
      if (typeof partial === "undefined")
        partial = this.partial;
      this.debug("match", f, this.pattern);
      if (this.comment)
        return false;
      if (this.empty)
        return f === "";
      if (f === "/" && partial)
        return true;
      var options = this.options;
      if (path.sep !== "/") {
        f = f.split(path.sep).join("/");
      }
      f = f.split(slashSplit);
      this.debug(this.pattern, "split", f);
      var set = this.set;
      this.debug(this.pattern, "set", set);
      var filename;
      var i;
      for (i = f.length - 1; i >= 0; i--) {
        filename = f[i];
        if (filename)
          break;
      }
      for (i = 0; i < set.length; i++) {
        var pattern = set[i];
        var file = f;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate)
            return true;
          return !this.negate;
        }
      }
      if (options.flipNegate)
        return false;
      return this.negate;
    };
    Minimatch.prototype.matchOne = function(file, pattern, partial) {
      var options = this.options;
      this.debug(
        "matchOne",
        { "this": this, file, pattern }
      );
      this.debug("matchOne", file.length, pattern.length);
      for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
        this.debug("matchOne loop");
        var p = pattern[pi];
        var f = file[fi];
        this.debug(pattern, p, f);
        if (p === false)
          return false;
        if (p === GLOBSTAR) {
          this.debug("GLOBSTAR", [pattern, p, f]);
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug("** at the end");
            for (; fi < fl; fi++) {
              if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                return false;
            }
            return true;
          }
          while (fr < fl) {
            var swallowee = file[fr];
            this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug("globstar found match!", fr, fl, swallowee);
              return true;
            } else {
              if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                this.debug("dot detected!", file, fr, pattern, pr);
                break;
              }
              this.debug("globstar swallow a segment, and continue");
              fr++;
            }
          }
          if (partial) {
            this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
            if (fr === fl)
              return true;
          }
          return false;
        }
        var hit;
        if (typeof p === "string") {
          hit = f === p;
          this.debug("string match", p, f, hit);
        } else {
          hit = f.match(p);
          this.debug("pattern match", p, f, hit);
        }
        if (!hit)
          return false;
      }
      if (fi === fl && pi === pl) {
        return true;
      } else if (fi === fl) {
        return partial;
      } else if (pi === pl) {
        return fi === fl - 1 && file[fi] === "";
      }
      throw new Error("wtf?");
    };
    function globUnescape(s) {
      return s.replace(/\\(.)/g, "$1");
    }
    function regExpEscape(s) {
      return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  }
});

// node_modules/@actions/glob/lib/internal-path.js
var require_internal_path = __commonJS({
  "node_modules/@actions/glob/lib/internal-path.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Path = void 0;
    var path = __importStar(require("path"));
    var pathHelper = __importStar(require_internal_path_helper());
    var assert_1 = __importDefault(require("assert"));
    var IS_WINDOWS = process.platform === "win32";
    var Path = class {
      constructor(itemPath) {
        this.segments = [];
        if (typeof itemPath === "string") {
          assert_1.default(itemPath, `Parameter 'itemPath' must not be empty`);
          itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
          if (!pathHelper.hasRoot(itemPath)) {
            this.segments = itemPath.split(path.sep);
          } else {
            let remaining = itemPath;
            let dir = pathHelper.dirname(remaining);
            while (dir !== remaining) {
              const basename = path.basename(remaining);
              this.segments.unshift(basename);
              remaining = dir;
              dir = pathHelper.dirname(remaining);
            }
            this.segments.unshift(remaining);
          }
        } else {
          assert_1.default(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);
          for (let i = 0; i < itemPath.length; i++) {
            let segment = itemPath[i];
            assert_1.default(segment, `Parameter 'itemPath' must not contain any empty segments`);
            segment = pathHelper.normalizeSeparators(itemPath[i]);
            if (i === 0 && pathHelper.hasRoot(segment)) {
              segment = pathHelper.safeTrimTrailingSeparator(segment);
              assert_1.default(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);
              this.segments.push(segment);
            } else {
              assert_1.default(!segment.includes(path.sep), `Parameter 'itemPath' contains unexpected path separators`);
              this.segments.push(segment);
            }
          }
        }
      }
      toString() {
        let result = this.segments[0];
        let skipSlash = result.endsWith(path.sep) || IS_WINDOWS && /^[A-Z]:$/i.test(result);
        for (let i = 1; i < this.segments.length; i++) {
          if (skipSlash) {
            skipSlash = false;
          } else {
            result += path.sep;
          }
          result += this.segments[i];
        }
        return result;
      }
    };
    exports.Path = Path;
  }
});

// node_modules/@actions/glob/lib/internal-pattern.js
var require_internal_pattern = __commonJS({
  "node_modules/@actions/glob/lib/internal-pattern.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pattern = void 0;
    var os = __importStar(require("os"));
    var path = __importStar(require("path"));
    var pathHelper = __importStar(require_internal_path_helper());
    var assert_1 = __importDefault(require("assert"));
    var minimatch_1 = require_minimatch();
    var internal_match_kind_1 = require_internal_match_kind();
    var internal_path_1 = require_internal_path();
    var IS_WINDOWS = process.platform === "win32";
    var Pattern = class {
      constructor(patternOrNegate, isImplicitPattern = false, segments, homedir) {
        this.negate = false;
        let pattern;
        if (typeof patternOrNegate === "string") {
          pattern = patternOrNegate.trim();
        } else {
          segments = segments || [];
          assert_1.default(segments.length, `Parameter 'segments' must not empty`);
          const root = Pattern.getLiteral(segments[0]);
          assert_1.default(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);
          pattern = new internal_path_1.Path(segments).toString().trim();
          if (patternOrNegate) {
            pattern = `!${pattern}`;
          }
        }
        while (pattern.startsWith("!")) {
          this.negate = !this.negate;
          pattern = pattern.substr(1).trim();
        }
        pattern = Pattern.fixupPattern(pattern, homedir);
        this.segments = new internal_path_1.Path(pattern).segments;
        this.trailingSeparator = pathHelper.normalizeSeparators(pattern).endsWith(path.sep);
        pattern = pathHelper.safeTrimTrailingSeparator(pattern);
        let foundGlob = false;
        const searchSegments = this.segments.map((x) => Pattern.getLiteral(x)).filter((x) => !foundGlob && !(foundGlob = x === ""));
        this.searchPath = new internal_path_1.Path(searchSegments).toString();
        this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? "i" : "");
        this.isImplicitPattern = isImplicitPattern;
        const minimatchOptions = {
          dot: true,
          nobrace: true,
          nocase: IS_WINDOWS,
          nocomment: true,
          noext: true,
          nonegate: true
        };
        pattern = IS_WINDOWS ? pattern.replace(/\\/g, "/") : pattern;
        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);
      }
      match(itemPath) {
        if (this.segments[this.segments.length - 1] === "**") {
          itemPath = pathHelper.normalizeSeparators(itemPath);
          if (!itemPath.endsWith(path.sep) && this.isImplicitPattern === false) {
            itemPath = `${itemPath}${path.sep}`;
          }
        } else {
          itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        }
        if (this.minimatch.match(itemPath)) {
          return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;
        }
        return internal_match_kind_1.MatchKind.None;
      }
      partialMatch(itemPath) {
        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        if (pathHelper.dirname(itemPath) === itemPath) {
          return this.rootRegExp.test(itemPath);
        }
        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], true);
      }
      static globEscape(s) {
        return (IS_WINDOWS ? s : s.replace(/\\/g, "\\\\")).replace(/(\[)(?=[^/]+\])/g, "[[]").replace(/\?/g, "[?]").replace(/\*/g, "[*]");
      }
      static fixupPattern(pattern, homedir) {
        assert_1.default(pattern, "pattern cannot be empty");
        const literalSegments = new internal_path_1.Path(pattern).segments.map((x) => Pattern.getLiteral(x));
        assert_1.default(literalSegments.every((x, i) => (x !== "." || i === 0) && x !== ".."), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);
        assert_1.default(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);
        pattern = pathHelper.normalizeSeparators(pattern);
        if (pattern === "." || pattern.startsWith(`.${path.sep}`)) {
          pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1);
        } else if (pattern === "~" || pattern.startsWith(`~${path.sep}`)) {
          homedir = homedir || os.homedir();
          assert_1.default(homedir, "Unable to determine HOME directory");
          assert_1.default(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);
          pattern = Pattern.globEscape(homedir) + pattern.substr(1);
        } else if (IS_WINDOWS && (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
          let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", pattern.substr(0, 2));
          if (pattern.length > 2 && !root.endsWith("\\")) {
            root += "\\";
          }
          pattern = Pattern.globEscape(root) + pattern.substr(2);
        } else if (IS_WINDOWS && (pattern === "\\" || pattern.match(/^\\[^\\]/))) {
          let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", "\\");
          if (!root.endsWith("\\")) {
            root += "\\";
          }
          pattern = Pattern.globEscape(root) + pattern.substr(1);
        } else {
          pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);
        }
        return pathHelper.normalizeSeparators(pattern);
      }
      static getLiteral(segment) {
        let literal = "";
        for (let i = 0; i < segment.length; i++) {
          const c = segment[i];
          if (c === "\\" && !IS_WINDOWS && i + 1 < segment.length) {
            literal += segment[++i];
            continue;
          } else if (c === "*" || c === "?") {
            return "";
          } else if (c === "[" && i + 1 < segment.length) {
            let set = "";
            let closed = -1;
            for (let i2 = i + 1; i2 < segment.length; i2++) {
              const c2 = segment[i2];
              if (c2 === "\\" && !IS_WINDOWS && i2 + 1 < segment.length) {
                set += segment[++i2];
                continue;
              } else if (c2 === "]") {
                closed = i2;
                break;
              } else {
                set += c2;
              }
            }
            if (closed >= 0) {
              if (set.length > 1) {
                return "";
              }
              if (set) {
                literal += set;
                i = closed;
                continue;
              }
            }
          }
          literal += c;
        }
        return literal;
      }
      static regExpEscape(s) {
        return s.replace(/[[\\^$.|?*+()]/g, "\\$&");
      }
    };
    exports.Pattern = Pattern;
  }
});

// node_modules/@actions/glob/lib/internal-search-state.js
var require_internal_search_state = __commonJS({
  "node_modules/@actions/glob/lib/internal-search-state.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SearchState = void 0;
    var SearchState = class {
      constructor(path, level) {
        this.path = path;
        this.level = level;
      }
    };
    exports.SearchState = SearchState;
  }
});

// node_modules/@actions/glob/lib/internal-globber.js
var require_internal_globber = __commonJS({
  "node_modules/@actions/glob/lib/internal-globber.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    var __await = exports && exports.__await || function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    var __asyncGenerator = exports && exports.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultGlobber = void 0;
    var core = __importStar(require_core());
    var fs = __importStar(require("fs"));
    var globOptionsHelper = __importStar(require_internal_glob_options_helper());
    var path = __importStar(require("path"));
    var patternHelper = __importStar(require_internal_pattern_helper());
    var internal_match_kind_1 = require_internal_match_kind();
    var internal_pattern_1 = require_internal_pattern();
    var internal_search_state_1 = require_internal_search_state();
    var IS_WINDOWS = process.platform === "win32";
    var DefaultGlobber = class {
      constructor(options) {
        this.patterns = [];
        this.searchPaths = [];
        this.options = globOptionsHelper.getOptions(options);
      }
      getSearchPaths() {
        return this.searchPaths.slice();
      }
      glob() {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
          const result = [];
          try {
            for (var _b = __asyncValues(this.globGenerator()), _c; _c = yield _b.next(), !_c.done; ) {
              const itemPath = _c.value;
              result.push(itemPath);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                yield _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return result;
        });
      }
      globGenerator() {
        return __asyncGenerator(this, arguments, function* globGenerator_1() {
          const options = globOptionsHelper.getOptions(this.options);
          const patterns = [];
          for (const pattern of this.patterns) {
            patterns.push(pattern);
            if (options.implicitDescendants && (pattern.trailingSeparator || pattern.segments[pattern.segments.length - 1] !== "**")) {
              patterns.push(new internal_pattern_1.Pattern(pattern.negate, true, pattern.segments.concat("**")));
            }
          }
          const stack = [];
          for (const searchPath of patternHelper.getSearchPaths(patterns)) {
            core.debug(`Search path '${searchPath}'`);
            try {
              yield __await(fs.promises.lstat(searchPath));
            } catch (err) {
              if (err.code === "ENOENT") {
                continue;
              }
              throw err;
            }
            stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
          }
          const traversalChain = [];
          while (stack.length) {
            const item = stack.pop();
            const match = patternHelper.match(patterns, item.path);
            const partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);
            if (!match && !partialMatch) {
              continue;
            }
            const stats = yield __await(
              DefaultGlobber.stat(item, options, traversalChain)
            );
            if (!stats) {
              continue;
            }
            if (stats.isDirectory()) {
              if (match & internal_match_kind_1.MatchKind.Directory && options.matchDirectories) {
                yield yield __await(item.path);
              } else if (!partialMatch) {
                continue;
              }
              const childLevel = item.level + 1;
              const childItems = (yield __await(fs.promises.readdir(item.path))).map((x) => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel));
              stack.push(...childItems.reverse());
            } else if (match & internal_match_kind_1.MatchKind.File) {
              yield yield __await(item.path);
            }
          }
        });
      }
      static create(patterns, options) {
        return __awaiter(this, void 0, void 0, function* () {
          const result = new DefaultGlobber(options);
          if (IS_WINDOWS) {
            patterns = patterns.replace(/\r\n/g, "\n");
            patterns = patterns.replace(/\r/g, "\n");
          }
          const lines = patterns.split("\n").map((x) => x.trim());
          for (const line of lines) {
            if (!line || line.startsWith("#")) {
              continue;
            } else {
              result.patterns.push(new internal_pattern_1.Pattern(line));
            }
          }
          result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));
          return result;
        });
      }
      static stat(item, options, traversalChain) {
        return __awaiter(this, void 0, void 0, function* () {
          let stats;
          if (options.followSymbolicLinks) {
            try {
              stats = yield fs.promises.stat(item.path);
            } catch (err) {
              if (err.code === "ENOENT") {
                if (options.omitBrokenSymbolicLinks) {
                  core.debug(`Broken symlink '${item.path}'`);
                  return void 0;
                }
                throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
              }
              throw err;
            }
          } else {
            stats = yield fs.promises.lstat(item.path);
          }
          if (stats.isDirectory() && options.followSymbolicLinks) {
            const realPath = yield fs.promises.realpath(item.path);
            while (traversalChain.length >= item.level) {
              traversalChain.pop();
            }
            if (traversalChain.some((x) => x === realPath)) {
              core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
              return void 0;
            }
            traversalChain.push(realPath);
          }
          return stats;
        });
      }
    };
    exports.DefaultGlobber = DefaultGlobber;
  }
});

// node_modules/@actions/glob/lib/internal-hash-files.js
var require_internal_hash_files = __commonJS({
  "node_modules/@actions/glob/lib/internal-hash-files.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashFiles = void 0;
    var crypto5 = __importStar(require("crypto"));
    var core = __importStar(require_core());
    var fs = __importStar(require("fs"));
    var stream = __importStar(require("stream"));
    var util = __importStar(require("util"));
    var path = __importStar(require("path"));
    function hashFiles(globber, verbose = false) {
      var e_1, _a;
      var _b;
      return __awaiter(this, void 0, void 0, function* () {
        const writeDelegate = verbose ? core.info : core.debug;
        let hasMatch = false;
        const githubWorkspace = (_b = process.env["GITHUB_WORKSPACE"]) !== null && _b !== void 0 ? _b : process.cwd();
        const result = crypto5.createHash("sha256");
        let count = 0;
        try {
          for (var _c = __asyncValues(globber.globGenerator()), _d; _d = yield _c.next(), !_d.done; ) {
            const file = _d.value;
            writeDelegate(file);
            if (!file.startsWith(`${githubWorkspace}${path.sep}`)) {
              writeDelegate(`Ignore '${file}' since it is not under GITHUB_WORKSPACE.`);
              continue;
            }
            if (fs.statSync(file).isDirectory()) {
              writeDelegate(`Skip directory '${file}'.`);
              continue;
            }
            const hash = crypto5.createHash("sha256");
            const pipeline = util.promisify(stream.pipeline);
            yield pipeline(fs.createReadStream(file), hash);
            result.write(hash.digest());
            count++;
            if (!hasMatch) {
              hasMatch = true;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return))
              yield _a.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        result.end();
        if (hasMatch) {
          writeDelegate(`Found ${count} files to hash.`);
          return result.digest("hex");
        } else {
          writeDelegate(`No matches found for glob`);
          return "";
        }
      });
    }
    exports.hashFiles = hashFiles;
  }
});

// node_modules/@actions/glob/lib/glob.js
var require_glob = __commonJS({
  "node_modules/@actions/glob/lib/glob.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashFiles = exports.create = void 0;
    var internal_globber_1 = require_internal_globber();
    var internal_hash_files_1 = require_internal_hash_files();
    function create2(patterns, options) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield internal_globber_1.DefaultGlobber.create(patterns, options);
      });
    }
    exports.create = create2;
    function hashFiles(patterns, options, verbose = false) {
      return __awaiter(this, void 0, void 0, function* () {
        let followSymbolicLinks = true;
        if (options && typeof options.followSymbolicLinks === "boolean") {
          followSymbolicLinks = options.followSymbolicLinks;
        }
        const globber = yield create2(patterns, { followSymbolicLinks });
        return internal_hash_files_1.hashFiles(globber, verbose);
      });
    }
    exports.hashFiles = hashFiles;
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module2) {
    (function(module3, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require("buffer").Buffer;
        }
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "node_modules/inherits/inherits.js"(exports, module2) {
    try {
      util = require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// node_modules/safer-buffer/safer.js
var require_safer = __commonJS({
  "node_modules/safer-buffer/safer.js"(exports, module2) {
    "use strict";
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    var safer = {};
    var key;
    for (key in buffer) {
      if (!buffer.hasOwnProperty(key))
        continue;
      if (key === "SlowBuffer" || key === "Buffer")
        continue;
      safer[key] = buffer[key];
    }
    var Safer = safer.Buffer = {};
    for (key in Buffer2) {
      if (!Buffer2.hasOwnProperty(key))
        continue;
      if (key === "allocUnsafe" || key === "allocUnsafeSlow")
        continue;
      Safer[key] = Buffer2[key];
    }
    safer.Buffer.prototype = Buffer2.prototype;
    if (!Safer.from || Safer.from === Uint8Array.from) {
      Safer.from = function(value, encodingOrOffset, length) {
        if (typeof value === "number") {
          throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
        }
        if (value && typeof value.length === "undefined") {
          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
        }
        return Buffer2(value, encodingOrOffset, length);
      };
    }
    if (!Safer.alloc) {
      Safer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
        var buf = Buffer2(size);
        if (!fill || fill.length === 0) {
          buf.fill(0);
        } else if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
        return buf;
      };
    }
    if (!safer.kStringMaxLength) {
      try {
        safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
      } catch (e) {
      }
    }
    if (!safer.constants) {
      safer.constants = {
        MAX_LENGTH: safer.kMaxLength
      };
      if (safer.kStringMaxLength) {
        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
      }
    }
    module2.exports = safer;
  }
});

// node_modules/asn1.js/lib/asn1/base/reporter.js
var require_reporter = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/reporter.js"(exports) {
    "use strict";
    var inherits = require_inherits();
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports.Reporter = Reporter;
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    Reporter.prototype.save = function save() {
      const state = this._reporterState;
      return { obj: state.obj, pathLen: state.path.length };
    };
    Reporter.prototype.restore = function restore(data) {
      const state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };
    Reporter.prototype.exitKey = function exitKey(index) {
      const state = this._reporterState;
      state.path = state.path.slice(0, index - 1);
    };
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      const state = this._reporterState;
      this.exitKey(index);
      if (state.obj !== null)
        state.obj[key] = value;
    };
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join("/");
    };
    Reporter.prototype.enterObject = function enterObject() {
      const state = this._reporterState;
      const prev = state.obj;
      state.obj = {};
      return prev;
    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      const state = this._reporterState;
      const now = state.obj;
      state.obj = prev;
      return now;
    };
    Reporter.prototype.error = function error2(msg) {
      let err;
      const state = this._reporterState;
      const inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function(elem) {
          return "[" + JSON.stringify(elem) + "]";
        }).join(""), msg.message || msg, msg.stack);
      }
      if (!state.options.partial)
        throw err;
      if (!inherited)
        state.errors.push(err);
      return err;
    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
      const state = this._reporterState;
      if (!state.options.partial)
        return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + " at: " + (this.path || "(shallow)");
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);
      if (!this.stack) {
        try {
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
  }
});

// node_modules/asn1.js/lib/asn1/base/buffer.js
var require_buffer = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/buffer.js"(exports) {
    "use strict";
    var inherits = require_inherits();
    var Reporter = require_reporter().Reporter;
    var Buffer2 = require_safer().Buffer;
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer2.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
      if (data instanceof DecoderBuffer) {
        return true;
      }
      const isCompatible = typeof data === "object" && Buffer2.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
      return isCompatible;
    };
    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      const res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || "DecoderBuffer overrun");
    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || "DecoderBuffer overrun");
      const res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!EncoderBuffer.isEncoderBuffer(item))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === "number") {
        if (!(0 <= value && value <= 255))
          return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
      } else if (typeof value === "string") {
        this.value = value;
        this.length = Buffer2.byteLength(value);
      } else if (Buffer2.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error("Unsupported type: " + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
      if (data instanceof EncoderBuffer) {
        return true;
      }
      const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
      return isCompatible;
    };
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = Buffer2.alloc(this.length);
      if (!offset)
        offset = 0;
      if (this.length === 0)
        return out;
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === "number")
          out[offset] = this.value;
        else if (typeof this.value === "string")
          out.write(this.value, offset);
        else if (Buffer2.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports, module2) {
    module2.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
  }
});

// node_modules/asn1.js/lib/asn1/base/node.js
var require_node = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/node.js"(exports, module2) {
    "use strict";
    var Reporter = require_reporter().Reporter;
    var EncoderBuffer = require_buffer().EncoderBuffer;
    var DecoderBuffer = require_buffer().DecoderBuffer;
    var assert = require_minimalistic_assert();
    var tags = [
      "seq",
      "seqof",
      "set",
      "setof",
      "objid",
      "bool",
      "gentime",
      "utctime",
      "null_",
      "enum",
      "int",
      "objDesc",
      "bitstr",
      "bmpstr",
      "charstr",
      "genstr",
      "graphstr",
      "ia5str",
      "iso646str",
      "numstr",
      "octstr",
      "printstr",
      "t61str",
      "unistr",
      "utf8str",
      "videostr"
    ];
    var methods = [
      "key",
      "obj",
      "use",
      "optional",
      "explicit",
      "implicit",
      "def",
      "choice",
      "any",
      "contains"
    ].concat(tags);
    var overrided = [
      "_peekTag",
      "_decodeTag",
      "_use",
      "_decodeStr",
      "_decodeObjid",
      "_decodeTime",
      "_decodeNull",
      "_decodeInt",
      "_decodeBool",
      "_decodeList",
      "_encodeComposite",
      "_encodeStr",
      "_encodeObjid",
      "_encodeTime",
      "_encodeNull",
      "_encodeInt",
      "_encodeBool"
    ];
    function Node(enc, parent, name) {
      const state = {};
      this._baseState = state;
      state.name = name;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null;
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state["default"] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module2.exports = Node;
    var stateProps = [
      "enc",
      "parent",
      "children",
      "tag",
      "args",
      "reverseArgs",
      "choice",
      "optional",
      "any",
      "obj",
      "use",
      "alteredUse",
      "key",
      "default",
      "explicit",
      "implicit",
      "contains"
    ];
    Node.prototype.clone = function clone() {
      const state = this._baseState;
      const cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      const res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    Node.prototype._wrap = function wrap() {
      const state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          const clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    Node.prototype._init = function init(body) {
      const state = this._baseState;
      assert(state.parent === null);
      body.call(this);
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, "Root node can have only one child");
    };
    Node.prototype._useArgs = function useArgs(args) {
      const state = this._baseState;
      const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if (typeof arg !== "object" || arg.constructor !== Object)
            return arg;
          const res = {};
          Object.keys(arg).forEach(function(key) {
            if (key == (key | 0))
              key |= 0;
            const value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
      };
    });
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
      };
    });
    Node.prototype.use = function use(item) {
      assert(item);
      const state = this._baseState;
      assert(state.use === null);
      state.use = item;
      return this;
    };
    Node.prototype.optional = function optional() {
      const state = this._baseState;
      state.optional = true;
      return this;
    };
    Node.prototype.def = function def(val) {
      const state = this._baseState;
      assert(state["default"] === null);
      state["default"] = val;
      state.optional = true;
      return this;
    };
    Node.prototype.explicit = function explicit(num) {
      const state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
      return this;
    };
    Node.prototype.implicit = function implicit(num) {
      const state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
      return this;
    };
    Node.prototype.obj = function obj() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);
      state.obj = true;
      if (args.length !== 0)
        this._useArgs(args);
      return this;
    };
    Node.prototype.key = function key(newKey) {
      const state = this._baseState;
      assert(state.key === null);
      state.key = newKey;
      return this;
    };
    Node.prototype.any = function any() {
      const state = this._baseState;
      state.any = true;
      return this;
    };
    Node.prototype.choice = function choice(obj) {
      const state = this._baseState;
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
      }));
      return this;
    };
    Node.prototype.contains = function contains(item) {
      const state = this._baseState;
      assert(state.use === null);
      state.contains = item;
      return this;
    };
    Node.prototype._decode = function decode(input, options) {
      const state = this._baseState;
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));
      let result = state["default"];
      let present = true;
      let prevKey = null;
      if (state.key !== null)
        prevKey = input.enterKey(state.key);
      if (state.optional) {
        let tag = null;
        if (state.explicit !== null)
          tag = state.explicit;
        else if (state.implicit !== null)
          tag = state.implicit;
        else if (state.tag !== null)
          tag = state.tag;
        if (tag === null && !state.any) {
          const save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present))
            return present;
        }
      }
      let prevObj;
      if (state.obj && present)
        prevObj = input.enterObject();
      if (present) {
        if (state.explicit !== null) {
          const explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }
        const start = input.offset;
        if (state.use === null && state.choice === null) {
          let save;
          if (state.any)
            save = input.save();
          const body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body))
            return body;
          if (state.any)
            result = input.raw(save);
          else
            input = body;
        }
        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, "content");
        if (state.any) {
        } else if (state.choice === null) {
          result = this._decodeGeneric(state.tag, input, options);
        } else {
          result = this._decodeChoice(input, options);
        }
        if (input.isError(result))
          return result;
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            child._decode(input, options);
          });
        }
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
          const data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      }
      if (state.obj && present)
        result = input.leaveObject(prevObj);
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);
      return result;
    };
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      const state = this._baseState;
      if (tag === "seq" || tag === "set")
        return null;
      if (tag === "seqof" || tag === "setof")
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === "objid" && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === "objid")
        return this._decodeObjid(input, null, null, options);
      else if (tag === "gentime" || tag === "utctime")
        return this._decodeTime(input, tag, options);
      else if (tag === "null_")
        return this._decodeNull(input, options);
      else if (tag === "bool")
        return this._decodeBool(input, options);
      else if (tag === "objDesc")
        return this._decodeStr(input, tag, options);
      else if (tag === "int" || tag === "enum")
        return this._decodeInt(input, state.args && state.args[0], options);
      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
      } else {
        return input.error("unknown tag: " + tag);
      }
    };
    Node.prototype._getUse = function _getUse(entity, obj) {
      const state = this._baseState;
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      const state = this._baseState;
      let result = null;
      let match = false;
      Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
          const value = node._decode(input, options);
          if (input.isError(value))
            return false;
          result = { type: key, value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
      if (!match)
        return input.error("Choice not matched");
      return result;
    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    Node.prototype._encode = function encode(data, reporter, parent) {
      const state = this._baseState;
      if (state["default"] !== null && state["default"] === data)
        return;
      const result = this._encodeValue(data, reporter, parent);
      if (result === void 0)
        return;
      if (this._skipDefault(result, reporter, parent))
        return;
      return result;
    };
    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      const state = this._baseState;
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter());
      let result = null;
      this.reporter = reporter;
      if (state.optional && data === void 0) {
        if (state["default"] !== null)
          data = state["default"];
        else
          return;
      }
      let content = null;
      let primitive = false;
      if (state.any) {
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child) {
          if (child._baseState.tag === "null_")
            return child._encode(null, reporter, data);
          if (child._baseState.key === null)
            return reporter.error("Child should have a key");
          const prevKey = reporter.enterKey(child._baseState.key);
          if (typeof data !== "object")
            return reporter.error("Child expected, but input is not object");
          const res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);
          return res;
        }, this).filter(function(child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === "seqof" || state.tag === "setof") {
          if (!(state.args && state.args.length === 1))
            return reporter.error("Too many args for : " + state.tag);
          if (!Array.isArray(data))
            return reporter.error("seqof/setof, but data is not Array");
          const child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            const state2 = this._baseState;
            return this._getUse(state2.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
      if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
          if (state.use === null)
            reporter.error("Tag could be omitted only for .use()");
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
      if (state.explicit !== null)
        result = this._encodeComposite(state.explicit, false, "context", result);
      return result;
    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      const state = this._baseState;
      const node = state.choice[data.type];
      if (!node) {
        assert(
          false,
          data.type + " not found in " + JSON.stringify(Object.keys(state.choice))
        );
      }
      return node._encode(data.value, reporter);
    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      const state = this._baseState;
      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === "objid" && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === "objid")
        return this._encodeObjid(data, null, null);
      else if (tag === "gentime" || tag === "utctime")
        return this._encodeTime(data, tag);
      else if (tag === "null_")
        return this._encodeNull();
      else if (tag === "int" || tag === "enum")
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === "bool")
        return this._encodeBool(data);
      else if (tag === "objDesc")
        return this._encodeStr(data, tag);
      else
        throw new Error("Unsupported tag: " + tag);
    };
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
    };
  }
});

// node_modules/asn1.js/lib/asn1/constants/der.js
var require_der = __commonJS({
  "node_modules/asn1.js/lib/asn1/constants/der.js"(exports) {
    "use strict";
    function reverse(map) {
      const res = {};
      Object.keys(map).forEach(function(key) {
        if ((key | 0) == key)
          key = key | 0;
        const value = map[key];
        res[value] = key;
      });
      return res;
    }
    exports.tagClass = {
      0: "universal",
      1: "application",
      2: "context",
      3: "private"
    };
    exports.tagClassByName = reverse(exports.tagClass);
    exports.tag = {
      0: "end",
      1: "bool",
      2: "int",
      3: "bitstr",
      4: "octstr",
      5: "null_",
      6: "objid",
      7: "objDesc",
      8: "external",
      9: "real",
      10: "enum",
      11: "embed",
      12: "utf8str",
      13: "relativeOid",
      16: "seq",
      17: "set",
      18: "numstr",
      19: "printstr",
      20: "t61str",
      21: "videostr",
      22: "ia5str",
      23: "utctime",
      24: "gentime",
      25: "graphstr",
      26: "iso646str",
      27: "genstr",
      28: "unistr",
      29: "charstr",
      30: "bmpstr"
    };
    exports.tagByName = reverse(exports.tag);
  }
});

// node_modules/asn1.js/lib/asn1/encoders/der.js
var require_der2 = __commonJS({
  "node_modules/asn1.js/lib/asn1/encoders/der.js"(exports, module2) {
    "use strict";
    var inherits = require_inherits();
    var Buffer2 = require_safer().Buffer;
    var Node = require_node();
    var der = require_der();
    function DEREncoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module2.exports = DEREncoder;
    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    function DERNode(parent) {
      Node.call(this, "der", parent);
    }
    inherits(DERNode, Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 128) {
        const header2 = Buffer2.alloc(2);
        header2[0] = encodedTag;
        header2[1] = content.length;
        return this._createEncoderBuffer([header2, content]);
      }
      let lenOctets = 1;
      for (let i = content.length; i >= 256; i >>= 8)
        lenOctets++;
      const header = Buffer2.alloc(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 128 | lenOctets;
      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 255;
      return this._createEncoderBuffer([header, content]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === "bitstr") {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === "bmpstr") {
        const buf = Buffer2.alloc(str.length * 2);
        for (let i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === "numstr") {
        if (!this._isNumstr(str)) {
          return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        }
        return this._createEncoderBuffer(str);
      } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) {
          return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === "objDesc") {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error("Encoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === "string") {
        if (!values)
          return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id))
          return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s.]+/g);
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      }
      if (!Array.isArray(id)) {
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
      }
      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
      let size = 0;
      for (let i = 0; i < id.length; i++) {
        let ident = id[i];
        for (size++; ident >= 128; ident >>= 7)
          size++;
      }
      const objid = Buffer2.alloc(size);
      let offset = objid.length - 1;
      for (let i = id.length - 1; i >= 0; i--) {
        let ident = id[i];
        objid[offset--] = ident & 127;
        while ((ident >>= 7) > 0)
          objid[offset--] = 128 | ident & 127;
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      if (num < 10)
        return "0" + num;
      else
        return num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      let str;
      const date = new Date(time);
      if (tag === "gentime") {
        str = [
          two(date.getUTCFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else if (tag === "utctime") {
        str = [
          two(date.getUTCFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else {
        this.reporter.error("Encoding " + tag + " time is not supported yet");
      }
      return this._encodeStr(str, "octstr");
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer("");
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === "string") {
        if (!values)
          return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        }
        num = values[num];
      }
      if (typeof num !== "number" && !Buffer2.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) {
          numArray.unshift(0);
        }
        num = Buffer2.from(numArray);
      }
      if (Buffer2.isBuffer(num)) {
        let size2 = num.length;
        if (num.length === 0)
          size2++;
        const out2 = Buffer2.alloc(size2);
        num.copy(out2);
        if (num.length === 0)
          out2[0] = 0;
        return this._createEncoderBuffer(out2);
      }
      if (num < 128)
        return this._createEncoderBuffer(num);
      if (num < 256)
        return this._createEncoderBuffer([0, num]);
      let size = 1;
      for (let i = num; i >= 256; i >>= 8)
        size++;
      const out = new Array(size);
      for (let i = out.length - 1; i >= 0; i--) {
        out[i] = num & 255;
        num >>= 8;
      }
      if (out[0] & 128) {
        out.unshift(0);
      }
      return this._createEncoderBuffer(Buffer2.from(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 255 : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getEncoder("der").tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      const state = this._baseState;
      let i;
      if (state["default"] === null)
        return false;
      const data = dataBuffer.join();
      if (state.defaultBuffer === void 0)
        state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
      if (data.length !== state.defaultBuffer.length)
        return false;
      for (i = 0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter) {
      let res;
      if (tag === "seqof")
        tag = "seq";
      else if (tag === "setof")
        tag = "set";
      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === "number" && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error("Unknown tag: " + tag);
      if (res >= 31)
        return reporter.error("Multi-octet tag encoding unsupported");
      if (!primitive)
        res |= 32;
      res |= der.tagClassByName[cls || "universal"] << 6;
      return res;
    }
  }
});

// node_modules/asn1.js/lib/asn1/encoders/pem.js
var require_pem = __commonJS({
  "node_modules/asn1.js/lib/asn1/encoders/pem.js"(exports, module2) {
    "use strict";
    var inherits = require_inherits();
    var DEREncoder = require_der2();
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMEncoder, DEREncoder);
    module2.exports = PEMEncoder;
    PEMEncoder.prototype.encode = function encode(data, options) {
      const buf = DEREncoder.prototype.encode.call(this, data);
      const p = buf.toString("base64");
      const out = ["-----BEGIN " + options.label + "-----"];
      for (let i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push("-----END " + options.label + "-----");
      return out.join("\n");
    };
  }
});

// node_modules/asn1.js/lib/asn1/encoders/index.js
var require_encoders = __commonJS({
  "node_modules/asn1.js/lib/asn1/encoders/index.js"(exports) {
    "use strict";
    var encoders = exports;
    encoders.der = require_der2();
    encoders.pem = require_pem();
  }
});

// node_modules/asn1.js/lib/asn1/decoders/der.js
var require_der3 = __commonJS({
  "node_modules/asn1.js/lib/asn1/decoders/der.js"(exports, module2) {
    "use strict";
    var inherits = require_inherits();
    var bignum = require_bn();
    var DecoderBuffer = require_buffer().DecoderBuffer;
    var Node = require_node();
    var der = require_der();
    function DERDecoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module2.exports = DERDecoder;
    DERDecoder.prototype.decode = function decode(data, options) {
      if (!DecoderBuffer.isDecoderBuffer(data)) {
        data = new DecoderBuffer(data, options);
      }
      return this.tree._decode(data, options);
    };
    function DERNode(parent) {
      Node.call(this, "der", parent);
    }
    inherits(DERNode, Node);
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty())
        return false;
      const state = buffer.save();
      const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;
      buffer.restore(state);
      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
    };
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      const decodedTag = derDecodeTag(
        buffer,
        'Failed to decode tag of "' + tag + '"'
      );
      if (buffer.isError(decodedTag))
        return decodedTag;
      let len = derDecodeLen(
        buffer,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"'
      );
      if (buffer.isError(len))
        return len;
      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }
      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
      const state = buffer.save();
      const res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"'
      );
      if (buffer.isError(res))
        return res;
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      for (; ; ) {
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag))
          return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len))
          return len;
        let res;
        if (tag.primitive || len !== null)
          res = buffer.skip(len);
        else
          res = this._skipUntilEnd(buffer, fail);
        if (buffer.isError(res))
          return res;
        if (tag.tagStr === "end")
          break;
      }
    };
    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
      const result = [];
      while (!buffer.isEmpty()) {
        const possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd))
          return possibleEnd;
        const res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === "bitstr") {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused))
          return unused;
        return { unused, data: buffer.raw() };
      } else if (tag === "bmpstr") {
        const raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error("Decoding of string type: bmpstr length mismatch");
        let str = "";
        for (let i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === "numstr") {
        const numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) {
          return buffer.error("Decoding of string type: numstr unsupported characters");
        }
        return numstr;
      } else if (tag === "octstr") {
        return buffer.raw();
      } else if (tag === "objDesc") {
        return buffer.raw();
      } else if (tag === "printstr") {
        const printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) {
          return buffer.error("Decoding of string type: printstr unsupported characters");
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error("Decoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      let result;
      const identifiers = [];
      let ident = 0;
      let subident = 0;
      while (!buffer.isEmpty()) {
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 128)
        identifiers.push(ident);
      const first = identifiers[0] / 40 | 0;
      const second = identifiers[0] % 40;
      if (relative)
        result = identifiers;
      else
        result = [first, second].concat(identifiers.slice(1));
      if (values) {
        let tmp = values[result.join(" ")];
        if (tmp === void 0)
          tmp = values[result.join(".")];
        if (tmp !== void 0)
          result = tmp;
      }
      return result;
    };
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      const str = buffer.raw().toString();
      let year;
      let mon;
      let day;
      let hour;
      let min;
      let sec;
      if (tag === "gentime") {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
      } else if (tag === "utctime") {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2e3 + year;
        else
          year = 1900 + year;
      } else {
        return buffer.error("Decoding " + tag + " time is not supported yet");
      }
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    DERNode.prototype._decodeNull = function decodeNull() {
      return null;
    };
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      const res = buffer.readUInt8();
      if (buffer.isError(res))
        return res;
      else
        return res !== 0;
    };
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      const raw = buffer.raw();
      let res = new bignum(raw);
      if (values)
        res = values[res.toString(10)] || res;
      return res;
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getDecoder("der").tree;
    };
    function derDecodeTag(buf, fail) {
      let tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;
      const cls = der.tagClass[tag >> 6];
      const primitive = (tag & 32) === 0;
      if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while ((oct & 128) === 128) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;
          tag <<= 7;
          tag |= oct & 127;
        }
      } else {
        tag &= 31;
      }
      const tagStr = der.tag[tag];
      return {
        cls,
        primitive,
        tag,
        tagStr
      };
    }
    function derDecodeLen(buf, primitive, fail) {
      let len = buf.readUInt8(fail);
      if (buf.isError(len))
        return len;
      if (!primitive && len === 128)
        return null;
      if ((len & 128) === 0) {
        return len;
      }
      const num = len & 127;
      if (num > 4)
        return buf.error("length octect is too long");
      len = 0;
      for (let i = 0; i < num; i++) {
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len |= j;
      }
      return len;
    }
  }
});

// node_modules/asn1.js/lib/asn1/decoders/pem.js
var require_pem2 = __commonJS({
  "node_modules/asn1.js/lib/asn1/decoders/pem.js"(exports, module2) {
    "use strict";
    var inherits = require_inherits();
    var Buffer2 = require_safer().Buffer;
    var DERDecoder = require_der3();
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMDecoder, DERDecoder);
    module2.exports = PEMDecoder;
    PEMDecoder.prototype.decode = function decode(data, options) {
      const lines = data.toString().split(/[\r\n]+/g);
      const label = options.label.toUpperCase();
      const re = /^-----(BEGIN|END) ([^-]+)-----$/;
      let start = -1;
      let end = -1;
      for (let i = 0; i < lines.length; i++) {
        const match = lines[i].match(re);
        if (match === null)
          continue;
        if (match[2] !== label)
          continue;
        if (start === -1) {
          if (match[1] !== "BEGIN")
            break;
          start = i;
        } else {
          if (match[1] !== "END")
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error("PEM section not found for: " + label);
      const base64 = lines.slice(start + 1, end).join("");
      base64.replace(/[^a-z0-9+/=]+/gi, "");
      const input = Buffer2.from(base64, "base64");
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  }
});

// node_modules/asn1.js/lib/asn1/decoders/index.js
var require_decoders = __commonJS({
  "node_modules/asn1.js/lib/asn1/decoders/index.js"(exports) {
    "use strict";
    var decoders = exports;
    decoders.der = require_der3();
    decoders.pem = require_pem2();
  }
});

// node_modules/asn1.js/lib/asn1/api.js
var require_api = __commonJS({
  "node_modules/asn1.js/lib/asn1/api.js"(exports) {
    "use strict";
    var encoders = require_encoders();
    var decoders = require_decoders();
    var inherits = require_inherits();
    var api = exports;
    api.define = function define(name, body) {
      return new Entity(name, body);
    };
    function Entity(name, body) {
      this.name = name;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }
    Entity.prototype._createNamed = function createNamed(Base) {
      const name = this.name;
      function Generated(entity) {
        this._initNamed(entity, name);
      }
      inherits(Generated, Base);
      Generated.prototype._initNamed = function _initNamed(entity, name2) {
        Base.call(this, entity, name2);
      };
      return new Generated(this);
    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || "der";
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(decoders[enc]);
      return this.decoders[enc];
    };
    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || "der";
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(encoders[enc]);
      return this.encoders[enc];
    };
    Entity.prototype.encode = function encode(data, enc, reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
  }
});

// node_modules/asn1.js/lib/asn1/base/index.js
var require_base = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/index.js"(exports) {
    "use strict";
    var base = exports;
    base.Reporter = require_reporter().Reporter;
    base.DecoderBuffer = require_buffer().DecoderBuffer;
    base.EncoderBuffer = require_buffer().EncoderBuffer;
    base.Node = require_node();
  }
});

// node_modules/asn1.js/lib/asn1/constants/index.js
var require_constants = __commonJS({
  "node_modules/asn1.js/lib/asn1/constants/index.js"(exports) {
    "use strict";
    var constants = exports;
    constants._reverse = function reverse(map) {
      const res = {};
      Object.keys(map).forEach(function(key) {
        if ((key | 0) == key)
          key = key | 0;
        const value = map[key];
        res[value] = key;
      });
      return res;
    };
    constants.der = require_der();
  }
});

// node_modules/asn1.js/lib/asn1.js
var require_asn1 = __commonJS({
  "node_modules/asn1.js/lib/asn1.js"(exports) {
    "use strict";
    var asn1 = exports;
    asn1.bignum = require_bn();
    asn1.define = require_api().define;
    asn1.base = require_base();
    asn1.constants = require_constants();
    asn1.decoders = require_decoders();
    asn1.encoders = require_encoders();
  }
});

// node_modules/openpgp/dist/node/openpgp.min.js
var require_openpgp_min = __commonJS({
  "node_modules/openpgp/dist/node/openpgp.min.js"(exports) {
    "use strict";
    var e = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
    Object.defineProperty(exports, "__esModule", { value: true });
    var t = require("buffer");
    var r = require("stream");
    var i = require("crypto");
    var n = require("zlib");
    var a = require("os");
    var s = require("util");
    var o = require_asn1();
    function c(e2) {
      return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
    }
    var u = /* @__PURE__ */ c(t);
    var h = /* @__PURE__ */ c(r);
    var f = /* @__PURE__ */ c(i);
    var d = /* @__PURE__ */ c(n);
    var l = /* @__PURE__ */ c(a);
    var p = /* @__PURE__ */ c(s);
    var y = /* @__PURE__ */ c(o);
    var b = Symbol("doneWritingPromise");
    var m = Symbol("doneWritingResolve");
    var g = Symbol("doneWritingReject");
    var w = Symbol("readingIndex");
    var v = class extends Array {
      constructor() {
        super(), this[b] = new Promise((e2, t2) => {
          this[m] = e2, this[g] = t2;
        }), this[b].catch(() => {
        });
      }
    };
    function _(e2) {
      return e2 && e2.getReader && Array.isArray(e2);
    }
    function k(e2) {
      if (!_(e2)) {
        const t2 = e2.getWriter(), r2 = t2.releaseLock;
        return t2.releaseLock = () => {
          t2.closed.catch(function() {
          }), r2.call(t2);
        }, t2;
      }
      this.stream = e2;
    }
    v.prototype.getReader = function() {
      return void 0 === this[w] && (this[w] = 0), { read: async () => (await this[b], this[w] === this.length ? { value: void 0, done: true } : { value: this[this[w]++], done: false }) };
    }, v.prototype.readToEnd = async function(e2) {
      await this[b];
      const t2 = e2(this.slice(this[w]));
      return this.length = 0, t2;
    }, v.prototype.clone = function() {
      const e2 = new v();
      return e2[b] = this[b].then(() => {
        e2.push(...this);
      }), e2;
    }, k.prototype.write = async function(e2) {
      this.stream.push(e2);
    }, k.prototype.close = async function() {
      this.stream[m]();
    }, k.prototype.abort = async function(e2) {
      return this.stream[g](e2), e2;
    }, k.prototype.releaseLock = function() {
    };
    var A = "object" == typeof e.process && "object" == typeof e.process.versions;
    var S = A && h.default.Readable;
    function E(t2) {
      return _(t2) ? "array" : e.ReadableStream && e.ReadableStream.prototype.isPrototypeOf(t2) ? "web" : z && z.prototype.isPrototypeOf(t2) ? "ponyfill" : S && S.prototype.isPrototypeOf(t2) ? "node" : !(!t2 || !t2.getReader) && "web-like";
    }
    function P(e2) {
      return Uint8Array.prototype.isPrototypeOf(e2);
    }
    function x(e2) {
      if (1 === e2.length)
        return e2[0];
      let t2 = 0;
      for (let r3 = 0; r3 < e2.length; r3++) {
        if (!P(e2[r3]))
          throw Error("concatUint8Array: Data must be in the form of a Uint8Array");
        t2 += e2[r3].length;
      }
      const r2 = new Uint8Array(t2);
      let i2 = 0;
      return e2.forEach(function(e3) {
        r2.set(e3, i2), i2 += e3.length;
      }), r2;
    }
    var M = A && u.default.Buffer;
    var C = A && h.default.Readable;
    var K;
    var D;
    if (C) {
      K = function(e3) {
        let t2 = false;
        return new z({ start(r2) {
          e3.pause(), e3.on("data", (i2) => {
            t2 || (M.isBuffer(i2) && (i2 = new Uint8Array(i2.buffer, i2.byteOffset, i2.byteLength)), r2.enqueue(i2), e3.pause());
          }), e3.on("end", () => {
            t2 || r2.close();
          }), e3.on("error", (e4) => r2.error(e4));
        }, pull() {
          e3.resume();
        }, cancel(r2) {
          t2 = true, e3.destroy(r2);
        } });
      };
      class e2 extends C {
        constructor(e3, t2) {
          super(t2), this._reader = H(e3);
        }
        async _read(e3) {
          try {
            for (; ; ) {
              const { done: e4, value: t2 } = await this._reader.read();
              if (e4) {
                this.push(null);
                break;
              }
              if (!this.push(t2) || this._cancelling) {
                this._reading = false;
                break;
              }
            }
          } catch (e4) {
            this.emit("error", e4);
          }
        }
        _destroy(e3) {
          this._reader.cancel(e3);
        }
      }
      D = function(t2, r2) {
        return new e2(t2, r2);
      };
    }
    var R = /* @__PURE__ */ new WeakSet();
    var U = Symbol("externalBuffer");
    function I(e2) {
      if (this.stream = e2, e2[U] && (this[U] = e2[U].slice()), _(e2)) {
        const t3 = e2.getReader();
        return this._read = t3.read.bind(t3), this._releaseLock = () => {
        }, void (this._cancel = () => {
        });
      }
      let t2 = E(e2);
      if ("node" === t2 && (e2 = K(e2)), t2) {
        const t3 = e2.getReader();
        return this._read = t3.read.bind(t3), this._releaseLock = () => {
          t3.closed.catch(function() {
          }), t3.releaseLock();
        }, void (this._cancel = t3.cancel.bind(t3));
      }
      let r2 = false;
      this._read = async () => r2 || R.has(e2) ? { value: void 0, done: true } : (r2 = true, { value: e2, done: false }), this._releaseLock = () => {
        if (r2)
          try {
            R.add(e2);
          } catch (e3) {
          }
      };
    }
    I.prototype.read = async function() {
      if (this[U] && this[U].length) {
        return { done: false, value: this[U].shift() };
      }
      return this._read();
    }, I.prototype.releaseLock = function() {
      this[U] && (this.stream[U] = this[U]), this._releaseLock();
    }, I.prototype.cancel = function(e2) {
      return this._cancel(e2);
    }, I.prototype.readLine = async function() {
      let e2, t2 = [];
      for (; !e2; ) {
        let { done: r2, value: i2 } = await this.read();
        if (i2 += "", r2)
          return t2.length ? W(t2) : void 0;
        const n2 = i2.indexOf("\n") + 1;
        n2 && (e2 = W(t2.concat(i2.substr(0, n2))), t2 = []), n2 !== i2.length && t2.push(i2.substr(n2));
      }
      return this.unshift(...t2), e2;
    }, I.prototype.readByte = async function() {
      const { done: e2, value: t2 } = await this.read();
      if (e2)
        return;
      const r2 = t2[0];
      return this.unshift(re(t2, 1)), r2;
    }, I.prototype.readBytes = async function(e2) {
      const t2 = [];
      let r2 = 0;
      for (; ; ) {
        const { done: i2, value: n2 } = await this.read();
        if (i2)
          return t2.length ? W(t2) : void 0;
        if (t2.push(n2), r2 += n2.length, r2 >= e2) {
          const r3 = W(t2);
          return this.unshift(re(r3, e2)), re(r3, 0, e2);
        }
      }
    }, I.prototype.peekBytes = async function(e2) {
      const t2 = await this.readBytes(e2);
      return this.unshift(t2), t2;
    }, I.prototype.unshift = function(...e2) {
      this[U] || (this[U] = []), 1 === e2.length && P(e2[0]) && this[U].length && e2[0].length && this[U][0].byteOffset >= e2[0].length ? this[U][0] = new Uint8Array(this[U][0].buffer, this[U][0].byteOffset - e2[0].length, this[U][0].byteLength + e2[0].length) : this[U].unshift(...e2.filter((e3) => e3 && e3.length));
    }, I.prototype.readToEnd = async function(e2 = W) {
      const t2 = [];
      for (; ; ) {
        const { done: e3, value: r2 } = await this.read();
        if (e3)
          break;
        t2.push(r2);
      }
      return e2(t2);
    };
    var B;
    var T;
    var { ReadableStream: z, WritableStream: q, TransformStream: O } = e;
    async function F() {
      if (O)
        return;
      const [t2, r2] = await Promise.all([Promise.resolve().then(function() {
        return hd;
      }), Promise.resolve().then(function() {
        return Dd;
      })]);
      ({ ReadableStream: z, WritableStream: q, TransformStream: O } = t2);
      const { createReadableStreamWrapper: i2 } = r2;
      e.ReadableStream && z !== e.ReadableStream && (B = i2(z), T = i2(e.ReadableStream));
    }
    var N = A && u.default.Buffer;
    function j(e2) {
      let t2 = E(e2);
      return "node" === t2 ? K(e2) : "web" === t2 && B ? B(e2) : t2 ? e2 : new z({ start(t3) {
        t3.enqueue(e2), t3.close();
      } });
    }
    function L(e2) {
      if (E(e2))
        return e2;
      const t2 = new v();
      return (async () => {
        const r2 = G(t2);
        await r2.write(e2), await r2.close();
      })(), t2;
    }
    function W(e2) {
      return e2.some((e3) => E(e3) && !_(e3)) ? function(e3) {
        e3 = e3.map(j);
        const t2 = Z(async function(e4) {
          await Promise.all(i2.map((t3) => ne(t3, e4)));
        });
        let r2 = Promise.resolve();
        const i2 = e3.map((i3, n2) => X(i3, (i4, a2) => (r2 = r2.then(() => V(i4, t2.writable, { preventClose: n2 !== e3.length - 1 })), r2)));
        return t2.readable;
      }(e2) : e2.some((e3) => _(e3)) ? function(e3) {
        const t2 = new v();
        let r2 = Promise.resolve();
        return e3.forEach((i2, n2) => (r2 = r2.then(() => V(i2, t2, { preventClose: n2 !== e3.length - 1 })), r2)), t2;
      }(e2) : "string" == typeof e2[0] ? e2.join("") : N && N.isBuffer(e2[0]) ? N.concat(e2) : x(e2);
    }
    function H(e2) {
      return new I(e2);
    }
    function G(e2) {
      return new k(e2);
    }
    async function V(e2, t2, { preventClose: r2 = false, preventAbort: i2 = false, preventCancel: n2 = false } = {}) {
      if (E(e2) && !_(e2)) {
        e2 = j(e2);
        try {
          if (e2[U]) {
            const r3 = G(t2);
            for (let t3 = 0; t3 < e2[U].length; t3++)
              await r3.ready, await r3.write(e2[U][t3]);
            r3.releaseLock();
          }
          await e2.pipeTo(t2, { preventClose: r2, preventAbort: i2, preventCancel: n2 });
        } catch (e3) {
        }
        return;
      }
      const a2 = H(e2 = L(e2)), s2 = G(t2);
      try {
        for (; ; ) {
          await s2.ready;
          const { done: e3, value: t3 } = await a2.read();
          if (e3) {
            r2 || await s2.close();
            break;
          }
          await s2.write(t3);
        }
      } catch (e3) {
        i2 || await s2.abort(e3);
      } finally {
        a2.releaseLock(), s2.releaseLock();
      }
    }
    function $(e2, t2) {
      const r2 = new O(t2);
      return V(e2, r2.writable), r2.readable;
    }
    function Z(e2) {
      let t2, r2, i2 = false;
      return { readable: new z({ start(e3) {
        r2 = e3;
      }, pull() {
        t2 ? t2() : i2 = true;
      }, cancel: e2 }, { highWaterMark: 0 }), writable: new q({ write: async function(e3) {
        r2.enqueue(e3), i2 ? i2 = false : (await new Promise((e4) => {
          t2 = e4;
        }), t2 = null);
      }, close: r2.close.bind(r2), abort: r2.error.bind(r2) }) };
    }
    function Y(e2, t2 = () => {
    }, r2 = () => {
    }) {
      if (_(e2)) {
        const i3 = new v();
        return (async () => {
          const n3 = G(i3);
          try {
            const i4 = await ie(e2), a2 = t2(i4), s2 = r2();
            let o2;
            o2 = void 0 !== a2 && void 0 !== s2 ? W([a2, s2]) : void 0 !== a2 ? a2 : s2, await n3.write(o2), await n3.close();
          } catch (e3) {
            await n3.abort(e3);
          }
        })(), i3;
      }
      if (E(e2))
        return $(e2, { async transform(e3, r3) {
          try {
            const i3 = await t2(e3);
            void 0 !== i3 && r3.enqueue(i3);
          } catch (e4) {
            r3.error(e4);
          }
        }, async flush(e3) {
          try {
            const t3 = await r2();
            void 0 !== t3 && e3.enqueue(t3);
          } catch (t3) {
            e3.error(t3);
          }
        } });
      const i2 = t2(e2), n2 = r2();
      return void 0 !== i2 && void 0 !== n2 ? W([i2, n2]) : void 0 !== i2 ? i2 : n2;
    }
    function X(e2, t2) {
      if (E(e2) && !_(e2)) {
        let r3;
        const i2 = new O({ start(e3) {
          r3 = e3;
        } }), n2 = V(e2, i2.writable), a2 = Z(async function(e3) {
          r3.error(e3), await n2, await new Promise(setTimeout);
        });
        return t2(i2.readable, a2.writable), a2.readable;
      }
      e2 = L(e2);
      const r2 = new v();
      return t2(e2, r2), r2;
    }
    function Q(e2, t2) {
      let r2;
      const i2 = X(e2, (e3, n2) => {
        const a2 = H(e3);
        a2.remainder = () => (a2.releaseLock(), V(e3, n2), i2), r2 = t2(a2);
      });
      return r2;
    }
    function J(e2) {
      if (_(e2))
        return e2.clone();
      if (E(e2)) {
        const t2 = function(e3) {
          if (_(e3))
            throw Error("ArrayStream cannot be tee()d, use clone() instead");
          if (E(e3)) {
            const t3 = j(e3).tee();
            return t3[0][U] = t3[1][U] = e3[U], t3;
          }
          return [re(e3), re(e3)];
        }(e2);
        return te(e2, t2[0]), t2[1];
      }
      return re(e2);
    }
    function ee(e2) {
      return _(e2) ? J(e2) : E(e2) ? new z({ start(t2) {
        const r2 = X(e2, async (e3, r3) => {
          const i2 = H(e3), n2 = G(r3);
          try {
            for (; ; ) {
              await n2.ready;
              const { done: e4, value: r4 } = await i2.read();
              if (e4) {
                try {
                  t2.close();
                } catch (e5) {
                }
                return void await n2.close();
              }
              try {
                t2.enqueue(r4);
              } catch (e5) {
              }
              await n2.write(r4);
            }
          } catch (e4) {
            t2.error(e4), await n2.abort(e4);
          }
        });
        te(e2, r2);
      } }) : re(e2);
    }
    function te(e2, t2) {
      Object.entries(Object.getOwnPropertyDescriptors(e2.constructor.prototype)).forEach(([r2, i2]) => {
        "constructor" !== r2 && (i2.value ? i2.value = i2.value.bind(t2) : i2.get = i2.get.bind(t2), Object.defineProperty(e2, r2, i2));
      });
    }
    function re(e2, t2 = 0, r2 = 1 / 0) {
      if (_(e2))
        throw Error("Not implemented");
      if (E(e2)) {
        if (t2 >= 0 && r2 >= 0) {
          let i2 = 0;
          return $(e2, { transform(e3, n2) {
            i2 < r2 ? (i2 + e3.length >= t2 && n2.enqueue(re(e3, Math.max(t2 - i2, 0), r2 - i2)), i2 += e3.length) : n2.terminate();
          } });
        }
        if (t2 < 0 && (r2 < 0 || r2 === 1 / 0)) {
          let i2 = [];
          return Y(e2, (e3) => {
            e3.length >= -t2 ? i2 = [e3] : i2.push(e3);
          }, () => re(W(i2), t2, r2));
        }
        if (0 === t2 && r2 < 0) {
          let i2;
          return Y(e2, (e3) => {
            const n2 = i2 ? W([i2, e3]) : e3;
            if (n2.length >= -r2)
              return i2 = re(n2, r2), re(n2, t2, r2);
            i2 = n2;
          });
        }
        return console.warn(`stream.slice(input, ${t2}, ${r2}) not implemented efficiently.`), ae(async () => re(await ie(e2), t2, r2));
      }
      return e2[U] && (e2 = W(e2[U].concat([e2]))), !P(e2) || N && N.isBuffer(e2) ? e2.slice(t2, r2) : (r2 === 1 / 0 && (r2 = e2.length), e2.subarray(t2, r2));
    }
    async function ie(e2, t2 = W) {
      return _(e2) ? e2.readToEnd(t2) : E(e2) ? H(e2).readToEnd(t2) : e2;
    }
    async function ne(e2, t2) {
      if (E(e2)) {
        if (e2.cancel)
          return e2.cancel(t2);
        if (e2.destroy)
          return e2.destroy(t2), await new Promise(setTimeout), t2;
      }
    }
    function ae(e2) {
      const t2 = new v();
      return (async () => {
        const r2 = G(t2);
        try {
          await r2.write(await e2()), await r2.close();
        } catch (e3) {
          await r2.abort(e3);
        }
      })(), t2;
    }
    var se = class {
      constructor(e2) {
        if (void 0 === e2)
          throw Error("Invalid BigInteger input");
        if (e2 instanceof Uint8Array) {
          const t2 = e2, r2 = Array(t2.length);
          for (let e3 = 0; e3 < t2.length; e3++) {
            const i2 = t2[e3].toString(16);
            r2[e3] = t2[e3] <= 15 ? "0" + i2 : i2;
          }
          this.value = BigInt("0x0" + r2.join(""));
        } else
          this.value = BigInt(e2);
      }
      clone() {
        return new se(this.value);
      }
      iinc() {
        return this.value++, this;
      }
      inc() {
        return this.clone().iinc();
      }
      idec() {
        return this.value--, this;
      }
      dec() {
        return this.clone().idec();
      }
      iadd(e2) {
        return this.value += e2.value, this;
      }
      add(e2) {
        return this.clone().iadd(e2);
      }
      isub(e2) {
        return this.value -= e2.value, this;
      }
      sub(e2) {
        return this.clone().isub(e2);
      }
      imul(e2) {
        return this.value *= e2.value, this;
      }
      mul(e2) {
        return this.clone().imul(e2);
      }
      imod(e2) {
        return this.value %= e2.value, this.isNegative() && this.iadd(e2), this;
      }
      mod(e2) {
        return this.clone().imod(e2);
      }
      modExp(e2, t2) {
        if (t2.isZero())
          throw Error("Modulo cannot be zero");
        if (t2.isOne())
          return new se(0);
        if (e2.isNegative())
          throw Error("Unsopported negative exponent");
        let r2 = e2.value, i2 = this.value;
        i2 %= t2.value;
        let n2 = BigInt(1);
        for (; r2 > BigInt(0); ) {
          const e3 = r2 & BigInt(1);
          r2 >>= BigInt(1);
          const a2 = n2 * i2 % t2.value;
          n2 = e3 ? a2 : n2, i2 = i2 * i2 % t2.value;
        }
        return new se(n2);
      }
      modInv(e2) {
        const { gcd: t2, x: r2 } = this._egcd(e2);
        if (!t2.isOne())
          throw Error("Inverse does not exist");
        return r2.add(e2).mod(e2);
      }
      _egcd(e2) {
        let t2 = BigInt(0), r2 = BigInt(1), i2 = BigInt(1), n2 = BigInt(0), a2 = this.value;
        for (e2 = e2.value; e2 !== BigInt(0); ) {
          const s2 = a2 / e2;
          let o2 = t2;
          t2 = i2 - s2 * t2, i2 = o2, o2 = r2, r2 = n2 - s2 * r2, n2 = o2, o2 = e2, e2 = a2 % e2, a2 = o2;
        }
        return { x: new se(i2), y: new se(n2), gcd: new se(a2) };
      }
      gcd(e2) {
        let t2 = this.value;
        for (e2 = e2.value; e2 !== BigInt(0); ) {
          const r2 = e2;
          e2 = t2 % e2, t2 = r2;
        }
        return new se(t2);
      }
      ileftShift(e2) {
        return this.value <<= e2.value, this;
      }
      leftShift(e2) {
        return this.clone().ileftShift(e2);
      }
      irightShift(e2) {
        return this.value >>= e2.value, this;
      }
      rightShift(e2) {
        return this.clone().irightShift(e2);
      }
      equal(e2) {
        return this.value === e2.value;
      }
      lt(e2) {
        return this.value < e2.value;
      }
      lte(e2) {
        return this.value <= e2.value;
      }
      gt(e2) {
        return this.value > e2.value;
      }
      gte(e2) {
        return this.value >= e2.value;
      }
      isZero() {
        return this.value === BigInt(0);
      }
      isOne() {
        return this.value === BigInt(1);
      }
      isNegative() {
        return this.value < BigInt(0);
      }
      isEven() {
        return !(this.value & BigInt(1));
      }
      abs() {
        const e2 = this.clone();
        return this.isNegative() && (e2.value = -e2.value), e2;
      }
      toString() {
        return this.value.toString();
      }
      toNumber() {
        const e2 = Number(this.value);
        if (e2 > Number.MAX_SAFE_INTEGER)
          throw Error("Number can only safely store up to 53 bits");
        return e2;
      }
      getBit(e2) {
        return (this.value >> BigInt(e2) & BigInt(1)) === BigInt(0) ? 0 : 1;
      }
      bitLength() {
        const e2 = new se(0), t2 = new se(1), r2 = new se(-1), i2 = this.isNegative() ? r2 : e2;
        let n2 = 1;
        const a2 = this.clone();
        for (; !a2.irightShift(t2).equal(i2); )
          n2++;
        return n2;
      }
      byteLength() {
        const e2 = new se(0), t2 = new se(-1), r2 = this.isNegative() ? t2 : e2, i2 = new se(8);
        let n2 = 1;
        const a2 = this.clone();
        for (; !a2.irightShift(i2).equal(r2); )
          n2++;
        return n2;
      }
      toUint8Array(e2 = "be", t2) {
        let r2 = this.value.toString(16);
        r2.length % 2 == 1 && (r2 = "0" + r2);
        const i2 = r2.length / 2, n2 = new Uint8Array(t2 || i2), a2 = t2 ? t2 - i2 : 0;
        let s2 = 0;
        for (; s2 < i2; )
          n2[s2 + a2] = parseInt(r2.slice(2 * s2, 2 * s2 + 2), 16), s2++;
        return "be" !== e2 && n2.reverse(), n2;
      }
    };
    var oe = (() => {
      try {
        return "development" === process.env.NODE_ENV;
      } catch (e2) {
      }
      return false;
    })();
    var ce = { isString: function(e2) {
      return "string" == typeof e2 || String.prototype.isPrototypeOf(e2);
    }, isArray: function(e2) {
      return Array.prototype.isPrototypeOf(e2);
    }, isUint8Array: P, isStream: E, readNumber: function(e2) {
      let t2 = 0;
      for (let r2 = 0; r2 < e2.length; r2++)
        t2 += 256 ** r2 * e2[e2.length - 1 - r2];
      return t2;
    }, writeNumber: function(e2, t2) {
      const r2 = new Uint8Array(t2);
      for (let i2 = 0; i2 < t2; i2++)
        r2[i2] = e2 >> 8 * (t2 - i2 - 1) & 255;
      return r2;
    }, readDate: function(e2) {
      const t2 = ce.readNumber(e2);
      return new Date(1e3 * t2);
    }, writeDate: function(e2) {
      const t2 = Math.floor(e2.getTime() / 1e3);
      return ce.writeNumber(t2, 4);
    }, normalizeDate: function(e2 = Date.now()) {
      return null === e2 || e2 === 1 / 0 ? e2 : new Date(1e3 * Math.floor(+e2 / 1e3));
    }, readMPI: function(e2) {
      const t2 = (e2[0] << 8 | e2[1]) + 7 >>> 3;
      return e2.subarray(2, 2 + t2);
    }, leftPad(e2, t2) {
      const r2 = new Uint8Array(t2), i2 = t2 - e2.length;
      return r2.set(e2, i2), r2;
    }, uint8ArrayToMPI: function(e2) {
      const t2 = ce.uint8ArrayBitLength(e2);
      if (0 === t2)
        throw Error("Zero MPI");
      const r2 = e2.subarray(e2.length - Math.ceil(t2 / 8)), i2 = new Uint8Array([(65280 & t2) >> 8, 255 & t2]);
      return ce.concatUint8Array([i2, r2]);
    }, uint8ArrayBitLength: function(e2) {
      let t2;
      for (t2 = 0; t2 < e2.length && 0 === e2[t2]; t2++)
        ;
      if (t2 === e2.length)
        return 0;
      const r2 = e2.subarray(t2);
      return 8 * (r2.length - 1) + ce.nbits(r2[0]);
    }, hexToUint8Array: function(e2) {
      const t2 = new Uint8Array(e2.length >> 1);
      for (let r2 = 0; r2 < e2.length >> 1; r2++)
        t2[r2] = parseInt(e2.substr(r2 << 1, 2), 16);
      return t2;
    }, uint8ArrayToHex: function(e2) {
      const t2 = [], r2 = e2.length;
      let i2, n2 = 0;
      for (; n2 < r2; ) {
        for (i2 = e2[n2++].toString(16); i2.length < 2; )
          i2 = "0" + i2;
        t2.push("" + i2);
      }
      return t2.join("");
    }, stringToUint8Array: function(e2) {
      return Y(e2, (e3) => {
        if (!ce.isString(e3))
          throw Error("stringToUint8Array: Data must be in the form of a string");
        const t2 = new Uint8Array(e3.length);
        for (let r2 = 0; r2 < e3.length; r2++)
          t2[r2] = e3.charCodeAt(r2);
        return t2;
      });
    }, uint8ArrayToString: function(e2) {
      const t2 = [], r2 = 16384, i2 = (e2 = new Uint8Array(e2)).length;
      for (let n2 = 0; n2 < i2; n2 += r2)
        t2.push(String.fromCharCode.apply(String, e2.subarray(n2, n2 + r2 < i2 ? n2 + r2 : i2)));
      return t2.join("");
    }, encodeUTF8: function(e2) {
      const t2 = new TextEncoder("utf-8");
      function r2(e3, r3 = false) {
        return t2.encode(e3, { stream: !r3 });
      }
      return Y(e2, r2, () => r2("", true));
    }, decodeUTF8: function(e2) {
      const t2 = new TextDecoder("utf-8");
      function r2(e3, r3 = false) {
        return t2.decode(e3, { stream: !r3 });
      }
      return Y(e2, r2, () => r2(new Uint8Array(), true));
    }, concat: W, concatUint8Array: x, equalsUint8Array: function(e2, t2) {
      if (!ce.isUint8Array(e2) || !ce.isUint8Array(t2))
        throw Error("Data must be in the form of a Uint8Array");
      if (e2.length !== t2.length)
        return false;
      for (let r2 = 0; r2 < e2.length; r2++)
        if (e2[r2] !== t2[r2])
          return false;
      return true;
    }, writeChecksum: function(e2) {
      let t2 = 0;
      for (let r2 = 0; r2 < e2.length; r2++)
        t2 = t2 + e2[r2] & 65535;
      return ce.writeNumber(t2, 2);
    }, printDebug: function(e2) {
      oe && console.log("[OpenPGP.js debug]", e2);
    }, printDebugError: function(e2) {
      oe && console.error("[OpenPGP.js debug]", e2);
    }, nbits: function(e2) {
      let t2 = 1, r2 = e2 >>> 16;
      return 0 !== r2 && (e2 = r2, t2 += 16), r2 = e2 >> 8, 0 !== r2 && (e2 = r2, t2 += 8), r2 = e2 >> 4, 0 !== r2 && (e2 = r2, t2 += 4), r2 = e2 >> 2, 0 !== r2 && (e2 = r2, t2 += 2), r2 = e2 >> 1, 0 !== r2 && (e2 = r2, t2 += 1), t2;
    }, double: function(e2) {
      const t2 = new Uint8Array(e2.length), r2 = e2.length - 1;
      for (let i2 = 0; i2 < r2; i2++)
        t2[i2] = e2[i2] << 1 ^ e2[i2 + 1] >> 7;
      return t2[r2] = e2[r2] << 1 ^ 135 * (e2[0] >> 7), t2;
    }, shiftRight: function(e2, t2) {
      if (t2)
        for (let r2 = e2.length - 1; r2 >= 0; r2--)
          e2[r2] >>= t2, r2 > 0 && (e2[r2] |= e2[r2 - 1] << 8 - t2);
      return e2;
    }, getWebCrypto: function() {
      return void 0 !== e && e.crypto && e.crypto.subtle;
    }, detectBigInt: () => "undefined" != typeof BigInt, getBigInteger: async function() {
      if (ce.detectBigInt())
        return se;
      {
        const { default: e2 } = await Promise.resolve().then(function() {
          return Td;
        });
        return e2;
      }
    }, getNodeCrypto: function() {
      return f.default;
    }, getNodeZlib: function() {
      return d.default;
    }, getNodeBuffer: function() {
      return (u.default || {}).Buffer;
    }, getHardwareConcurrency: function() {
      if ("undefined" != typeof navigator)
        return navigator.hardwareConcurrency || 1;
      return l.default.cpus().length;
    }, isEmailAddress: function(e2) {
      if (!ce.isString(e2))
        return false;
      return /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+([a-zA-Z]{2,}|xn--[a-zA-Z\-0-9]+)))$/.test(e2);
    }, canonicalizeEOL: function(e2) {
      let t2 = false;
      return Y(e2, (e3) => {
        let r2;
        t2 && (e3 = ce.concatUint8Array([new Uint8Array([13]), e3])), 13 === e3[e3.length - 1] ? (t2 = true, e3 = e3.subarray(0, -1)) : t2 = false;
        const i2 = [];
        for (let t3 = 0; r2 = e3.indexOf(10, t3) + 1, r2; t3 = r2)
          13 !== e3[r2 - 2] && i2.push(r2);
        if (!i2.length)
          return e3;
        const n2 = new Uint8Array(e3.length + i2.length);
        let a2 = 0;
        for (let t3 = 0; t3 < i2.length; t3++) {
          const r3 = e3.subarray(i2[t3 - 1] || 0, i2[t3]);
          n2.set(r3, a2), a2 += r3.length, n2[a2 - 1] = 13, n2[a2] = 10, a2++;
        }
        return n2.set(e3.subarray(i2[i2.length - 1] || 0), a2), n2;
      }, () => t2 ? new Uint8Array([13]) : void 0);
    }, nativeEOL: function(e2) {
      let t2 = false;
      return Y(e2, (e3) => {
        let r2;
        13 === (e3 = t2 && 10 !== e3[0] ? ce.concatUint8Array([new Uint8Array([13]), e3]) : new Uint8Array(e3))[e3.length - 1] ? (t2 = true, e3 = e3.subarray(0, -1)) : t2 = false;
        let i2 = 0;
        for (let t3 = 0; t3 !== e3.length; t3 = r2) {
          r2 = e3.indexOf(13, t3) + 1, r2 || (r2 = e3.length);
          const n2 = r2 - (10 === e3[r2] ? 1 : 0);
          t3 && e3.copyWithin(i2, t3, n2), i2 += n2 - t3;
        }
        return e3.subarray(0, i2);
      }, () => t2 ? new Uint8Array([13]) : void 0);
    }, removeTrailingSpaces: function(e2) {
      return e2.split("\n").map((e3) => {
        let t2 = e3.length - 1;
        for (; t2 >= 0 && (" " === e3[t2] || "	" === e3[t2] || "\r" === e3[t2]); t2--)
          ;
        return e3.substr(0, t2 + 1);
      }).join("\n");
    }, wrapError: function(e2, t2) {
      if (!t2)
        return Error(e2);
      try {
        t2.message = e2 + ": " + t2.message;
      } catch (e3) {
      }
      return t2;
    }, constructAllowedPackets: function(e2) {
      const t2 = {};
      return e2.forEach((e3) => {
        if (!e3.tag)
          throw Error("Invalid input: expected a packet class");
        t2[e3.tag] = e3;
      }), t2;
    }, anyPromise: function(e2) {
      return new Promise(async (t2, r2) => {
        let i2;
        await Promise.all(e2.map(async (e3) => {
          try {
            t2(await e3);
          } catch (e4) {
            i2 = e4;
          }
        })), r2(i2);
      });
    }, selectUint8Array: function(e2, t2, r2) {
      const i2 = Math.max(t2.length, r2.length), n2 = new Uint8Array(i2);
      let a2 = 0;
      for (let i3 = 0; i3 < n2.length; i3++)
        n2[i3] = t2[i3] & 256 - e2 | r2[i3] & 255 + e2, a2 += e2 & i3 < t2.length | 1 - e2 & i3 < r2.length;
      return n2.subarray(0, a2);
    }, selectUint8: function(e2, t2, r2) {
      return t2 & 256 - e2 | r2 & 255 + e2;
    } };
    var ue = ce.getNodeBuffer();
    var he;
    var fe;
    function de(e2) {
      let t2 = new Uint8Array();
      return Y(e2, (e3) => {
        t2 = ce.concatUint8Array([t2, e3]);
        const r2 = [], i2 = Math.floor(t2.length / 45), n2 = 45 * i2, a2 = he(t2.subarray(0, n2));
        for (let e4 = 0; e4 < i2; e4++)
          r2.push(a2.substr(60 * e4, 60)), r2.push("\n");
        return t2 = t2.subarray(n2), r2.join("");
      }, () => t2.length ? he(t2) + "\n" : "");
    }
    function le(e2) {
      let t2 = "";
      return Y(e2, (e3) => {
        t2 += e3;
        let r2 = 0;
        const i2 = [" ", "	", "\r", "\n"];
        for (let e4 = 0; e4 < i2.length; e4++) {
          const n3 = i2[e4];
          for (let e5 = t2.indexOf(n3); -1 !== e5; e5 = t2.indexOf(n3, e5 + 1))
            r2++;
        }
        let n2 = t2.length;
        for (; n2 > 0 && (n2 - r2) % 4 != 0; n2--)
          i2.includes(t2[n2]) && r2--;
        const a2 = fe(t2.substr(0, n2));
        return t2 = t2.substr(n2), a2;
      }, () => fe(t2));
    }
    function pe(e2) {
      return le(e2.replace(/-/g, "+").replace(/_/g, "/"));
    }
    function ye(e2, t2) {
      let r2 = de(e2).replace(/[\r\n]/g, "");
      return t2 && (r2 = r2.replace(/[+]/g, "-").replace(/[/]/g, "_").replace(/[=]/g, "")), r2;
    }
    ue ? (he = (e2) => ue.from(e2).toString("base64"), fe = (e2) => {
      const t2 = ue.from(e2, "base64");
      return new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength);
    }) : (he = (e2) => btoa(ce.uint8ArrayToString(e2)), fe = (e2) => ce.stringToUint8Array(atob(e2)));
    var be = Symbol("byValue");
    var me = { curve: { p256: "p256", "P-256": "p256", secp256r1: "p256", prime256v1: "p256", "1.2.840.10045.3.1.7": "p256", "2a8648ce3d030107": "p256", "2A8648CE3D030107": "p256", p384: "p384", "P-384": "p384", secp384r1: "p384", "1.3.132.0.34": "p384", "2b81040022": "p384", "2B81040022": "p384", p521: "p521", "P-521": "p521", secp521r1: "p521", "1.3.132.0.35": "p521", "2b81040023": "p521", "2B81040023": "p521", secp256k1: "secp256k1", "1.3.132.0.10": "secp256k1", "2b8104000a": "secp256k1", "2B8104000A": "secp256k1", ED25519: "ed25519", ed25519: "ed25519", Ed25519: "ed25519", "1.3.6.1.4.1.11591.15.1": "ed25519", "2b06010401da470f01": "ed25519", "2B06010401DA470F01": "ed25519", X25519: "curve25519", cv25519: "curve25519", curve25519: "curve25519", Curve25519: "curve25519", "1.3.6.1.4.1.3029.1.5.1": "curve25519", "2b060104019755010501": "curve25519", "2B060104019755010501": "curve25519", brainpoolP256r1: "brainpoolP256r1", "1.3.36.3.3.2.8.1.1.7": "brainpoolP256r1", "2b2403030208010107": "brainpoolP256r1", "2B2403030208010107": "brainpoolP256r1", brainpoolP384r1: "brainpoolP384r1", "1.3.36.3.3.2.8.1.1.11": "brainpoolP384r1", "2b240303020801010b": "brainpoolP384r1", "2B240303020801010B": "brainpoolP384r1", brainpoolP512r1: "brainpoolP512r1", "1.3.36.3.3.2.8.1.1.13": "brainpoolP512r1", "2b240303020801010d": "brainpoolP512r1", "2B240303020801010D": "brainpoolP512r1" }, s2k: { simple: 0, salted: 1, iterated: 3, gnu: 101 }, publicKey: { rsaEncryptSign: 1, rsaEncrypt: 2, rsaSign: 3, elgamal: 16, dsa: 17, ecdh: 18, ecdsa: 19, eddsa: 22, aedh: 23, aedsa: 24 }, symmetric: { plaintext: 0, idea: 1, tripledes: 2, cast5: 3, blowfish: 4, aes128: 7, aes192: 8, aes256: 9, twofish: 10 }, compression: { uncompressed: 0, zip: 1, zlib: 2, bzip2: 3 }, hash: { md5: 1, sha1: 2, ripemd: 3, sha256: 8, sha384: 9, sha512: 10, sha224: 11 }, webHash: { "SHA-1": 2, "SHA-256": 8, "SHA-384": 9, "SHA-512": 10 }, aead: { eax: 1, ocb: 2, experimentalGCM: 100 }, packet: { publicKeyEncryptedSessionKey: 1, signature: 2, symEncryptedSessionKey: 3, onePassSignature: 4, secretKey: 5, publicKey: 6, secretSubkey: 7, compressedData: 8, symmetricallyEncryptedData: 9, marker: 10, literalData: 11, trust: 12, userID: 13, publicSubkey: 14, userAttribute: 17, symEncryptedIntegrityProtectedData: 18, modificationDetectionCode: 19, aeadEncryptedData: 20 }, literal: { binary: 98, text: 116, utf8: 117, mime: 109 }, signature: { binary: 0, text: 1, standalone: 2, certGeneric: 16, certPersona: 17, certCasual: 18, certPositive: 19, certRevocation: 48, subkeyBinding: 24, keyBinding: 25, key: 31, keyRevocation: 32, subkeyRevocation: 40, timestamp: 64, thirdParty: 80 }, signatureSubpacket: { signatureCreationTime: 2, signatureExpirationTime: 3, exportableCertification: 4, trustSignature: 5, regularExpression: 6, revocable: 7, keyExpirationTime: 9, placeholderBackwardsCompatibility: 10, preferredSymmetricAlgorithms: 11, revocationKey: 12, issuer: 16, notationData: 20, preferredHashAlgorithms: 21, preferredCompressionAlgorithms: 22, keyServerPreferences: 23, preferredKeyServer: 24, primaryUserID: 25, policyURI: 26, keyFlags: 27, signersUserID: 28, reasonForRevocation: 29, features: 30, signatureTarget: 31, embeddedSignature: 32, issuerFingerprint: 33, preferredAEADAlgorithms: 34 }, keyFlags: { certifyKeys: 1, signData: 2, encryptCommunication: 4, encryptStorage: 8, splitPrivateKey: 16, authentication: 32, sharedPrivateKey: 128 }, armor: { multipartSection: 0, multipartLast: 1, signed: 2, message: 3, publicKey: 4, privateKey: 5, signature: 6 }, reasonForRevocation: { noReason: 0, keySuperseded: 1, keyCompromised: 2, keyRetired: 3, userIDInvalid: 32 }, features: { modificationDetection: 1, aead: 2, v5Keys: 4 }, write: function(e2, t2) {
      if ("number" == typeof t2 && (t2 = this.read(e2, t2)), void 0 !== e2[t2])
        return e2[t2];
      throw Error("Invalid enum value.");
    }, read: function(e2, t2) {
      if (e2[be] || (e2[be] = [], Object.entries(e2).forEach(([t3, r2]) => {
        e2[be][r2] = t3;
      })), void 0 !== e2[be][t2])
        return e2[be][t2];
      throw Error("Invalid enum value.");
    } };
    var ge = { preferredHashAlgorithm: me.hash.sha256, preferredSymmetricAlgorithm: me.symmetric.aes256, preferredCompressionAlgorithm: me.compression.uncompressed, deflateLevel: 6, aeadProtect: false, preferredAEADAlgorithm: me.aead.eax, aeadChunkSizeByte: 12, v5Keys: false, s2kIterationCountByte: 224, allowUnauthenticatedMessages: false, allowUnauthenticatedStream: false, checksumRequired: false, minRSABits: 2047, passwordCollisionCheck: false, revocationsExpire: false, allowInsecureDecryptionWithSigningKeys: false, allowInsecureVerificationWithReformattedKeys: false, constantTimePKCS1Decryption: false, constantTimePKCS1DecryptionSupportedSymmetricAlgorithms: /* @__PURE__ */ new Set([me.symmetric.aes128, me.symmetric.aes192, me.symmetric.aes256]), minBytesForWebCrypto: 1e3, ignoreUnsupportedPackets: true, ignoreMalformedPackets: false, showVersion: false, showComment: false, versionString: "OpenPGP.js 5.5.0", commentString: "https://openpgpjs.org", maxUserIDLength: 5120, knownNotations: ["preferred-email-encoding@pgp.com", "pka-address@gnupg.org"], useIndutnyElliptic: true, rejectHashAlgorithms: /* @__PURE__ */ new Set([me.hash.md5, me.hash.ripemd]), rejectMessageHashAlgorithms: /* @__PURE__ */ new Set([me.hash.md5, me.hash.ripemd, me.hash.sha1]), rejectPublicKeyAlgorithms: /* @__PURE__ */ new Set([me.publicKey.elgamal, me.publicKey.dsa]), rejectCurves: /* @__PURE__ */ new Set([me.curve.brainpoolP256r1, me.curve.brainpoolP384r1, me.curve.brainpoolP512r1, me.curve.secp256k1]) };
    function we(e2) {
      const t2 = e2.match(/^-----BEGIN PGP (MESSAGE, PART \d+\/\d+|MESSAGE, PART \d+|SIGNED MESSAGE|MESSAGE|PUBLIC KEY BLOCK|PRIVATE KEY BLOCK|SIGNATURE)-----$/m);
      if (!t2)
        throw Error("Unknown ASCII armor type");
      return /MESSAGE, PART \d+\/\d+/.test(t2[1]) ? me.armor.multipartSection : /MESSAGE, PART \d+/.test(t2[1]) ? me.armor.multipartLast : /SIGNED MESSAGE/.test(t2[1]) ? me.armor.signed : /MESSAGE/.test(t2[1]) ? me.armor.message : /PUBLIC KEY BLOCK/.test(t2[1]) ? me.armor.publicKey : /PRIVATE KEY BLOCK/.test(t2[1]) ? me.armor.privateKey : /SIGNATURE/.test(t2[1]) ? me.armor.signature : void 0;
    }
    function ve(e2, t2) {
      let r2 = "";
      return t2.showVersion && (r2 += "Version: " + t2.versionString + "\n"), t2.showComment && (r2 += "Comment: " + t2.commentString + "\n"), e2 && (r2 += "Comment: " + e2 + "\n"), r2 += "\n", r2;
    }
    function _e(e2) {
      return de(function(e3) {
        let t2 = 13501623;
        return Y(e3, (e4) => {
          const r2 = Ae ? Math.floor(e4.length / 4) : 0, i2 = new Uint32Array(e4.buffer, e4.byteOffset, r2);
          for (let e5 = 0; e5 < r2; e5++)
            t2 ^= i2[e5], t2 = ke[0][t2 >> 24 & 255] ^ ke[1][t2 >> 16 & 255] ^ ke[2][t2 >> 8 & 255] ^ ke[3][t2 >> 0 & 255];
          for (let i3 = 4 * r2; i3 < e4.length; i3++)
            t2 = t2 >> 8 ^ ke[0][255 & t2 ^ e4[i3]];
        }, () => new Uint8Array([t2, t2 >> 8, t2 >> 16]));
      }(e2));
    }
    var ke = [Array(255), Array(255), Array(255), Array(255)];
    for (let e2 = 0; e2 <= 255; e2++) {
      let t2 = e2 << 16;
      for (let e3 = 0; e3 < 8; e3++)
        t2 = t2 << 1 ^ (0 != (8388608 & t2) ? 8801531 : 0);
      ke[0][e2] = (16711680 & t2) >> 16 | 65280 & t2 | (255 & t2) << 16;
    }
    for (let e2 = 0; e2 <= 255; e2++)
      ke[1][e2] = ke[0][e2] >> 8 ^ ke[0][255 & ke[0][e2]];
    for (let e2 = 0; e2 <= 255; e2++)
      ke[2][e2] = ke[1][e2] >> 8 ^ ke[0][255 & ke[1][e2]];
    for (let e2 = 0; e2 <= 255; e2++)
      ke[3][e2] = ke[2][e2] >> 8 ^ ke[0][255 & ke[2][e2]];
    var Ae = function() {
      const e2 = new ArrayBuffer(2);
      return new DataView(e2).setInt16(0, 255, true), 255 === new Int16Array(e2)[0];
    }();
    function Se(e2) {
      for (let t2 = 0; t2 < e2.length; t2++)
        /^([^\s:]|[^\s:][^:]*[^\s:]): .+$/.test(e2[t2]) || ce.printDebugError(Error("Improperly formatted armor header: " + e2[t2])), /^(Version|Comment|MessageID|Hash|Charset): .+$/.test(e2[t2]) || ce.printDebugError(Error("Unknown header: " + e2[t2]));
    }
    function Ee(e2) {
      let t2 = e2, r2 = "";
      const i2 = e2.lastIndexOf("=");
      return i2 >= 0 && i2 !== e2.length - 1 && (t2 = e2.slice(0, i2), r2 = e2.slice(i2 + 1).substr(0, 4)), { body: t2, checksum: r2 };
    }
    function Pe(e2, t2 = ge) {
      return new Promise(async (r2, i2) => {
        try {
          const n2 = /^-----[^-]+-----$/m, a2 = /^[ \f\r\t\u00a0\u2000-\u200a\u202f\u205f\u3000]*$/;
          let s2;
          const o2 = [];
          let c2, u2, h2, f2 = o2, d2 = [], l2 = le(X(e2, async (e3, t3) => {
            const p2 = H(e3);
            try {
              for (; ; ) {
                let e4 = await p2.readLine();
                if (void 0 === e4)
                  throw Error("Misformed armored text");
                if (e4 = ce.removeTrailingSpaces(e4.replace(/[\r\n]/g, "")), s2)
                  if (c2)
                    u2 || 2 !== s2 || (n2.test(e4) ? (d2 = d2.join("\r\n"), u2 = true, Se(f2), f2 = [], c2 = false) : d2.push(e4.replace(/^- /, "")));
                  else if (n2.test(e4) && i2(Error("Mandatory blank line missing between armor headers and armor data")), a2.test(e4)) {
                    if (Se(f2), c2 = true, u2 || 2 !== s2) {
                      r2({ text: d2, data: l2, headers: o2, type: s2 });
                      break;
                    }
                  } else
                    f2.push(e4);
                else
                  n2.test(e4) && (s2 = we(e4));
              }
            } catch (e4) {
              return void i2(e4);
            }
            const y2 = G(t3);
            try {
              for (; ; ) {
                await y2.ready;
                const { done: e4, value: t4 } = await p2.read();
                if (e4)
                  throw Error("Misformed armored text");
                const r3 = t4 + "";
                if (-1 !== r3.indexOf("=") || -1 !== r3.indexOf("-")) {
                  let e5 = await p2.readToEnd();
                  e5.length || (e5 = ""), e5 = r3 + e5, e5 = ce.removeTrailingSpaces(e5.replace(/\r/g, ""));
                  const t5 = e5.split(n2);
                  if (1 === t5.length)
                    throw Error("Misformed armored text");
                  const i3 = Ee(t5[0].slice(0, -1));
                  h2 = i3.checksum, await y2.write(i3.body);
                  break;
                }
                await y2.write(r3);
              }
              await y2.ready, await y2.close();
            } catch (e4) {
              await y2.abort(e4);
            }
          }));
          l2 = X(l2, async (e3, r3) => {
            const i3 = ie(_e(ee(e3)));
            i3.catch(() => {
            }), await V(e3, r3, { preventClose: true });
            const n3 = G(r3);
            try {
              const e4 = (await i3).replace("\n", "");
              if (h2 !== e4 && (h2 || t2.checksumRequired))
                throw Error("Ascii armor integrity check failed");
              await n3.ready, await n3.close();
            } catch (e4) {
              await n3.abort(e4);
            }
          });
        } catch (e3) {
          i2(e3);
        }
      }).then(async (e3) => (_(e3.data) && (e3.data = await ie(e3.data)), e3));
    }
    function xe(e2, t2, r2, i2, n2, a2 = ge) {
      let s2, o2;
      e2 === me.armor.signed && (s2 = t2.text, o2 = t2.hash, t2 = t2.data);
      const c2 = ee(t2), u2 = [];
      switch (e2) {
        case me.armor.multipartSection:
          u2.push("-----BEGIN PGP MESSAGE, PART " + r2 + "/" + i2 + "-----\n"), u2.push(ve(n2, a2)), u2.push(de(t2)), u2.push("=", _e(c2)), u2.push("-----END PGP MESSAGE, PART " + r2 + "/" + i2 + "-----\n");
          break;
        case me.armor.multipartLast:
          u2.push("-----BEGIN PGP MESSAGE, PART " + r2 + "-----\n"), u2.push(ve(n2, a2)), u2.push(de(t2)), u2.push("=", _e(c2)), u2.push("-----END PGP MESSAGE, PART " + r2 + "-----\n");
          break;
        case me.armor.signed:
          u2.push("-----BEGIN PGP SIGNED MESSAGE-----\n"), u2.push("Hash: " + o2 + "\n\n"), u2.push(s2.replace(/^-/gm, "- -")), u2.push("\n-----BEGIN PGP SIGNATURE-----\n"), u2.push(ve(n2, a2)), u2.push(de(t2)), u2.push("=", _e(c2)), u2.push("-----END PGP SIGNATURE-----\n");
          break;
        case me.armor.message:
          u2.push("-----BEGIN PGP MESSAGE-----\n"), u2.push(ve(n2, a2)), u2.push(de(t2)), u2.push("=", _e(c2)), u2.push("-----END PGP MESSAGE-----\n");
          break;
        case me.armor.publicKey:
          u2.push("-----BEGIN PGP PUBLIC KEY BLOCK-----\n"), u2.push(ve(n2, a2)), u2.push(de(t2)), u2.push("=", _e(c2)), u2.push("-----END PGP PUBLIC KEY BLOCK-----\n");
          break;
        case me.armor.privateKey:
          u2.push("-----BEGIN PGP PRIVATE KEY BLOCK-----\n"), u2.push(ve(n2, a2)), u2.push(de(t2)), u2.push("=", _e(c2)), u2.push("-----END PGP PRIVATE KEY BLOCK-----\n");
          break;
        case me.armor.signature:
          u2.push("-----BEGIN PGP SIGNATURE-----\n"), u2.push(ve(n2, a2)), u2.push(de(t2)), u2.push("=", _e(c2)), u2.push("-----END PGP SIGNATURE-----\n");
      }
      return ce.concat(u2);
    }
    var Me = class {
      constructor() {
        this.bytes = "";
      }
      read(e2) {
        this.bytes = ce.uint8ArrayToString(e2.subarray(0, 8));
      }
      write() {
        return ce.stringToUint8Array(this.bytes);
      }
      toHex() {
        return ce.uint8ArrayToHex(ce.stringToUint8Array(this.bytes));
      }
      equals(e2, t2 = false) {
        return t2 && (e2.isWildcard() || this.isWildcard()) || this.bytes === e2.bytes;
      }
      isNull() {
        return "" === this.bytes;
      }
      isWildcard() {
        return /^0+$/.test(this.toHex());
      }
      static mapToHex(e2) {
        return e2.toHex();
      }
      static fromID(e2) {
        const t2 = new Me();
        return t2.read(ce.hexToUint8Array(e2)), t2;
      }
      static wildcard() {
        const e2 = new Me();
        return e2.read(new Uint8Array(8)), e2;
      }
    };
    var Ce = function() {
      var e2, t2, r2 = false;
      function i2(r3, i3) {
        var n3 = e2[(t2[r3] + t2[i3]) % 255];
        return 0 !== r3 && 0 !== i3 || (n3 = 0), n3;
      }
      var n2, a2, s2, o2, c2 = false;
      function u2() {
        function u3(r3) {
          var i3, n3, a3;
          for (n3 = a3 = function(r4) {
            var i4 = e2[255 - t2[r4]];
            return 0 === r4 && (i4 = 0), i4;
          }(r3), i3 = 0; i3 < 4; i3++)
            a3 ^= n3 = 255 & (n3 << 1 | n3 >>> 7);
          return a3 ^= 99;
        }
        r2 || function() {
          e2 = [], t2 = [];
          var i3, n3, a3 = 1;
          for (i3 = 0; i3 < 255; i3++)
            e2[i3] = a3, n3 = 128 & a3, a3 <<= 1, a3 &= 255, 128 === n3 && (a3 ^= 27), a3 ^= e2[i3], t2[e2[i3]] = i3;
          e2[255] = e2[0], t2[0] = 0, r2 = true;
        }(), n2 = [], a2 = [], s2 = [[], [], [], []], o2 = [[], [], [], []];
        for (var h3 = 0; h3 < 256; h3++) {
          var f2 = u3(h3);
          n2[h3] = f2, a2[f2] = h3, s2[0][h3] = i2(2, f2) << 24 | f2 << 16 | f2 << 8 | i2(3, f2), o2[0][f2] = i2(14, h3) << 24 | i2(9, h3) << 16 | i2(13, h3) << 8 | i2(11, h3);
          for (var d2 = 1; d2 < 4; d2++)
            s2[d2][h3] = s2[d2 - 1][h3] >>> 8 | s2[d2 - 1][h3] << 24, o2[d2][f2] = o2[d2 - 1][f2] >>> 8 | o2[d2 - 1][f2] << 24;
        }
        c2 = true;
      }
      var h2 = function(e3, t3) {
        c2 || u2();
        var r3 = new Uint32Array(t3);
        r3.set(n2, 512), r3.set(a2, 768);
        for (var i3 = 0; i3 < 4; i3++)
          r3.set(s2[i3], 4096 + 1024 * i3 >> 2), r3.set(o2[i3], 8192 + 1024 * i3 >> 2);
        var h3 = function(e4, t4, r4) {
          ;
          var i4 = 0, n3 = 0, a3 = 0, s3 = 0, o3 = 0, c3 = 0, u3 = 0, h4 = 0, f2 = 0, d2 = 0, l2 = 0, p2 = 0, y2 = 0, b2 = 0, m2 = 0, g2 = 0, w2 = 0, v2 = 0, _2 = 0, k2 = 0, A2 = 0;
          var S2 = new e4.Uint32Array(r4), E2 = new e4.Uint8Array(r4);
          function P2(e5, t5, r5, o4, c4, u4, h5, f3) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            o4 = o4 | 0;
            c4 = c4 | 0;
            u4 = u4 | 0;
            h5 = h5 | 0;
            f3 = f3 | 0;
            var d3 = 0, l3 = 0, p3 = 0, y3 = 0, b3 = 0, m3 = 0, g3 = 0, w3 = 0;
            d3 = r5 | 1024, l3 = r5 | 2048, p3 = r5 | 3072;
            c4 = c4 ^ S2[(e5 | 0) >> 2], u4 = u4 ^ S2[(e5 | 4) >> 2], h5 = h5 ^ S2[(e5 | 8) >> 2], f3 = f3 ^ S2[(e5 | 12) >> 2];
            for (w3 = 16; (w3 | 0) <= o4 << 4; w3 = w3 + 16 | 0) {
              y3 = S2[(r5 | c4 >> 22 & 1020) >> 2] ^ S2[(d3 | u4 >> 14 & 1020) >> 2] ^ S2[(l3 | h5 >> 6 & 1020) >> 2] ^ S2[(p3 | f3 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 0) >> 2], b3 = S2[(r5 | u4 >> 22 & 1020) >> 2] ^ S2[(d3 | h5 >> 14 & 1020) >> 2] ^ S2[(l3 | f3 >> 6 & 1020) >> 2] ^ S2[(p3 | c4 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 4) >> 2], m3 = S2[(r5 | h5 >> 22 & 1020) >> 2] ^ S2[(d3 | f3 >> 14 & 1020) >> 2] ^ S2[(l3 | c4 >> 6 & 1020) >> 2] ^ S2[(p3 | u4 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 8) >> 2], g3 = S2[(r5 | f3 >> 22 & 1020) >> 2] ^ S2[(d3 | c4 >> 14 & 1020) >> 2] ^ S2[(l3 | u4 >> 6 & 1020) >> 2] ^ S2[(p3 | h5 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 12) >> 2];
              c4 = y3, u4 = b3, h5 = m3, f3 = g3;
            }
            i4 = S2[(t5 | c4 >> 22 & 1020) >> 2] << 24 ^ S2[(t5 | u4 >> 14 & 1020) >> 2] << 16 ^ S2[(t5 | h5 >> 6 & 1020) >> 2] << 8 ^ S2[(t5 | f3 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 0) >> 2], n3 = S2[(t5 | u4 >> 22 & 1020) >> 2] << 24 ^ S2[(t5 | h5 >> 14 & 1020) >> 2] << 16 ^ S2[(t5 | f3 >> 6 & 1020) >> 2] << 8 ^ S2[(t5 | c4 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 4) >> 2], a3 = S2[(t5 | h5 >> 22 & 1020) >> 2] << 24 ^ S2[(t5 | f3 >> 14 & 1020) >> 2] << 16 ^ S2[(t5 | c4 >> 6 & 1020) >> 2] << 8 ^ S2[(t5 | u4 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 8) >> 2], s3 = S2[(t5 | f3 >> 22 & 1020) >> 2] << 24 ^ S2[(t5 | c4 >> 14 & 1020) >> 2] << 16 ^ S2[(t5 | u4 >> 6 & 1020) >> 2] << 8 ^ S2[(t5 | h5 << 2 & 1020) >> 2] ^ S2[(e5 | w3 | 12) >> 2];
          }
          function x2(e5, t5, r5, i5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            i5 = i5 | 0;
            P2(0, 2048, 4096, A2, e5, t5, r5, i5);
          }
          function M2(e5, t5, r5, i5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            i5 = i5 | 0;
            var a4 = 0;
            P2(1024, 3072, 8192, A2, e5, i5, r5, t5);
            a4 = n3, n3 = s3, s3 = a4;
          }
          function C2(e5, t5, r5, f3) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            f3 = f3 | 0;
            P2(0, 2048, 4096, A2, o3 ^ e5, c3 ^ t5, u3 ^ r5, h4 ^ f3);
            o3 = i4, c3 = n3, u3 = a3, h4 = s3;
          }
          function K2(e5, t5, r5, f3) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            f3 = f3 | 0;
            var d3 = 0;
            P2(1024, 3072, 8192, A2, e5, f3, r5, t5);
            d3 = n3, n3 = s3, s3 = d3;
            i4 = i4 ^ o3, n3 = n3 ^ c3, a3 = a3 ^ u3, s3 = s3 ^ h4;
            o3 = e5, c3 = t5, u3 = r5, h4 = f3;
          }
          function D2(e5, t5, r5, f3) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            f3 = f3 | 0;
            P2(0, 2048, 4096, A2, o3, c3, u3, h4);
            o3 = i4 = i4 ^ e5, c3 = n3 = n3 ^ t5, u3 = a3 = a3 ^ r5, h4 = s3 = s3 ^ f3;
          }
          function R2(e5, t5, r5, f3) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            f3 = f3 | 0;
            P2(0, 2048, 4096, A2, o3, c3, u3, h4);
            i4 = i4 ^ e5, n3 = n3 ^ t5, a3 = a3 ^ r5, s3 = s3 ^ f3;
            o3 = e5, c3 = t5, u3 = r5, h4 = f3;
          }
          function U2(e5, t5, r5, f3) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            f3 = f3 | 0;
            P2(0, 2048, 4096, A2, o3, c3, u3, h4);
            o3 = i4, c3 = n3, u3 = a3, h4 = s3;
            i4 = i4 ^ e5, n3 = n3 ^ t5, a3 = a3 ^ r5, s3 = s3 ^ f3;
          }
          function I2(e5, t5, r5, o4) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            o4 = o4 | 0;
            P2(0, 2048, 4096, A2, f2, d2, l2, p2);
            p2 = ~g2 & p2 | g2 & p2 + 1;
            l2 = ~m2 & l2 | m2 & l2 + ((p2 | 0) == 0);
            d2 = ~b2 & d2 | b2 & d2 + ((l2 | 0) == 0);
            f2 = ~y2 & f2 | y2 & f2 + ((d2 | 0) == 0);
            i4 = i4 ^ e5;
            n3 = n3 ^ t5;
            a3 = a3 ^ r5;
            s3 = s3 ^ o4;
          }
          function B2(e5, t5, r5, i5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            i5 = i5 | 0;
            var n4 = 0, a4 = 0, s4 = 0, f3 = 0, d3 = 0, l3 = 0, p3 = 0, y3 = 0, b3 = 0, m3 = 0;
            e5 = e5 ^ o3, t5 = t5 ^ c3, r5 = r5 ^ u3, i5 = i5 ^ h4;
            n4 = w2 | 0, a4 = v2 | 0, s4 = _2 | 0, f3 = k2 | 0;
            for (; (b3 | 0) < 128; b3 = b3 + 1 | 0) {
              if (n4 >>> 31) {
                d3 = d3 ^ e5, l3 = l3 ^ t5, p3 = p3 ^ r5, y3 = y3 ^ i5;
              }
              n4 = n4 << 1 | a4 >>> 31, a4 = a4 << 1 | s4 >>> 31, s4 = s4 << 1 | f3 >>> 31, f3 = f3 << 1;
              m3 = i5 & 1;
              i5 = i5 >>> 1 | r5 << 31, r5 = r5 >>> 1 | t5 << 31, t5 = t5 >>> 1 | e5 << 31, e5 = e5 >>> 1;
              if (m3)
                e5 = e5 ^ 3774873600;
            }
            o3 = d3, c3 = l3, u3 = p3, h4 = y3;
          }
          function T2(e5) {
            e5 = e5 | 0;
            A2 = e5;
          }
          function z2(e5, t5, r5, o4) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            o4 = o4 | 0;
            i4 = e5, n3 = t5, a3 = r5, s3 = o4;
          }
          function q2(e5, t5, r5, i5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            i5 = i5 | 0;
            o3 = e5, c3 = t5, u3 = r5, h4 = i5;
          }
          function O2(e5, t5, r5, i5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            i5 = i5 | 0;
            f2 = e5, d2 = t5, l2 = r5, p2 = i5;
          }
          function F2(e5, t5, r5, i5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            i5 = i5 | 0;
            y2 = e5, b2 = t5, m2 = r5, g2 = i5;
          }
          function N2(e5, t5, r5, i5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            i5 = i5 | 0;
            p2 = ~g2 & p2 | g2 & i5, l2 = ~m2 & l2 | m2 & r5, d2 = ~b2 & d2 | b2 & t5, f2 = ~y2 & f2 | y2 & e5;
          }
          function j2(e5) {
            e5 = e5 | 0;
            if (e5 & 15)
              return -1;
            E2[e5 | 0] = i4 >>> 24, E2[e5 | 1] = i4 >>> 16 & 255, E2[e5 | 2] = i4 >>> 8 & 255, E2[e5 | 3] = i4 & 255, E2[e5 | 4] = n3 >>> 24, E2[e5 | 5] = n3 >>> 16 & 255, E2[e5 | 6] = n3 >>> 8 & 255, E2[e5 | 7] = n3 & 255, E2[e5 | 8] = a3 >>> 24, E2[e5 | 9] = a3 >>> 16 & 255, E2[e5 | 10] = a3 >>> 8 & 255, E2[e5 | 11] = a3 & 255, E2[e5 | 12] = s3 >>> 24, E2[e5 | 13] = s3 >>> 16 & 255, E2[e5 | 14] = s3 >>> 8 & 255, E2[e5 | 15] = s3 & 255;
            return 16;
          }
          function L2(e5) {
            e5 = e5 | 0;
            if (e5 & 15)
              return -1;
            E2[e5 | 0] = o3 >>> 24, E2[e5 | 1] = o3 >>> 16 & 255, E2[e5 | 2] = o3 >>> 8 & 255, E2[e5 | 3] = o3 & 255, E2[e5 | 4] = c3 >>> 24, E2[e5 | 5] = c3 >>> 16 & 255, E2[e5 | 6] = c3 >>> 8 & 255, E2[e5 | 7] = c3 & 255, E2[e5 | 8] = u3 >>> 24, E2[e5 | 9] = u3 >>> 16 & 255, E2[e5 | 10] = u3 >>> 8 & 255, E2[e5 | 11] = u3 & 255, E2[e5 | 12] = h4 >>> 24, E2[e5 | 13] = h4 >>> 16 & 255, E2[e5 | 14] = h4 >>> 8 & 255, E2[e5 | 15] = h4 & 255;
            return 16;
          }
          function W2() {
            x2(0, 0, 0, 0);
            w2 = i4, v2 = n3, _2 = a3, k2 = s3;
          }
          function H2(e5, t5, r5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            var o4 = 0;
            if (t5 & 15)
              return -1;
            while ((r5 | 0) >= 16) {
              V2[e5 & 7](E2[t5 | 0] << 24 | E2[t5 | 1] << 16 | E2[t5 | 2] << 8 | E2[t5 | 3], E2[t5 | 4] << 24 | E2[t5 | 5] << 16 | E2[t5 | 6] << 8 | E2[t5 | 7], E2[t5 | 8] << 24 | E2[t5 | 9] << 16 | E2[t5 | 10] << 8 | E2[t5 | 11], E2[t5 | 12] << 24 | E2[t5 | 13] << 16 | E2[t5 | 14] << 8 | E2[t5 | 15]);
              E2[t5 | 0] = i4 >>> 24, E2[t5 | 1] = i4 >>> 16 & 255, E2[t5 | 2] = i4 >>> 8 & 255, E2[t5 | 3] = i4 & 255, E2[t5 | 4] = n3 >>> 24, E2[t5 | 5] = n3 >>> 16 & 255, E2[t5 | 6] = n3 >>> 8 & 255, E2[t5 | 7] = n3 & 255, E2[t5 | 8] = a3 >>> 24, E2[t5 | 9] = a3 >>> 16 & 255, E2[t5 | 10] = a3 >>> 8 & 255, E2[t5 | 11] = a3 & 255, E2[t5 | 12] = s3 >>> 24, E2[t5 | 13] = s3 >>> 16 & 255, E2[t5 | 14] = s3 >>> 8 & 255, E2[t5 | 15] = s3 & 255;
              o4 = o4 + 16 | 0, t5 = t5 + 16 | 0, r5 = r5 - 16 | 0;
            }
            return o4 | 0;
          }
          function G2(e5, t5, r5) {
            e5 = e5 | 0;
            t5 = t5 | 0;
            r5 = r5 | 0;
            var i5 = 0;
            if (t5 & 15)
              return -1;
            while ((r5 | 0) >= 16) {
              $2[e5 & 1](E2[t5 | 0] << 24 | E2[t5 | 1] << 16 | E2[t5 | 2] << 8 | E2[t5 | 3], E2[t5 | 4] << 24 | E2[t5 | 5] << 16 | E2[t5 | 6] << 8 | E2[t5 | 7], E2[t5 | 8] << 24 | E2[t5 | 9] << 16 | E2[t5 | 10] << 8 | E2[t5 | 11], E2[t5 | 12] << 24 | E2[t5 | 13] << 16 | E2[t5 | 14] << 8 | E2[t5 | 15]);
              i5 = i5 + 16 | 0, t5 = t5 + 16 | 0, r5 = r5 - 16 | 0;
            }
            return i5 | 0;
          }
          var V2 = [x2, M2, C2, K2, D2, R2, U2, I2];
          var $2 = [C2, B2];
          return { set_rounds: T2, set_state: z2, set_iv: q2, set_nonce: O2, set_mask: F2, set_counter: N2, get_state: j2, get_iv: L2, gcm_init: W2, cipher: H2, mac: G2 };
        }({ Uint8Array, Uint32Array }, e3, t3);
        return h3.set_key = function(e4, t4, i4, a3, s3, c3, u3, f2, d2) {
          var l2 = r3.subarray(0, 60), p2 = r3.subarray(256, 316);
          l2.set([t4, i4, a3, s3, c3, u3, f2, d2]);
          for (var y2 = e4, b2 = 1; y2 < 4 * e4 + 28; y2++) {
            var m2 = l2[y2 - 1];
            (y2 % e4 == 0 || 8 === e4 && y2 % e4 == 4) && (m2 = n2[m2 >>> 24] << 24 ^ n2[m2 >>> 16 & 255] << 16 ^ n2[m2 >>> 8 & 255] << 8 ^ n2[255 & m2]), y2 % e4 == 0 && (m2 = m2 << 8 ^ m2 >>> 24 ^ b2 << 24, b2 = b2 << 1 ^ (128 & b2 ? 27 : 0)), l2[y2] = l2[y2 - e4] ^ m2;
          }
          for (var g2 = 0; g2 < y2; g2 += 4)
            for (var w2 = 0; w2 < 4; w2++) {
              m2 = l2[y2 - (4 + g2) + (4 - w2) % 4];
              p2[g2 + w2] = g2 < 4 || g2 >= y2 - 4 ? m2 : o2[0][n2[m2 >>> 24]] ^ o2[1][n2[m2 >>> 16 & 255]] ^ o2[2][n2[m2 >>> 8 & 255]] ^ o2[3][n2[255 & m2]];
            }
          h3.set_rounds(e4 + 5);
        }, h3;
      };
      return h2.ENC = { ECB: 0, CBC: 2, CFB: 4, OFB: 6, CTR: 7 }, h2.DEC = { ECB: 1, CBC: 3, CFB: 5, OFB: 6, CTR: 7 }, h2.MAC = { CBC: 0, GCM: 1 }, h2.HEAP_DATA = 16384, h2;
    }();
    function Ke(e2) {
      return e2 instanceof Uint8Array;
    }
    function De(e2, t2) {
      const r2 = e2 ? e2.byteLength : t2 || 65536;
      if (4095 & r2 || r2 <= 0)
        throw Error("heap size must be a positive integer and a multiple of 4096");
      return e2 = e2 || new Uint8Array(new ArrayBuffer(r2));
    }
    function Re(e2, t2, r2, i2, n2) {
      const a2 = e2.length - t2, s2 = a2 < n2 ? a2 : n2;
      return e2.set(r2.subarray(i2, i2 + s2), t2), s2;
    }
    function Ue(...e2) {
      const t2 = e2.reduce((e3, t3) => e3 + t3.length, 0), r2 = new Uint8Array(t2);
      let i2 = 0;
      for (let t3 = 0; t3 < e2.length; t3++)
        r2.set(e2[t3], i2), i2 += e2[t3].length;
      return r2;
    }
    var Ie = class extends Error {
      constructor(...e2) {
        super(...e2);
      }
    };
    var Be = class extends Error {
      constructor(...e2) {
        super(...e2);
      }
    };
    var Te = class extends Error {
      constructor(...e2) {
        super(...e2);
      }
    };
    var ze = [];
    var qe = [];
    var Oe = class {
      constructor(e2, t2, r2 = true, i2, n2, a2) {
        this.pos = 0, this.len = 0, this.mode = i2, this.pos = 0, this.len = 0, this.key = e2, this.iv = t2, this.padding = r2, this.acquire_asm(n2, a2);
      }
      acquire_asm(e2, t2) {
        return void 0 !== this.heap && void 0 !== this.asm || (this.heap = e2 || ze.pop() || De().subarray(Ce.HEAP_DATA), this.asm = t2 || qe.pop() || new Ce(null, this.heap.buffer), this.reset(this.key, this.iv)), { heap: this.heap, asm: this.asm };
      }
      release_asm() {
        void 0 !== this.heap && void 0 !== this.asm && (ze.push(this.heap), qe.push(this.asm)), this.heap = void 0, this.asm = void 0;
      }
      reset(e2, t2) {
        const { asm: r2 } = this.acquire_asm(), i2 = e2.length;
        if (16 !== i2 && 24 !== i2 && 32 !== i2)
          throw new Be("illegal key size");
        const n2 = new DataView(e2.buffer, e2.byteOffset, e2.byteLength);
        if (r2.set_key(i2 >> 2, n2.getUint32(0), n2.getUint32(4), n2.getUint32(8), n2.getUint32(12), i2 > 16 ? n2.getUint32(16) : 0, i2 > 16 ? n2.getUint32(20) : 0, i2 > 24 ? n2.getUint32(24) : 0, i2 > 24 ? n2.getUint32(28) : 0), void 0 !== t2) {
          if (16 !== t2.length)
            throw new Be("illegal iv size");
          let e3 = new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
          r2.set_iv(e3.getUint32(0), e3.getUint32(4), e3.getUint32(8), e3.getUint32(12));
        } else
          r2.set_iv(0, 0, 0, 0);
      }
      AES_Encrypt_process(e2) {
        if (!Ke(e2))
          throw new TypeError("data isn't of expected type");
        let { heap: t2, asm: r2 } = this.acquire_asm(), i2 = Ce.ENC[this.mode], n2 = Ce.HEAP_DATA, a2 = this.pos, s2 = this.len, o2 = 0, c2 = e2.length || 0, u2 = 0, h2 = 0, f2 = new Uint8Array(s2 + c2 & -16);
        for (; c2 > 0; )
          h2 = Re(t2, a2 + s2, e2, o2, c2), s2 += h2, o2 += h2, c2 -= h2, h2 = r2.cipher(i2, n2 + a2, s2), h2 && f2.set(t2.subarray(a2, a2 + h2), u2), u2 += h2, h2 < s2 ? (a2 += h2, s2 -= h2) : (a2 = 0, s2 = 0);
        return this.pos = a2, this.len = s2, f2;
      }
      AES_Encrypt_finish() {
        let { heap: e2, asm: t2 } = this.acquire_asm(), r2 = Ce.ENC[this.mode], i2 = Ce.HEAP_DATA, n2 = this.pos, a2 = this.len, s2 = 16 - a2 % 16, o2 = a2;
        if (this.hasOwnProperty("padding")) {
          if (this.padding) {
            for (let t3 = 0; t3 < s2; ++t3)
              e2[n2 + a2 + t3] = s2;
            a2 += s2, o2 = a2;
          } else if (a2 % 16)
            throw new Be("data length must be a multiple of the block size");
        } else
          a2 += s2;
        const c2 = new Uint8Array(o2);
        return a2 && t2.cipher(r2, i2 + n2, a2), o2 && c2.set(e2.subarray(n2, n2 + o2)), this.pos = 0, this.len = 0, this.release_asm(), c2;
      }
      AES_Decrypt_process(e2) {
        if (!Ke(e2))
          throw new TypeError("data isn't of expected type");
        let { heap: t2, asm: r2 } = this.acquire_asm(), i2 = Ce.DEC[this.mode], n2 = Ce.HEAP_DATA, a2 = this.pos, s2 = this.len, o2 = 0, c2 = e2.length || 0, u2 = 0, h2 = s2 + c2 & -16, f2 = 0, d2 = 0;
        this.padding && (f2 = s2 + c2 - h2 || 16, h2 -= f2);
        const l2 = new Uint8Array(h2);
        for (; c2 > 0; )
          d2 = Re(t2, a2 + s2, e2, o2, c2), s2 += d2, o2 += d2, c2 -= d2, d2 = r2.cipher(i2, n2 + a2, s2 - (c2 ? 0 : f2)), d2 && l2.set(t2.subarray(a2, a2 + d2), u2), u2 += d2, d2 < s2 ? (a2 += d2, s2 -= d2) : (a2 = 0, s2 = 0);
        return this.pos = a2, this.len = s2, l2;
      }
      AES_Decrypt_finish() {
        let { heap: e2, asm: t2 } = this.acquire_asm(), r2 = Ce.DEC[this.mode], i2 = Ce.HEAP_DATA, n2 = this.pos, a2 = this.len, s2 = a2;
        if (a2 > 0) {
          if (a2 % 16) {
            if (this.hasOwnProperty("padding"))
              throw new Be("data length must be a multiple of the block size");
            a2 += 16 - a2 % 16;
          }
          if (t2.cipher(r2, i2 + n2, a2), this.hasOwnProperty("padding") && this.padding) {
            let t3 = e2[n2 + s2 - 1];
            if (t3 < 1 || t3 > 16 || t3 > s2)
              throw new Te("bad padding");
            let r3 = 0;
            for (let i3 = t3; i3 > 1; i3--)
              r3 |= t3 ^ e2[n2 + s2 - i3];
            if (r3)
              throw new Te("bad padding");
            s2 -= t3;
          }
        }
        const o2 = new Uint8Array(s2);
        return s2 > 0 && o2.set(e2.subarray(n2, n2 + s2)), this.pos = 0, this.len = 0, this.release_asm(), o2;
      }
    };
    var Fe = class {
      static encrypt(e2, t2, r2 = false) {
        return new Fe(t2, r2).encrypt(e2);
      }
      static decrypt(e2, t2, r2 = false) {
        return new Fe(t2, r2).decrypt(e2);
      }
      constructor(e2, t2 = false, r2) {
        this.aes = r2 || new Oe(e2, void 0, t2, "ECB");
      }
      encrypt(e2) {
        return Ue(this.aes.AES_Encrypt_process(e2), this.aes.AES_Encrypt_finish());
      }
      decrypt(e2) {
        return Ue(this.aes.AES_Decrypt_process(e2), this.aes.AES_Decrypt_finish());
      }
    };
    function Ne(e2) {
      const t2 = function(e3) {
        const t3 = new Fe(e3);
        this.encrypt = function(e4) {
          return t3.encrypt(e4);
        }, this.decrypt = function(e4) {
          return t3.decrypt(e4);
        };
      };
      return t2.blockSize = t2.prototype.blockSize = 16, t2.keySize = t2.prototype.keySize = e2 / 8, t2;
    }
    function je(e2, t2, r2, i2, n2, a2) {
      const s2 = [16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756], o2 = [-2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272, -2146402304, -2147483648, -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0, -2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0, 1081344, 32800, -2146402304, -2146435072, 32800, 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, -2146435072, -2147450880, 32, -2146402272, 1081376, 32, 32768, -2147483648, 32800, -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, 32800, -2147483648, -2146435040, -2146402272, 1081344], c2 = [520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584], u2 = [8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928], h2 = [256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080], f2 = [536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320, 536887312], d2 = [2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154], l2 = [268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696];
      let p2, y2, b2, m2, g2, w2, v2, _2, k2, A2, S2, E2, P2, x2, M2 = 0, C2 = t2.length;
      const K2 = 32 === e2.length ? 3 : 9;
      _2 = 3 === K2 ? r2 ? [0, 32, 2] : [30, -2, -2] : r2 ? [0, 32, 2, 62, 30, -2, 64, 96, 2] : [94, 62, -2, 32, 64, 2, 30, -2, -2], r2 && (C2 = (t2 = function(e3, t3) {
        const r3 = 8 - e3.length % 8;
        let i3;
        if (2 === t3 && r3 < 8)
          i3 = 32;
        else if (1 === t3)
          i3 = r3;
        else {
          if (t3 || !(r3 < 8)) {
            if (8 === r3)
              return e3;
            throw Error("des: invalid padding");
          }
          i3 = 0;
        }
        const n3 = new Uint8Array(e3.length + r3);
        for (let t4 = 0; t4 < e3.length; t4++)
          n3[t4] = e3[t4];
        for (let t4 = 0; t4 < r3; t4++)
          n3[e3.length + t4] = i3;
        return n3;
      }(t2, a2)).length);
      let D2 = new Uint8Array(C2), R2 = 0;
      for (1 === i2 && (k2 = n2[M2++] << 24 | n2[M2++] << 16 | n2[M2++] << 8 | n2[M2++], S2 = n2[M2++] << 24 | n2[M2++] << 16 | n2[M2++] << 8 | n2[M2++], M2 = 0); M2 < C2; ) {
        for (w2 = t2[M2++] << 24 | t2[M2++] << 16 | t2[M2++] << 8 | t2[M2++], v2 = t2[M2++] << 24 | t2[M2++] << 16 | t2[M2++] << 8 | t2[M2++], 1 === i2 && (r2 ? (w2 ^= k2, v2 ^= S2) : (A2 = k2, E2 = S2, k2 = w2, S2 = v2)), b2 = 252645135 & (w2 >>> 4 ^ v2), v2 ^= b2, w2 ^= b2 << 4, b2 = 65535 & (w2 >>> 16 ^ v2), v2 ^= b2, w2 ^= b2 << 16, b2 = 858993459 & (v2 >>> 2 ^ w2), w2 ^= b2, v2 ^= b2 << 2, b2 = 16711935 & (v2 >>> 8 ^ w2), w2 ^= b2, v2 ^= b2 << 8, b2 = 1431655765 & (w2 >>> 1 ^ v2), v2 ^= b2, w2 ^= b2 << 1, w2 = w2 << 1 | w2 >>> 31, v2 = v2 << 1 | v2 >>> 31, y2 = 0; y2 < K2; y2 += 3) {
          for (P2 = _2[y2 + 1], x2 = _2[y2 + 2], p2 = _2[y2]; p2 !== P2; p2 += x2)
            m2 = v2 ^ e2[p2], g2 = (v2 >>> 4 | v2 << 28) ^ e2[p2 + 1], b2 = w2, w2 = v2, v2 = b2 ^ (o2[m2 >>> 24 & 63] | u2[m2 >>> 16 & 63] | f2[m2 >>> 8 & 63] | l2[63 & m2] | s2[g2 >>> 24 & 63] | c2[g2 >>> 16 & 63] | h2[g2 >>> 8 & 63] | d2[63 & g2]);
          b2 = w2, w2 = v2, v2 = b2;
        }
        w2 = w2 >>> 1 | w2 << 31, v2 = v2 >>> 1 | v2 << 31, b2 = 1431655765 & (w2 >>> 1 ^ v2), v2 ^= b2, w2 ^= b2 << 1, b2 = 16711935 & (v2 >>> 8 ^ w2), w2 ^= b2, v2 ^= b2 << 8, b2 = 858993459 & (v2 >>> 2 ^ w2), w2 ^= b2, v2 ^= b2 << 2, b2 = 65535 & (w2 >>> 16 ^ v2), v2 ^= b2, w2 ^= b2 << 16, b2 = 252645135 & (w2 >>> 4 ^ v2), v2 ^= b2, w2 ^= b2 << 4, 1 === i2 && (r2 ? (k2 = w2, S2 = v2) : (w2 ^= A2, v2 ^= E2)), D2[R2++] = w2 >>> 24, D2[R2++] = w2 >>> 16 & 255, D2[R2++] = w2 >>> 8 & 255, D2[R2++] = 255 & w2, D2[R2++] = v2 >>> 24, D2[R2++] = v2 >>> 16 & 255, D2[R2++] = v2 >>> 8 & 255, D2[R2++] = 255 & v2;
      }
      return r2 || (D2 = function(e3, t3) {
        let r3, i3 = null;
        if (2 === t3)
          r3 = 32;
        else if (1 === t3)
          i3 = e3[e3.length - 1];
        else {
          if (t3)
            throw Error("des: invalid padding");
          r3 = 0;
        }
        if (!i3) {
          for (i3 = 1; e3[e3.length - i3] === r3; )
            i3++;
          i3--;
        }
        return e3.subarray(0, e3.length - i3);
      }(D2, a2)), D2;
    }
    function Le(e2) {
      const t2 = [0, 4, 536870912, 536870916, 65536, 65540, 536936448, 536936452, 512, 516, 536871424, 536871428, 66048, 66052, 536936960, 536936964], r2 = [0, 1, 1048576, 1048577, 67108864, 67108865, 68157440, 68157441, 256, 257, 1048832, 1048833, 67109120, 67109121, 68157696, 68157697], i2 = [0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272], n2 = [0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920, 136323072, 131072, 2228224, 134348800, 136445952, 139264, 2236416, 134356992, 136454144], a2 = [0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240, 4112, 266256, 4096, 266240, 4112, 266256], s2 = [0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456, 33554464, 33555488, 33554432, 33555456, 33554464, 33555488], o2 = [0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746, 0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746], c2 = [0, 65536, 2048, 67584, 536870912, 536936448, 536872960, 536938496, 131072, 196608, 133120, 198656, 537001984, 537067520, 537004032, 537069568], u2 = [0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432, 33816576, 33554432, 33816576, 33554434, 33816578, 33554434, 33816578], h2 = [0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464, 1024, 268436480, 1032, 268436488, 1024, 268436480, 1032, 268436488], f2 = [0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192, 8224, 8192, 8224, 1056768, 1056800, 1056768, 1056800], d2 = [0, 16777216, 512, 16777728, 2097152, 18874368, 2097664, 18874880, 67108864, 83886080, 67109376, 83886592, 69206016, 85983232, 69206528, 85983744], l2 = [0, 4096, 134217728, 134221824, 524288, 528384, 134742016, 134746112, 16, 4112, 134217744, 134221840, 524304, 528400, 134742032, 134746128], p2 = [0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257, 261], y2 = e2.length > 8 ? 3 : 1, b2 = Array(32 * y2), m2 = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];
      let g2, w2, v2, _2 = 0, k2 = 0;
      for (let A2 = 0; A2 < y2; A2++) {
        let y3 = e2[_2++] << 24 | e2[_2++] << 16 | e2[_2++] << 8 | e2[_2++], A3 = e2[_2++] << 24 | e2[_2++] << 16 | e2[_2++] << 8 | e2[_2++];
        v2 = 252645135 & (y3 >>> 4 ^ A3), A3 ^= v2, y3 ^= v2 << 4, v2 = 65535 & (A3 >>> -16 ^ y3), y3 ^= v2, A3 ^= v2 << -16, v2 = 858993459 & (y3 >>> 2 ^ A3), A3 ^= v2, y3 ^= v2 << 2, v2 = 65535 & (A3 >>> -16 ^ y3), y3 ^= v2, A3 ^= v2 << -16, v2 = 1431655765 & (y3 >>> 1 ^ A3), A3 ^= v2, y3 ^= v2 << 1, v2 = 16711935 & (A3 >>> 8 ^ y3), y3 ^= v2, A3 ^= v2 << 8, v2 = 1431655765 & (y3 >>> 1 ^ A3), A3 ^= v2, y3 ^= v2 << 1, v2 = y3 << 8 | A3 >>> 20 & 240, y3 = A3 << 24 | A3 << 8 & 16711680 | A3 >>> 8 & 65280 | A3 >>> 24 & 240, A3 = v2;
        for (let e3 = 0; e3 < 16; e3++)
          m2[e3] ? (y3 = y3 << 2 | y3 >>> 26, A3 = A3 << 2 | A3 >>> 26) : (y3 = y3 << 1 | y3 >>> 27, A3 = A3 << 1 | A3 >>> 27), y3 &= -15, A3 &= -15, g2 = t2[y3 >>> 28] | r2[y3 >>> 24 & 15] | i2[y3 >>> 20 & 15] | n2[y3 >>> 16 & 15] | a2[y3 >>> 12 & 15] | s2[y3 >>> 8 & 15] | o2[y3 >>> 4 & 15], w2 = c2[A3 >>> 28] | u2[A3 >>> 24 & 15] | h2[A3 >>> 20 & 15] | f2[A3 >>> 16 & 15] | d2[A3 >>> 12 & 15] | l2[A3 >>> 8 & 15] | p2[A3 >>> 4 & 15], v2 = 65535 & (w2 >>> 16 ^ g2), b2[k2++] = g2 ^ v2, b2[k2++] = w2 ^ v2 << 16;
      }
      return b2;
    }
    function We(e2) {
      this.key = [];
      for (let t2 = 0; t2 < 3; t2++)
        this.key.push(new Uint8Array(e2.subarray(8 * t2, 8 * t2 + 8)));
      this.encrypt = function(e3) {
        return je(Le(this.key[2]), je(Le(this.key[1]), je(Le(this.key[0]), e3, true, 0, null, null), false, 0, null, null), true, 0, null, null);
      };
    }
    function He() {
      this.BlockSize = 8, this.KeySize = 16, this.setKey = function(e3) {
        if (this.masking = Array(16), this.rotate = Array(16), this.reset(), e3.length !== this.KeySize)
          throw Error("CAST-128: keys must be 16 bytes");
        return this.keySchedule(e3), true;
      }, this.reset = function() {
        for (let e3 = 0; e3 < 16; e3++)
          this.masking[e3] = 0, this.rotate[e3] = 0;
      }, this.getBlockSize = function() {
        return this.BlockSize;
      }, this.encrypt = function(e3) {
        const t3 = Array(e3.length);
        for (let a3 = 0; a3 < e3.length; a3 += 8) {
          let s2, o2 = e3[a3] << 24 | e3[a3 + 1] << 16 | e3[a3 + 2] << 8 | e3[a3 + 3], c2 = e3[a3 + 4] << 24 | e3[a3 + 5] << 16 | e3[a3 + 6] << 8 | e3[a3 + 7];
          s2 = c2, c2 = o2 ^ r2(c2, this.masking[0], this.rotate[0]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[1], this.rotate[1]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[2], this.rotate[2]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[3], this.rotate[3]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[4], this.rotate[4]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[5], this.rotate[5]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[6], this.rotate[6]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[7], this.rotate[7]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[8], this.rotate[8]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[9], this.rotate[9]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[10], this.rotate[10]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[11], this.rotate[11]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[12], this.rotate[12]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[13], this.rotate[13]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[14], this.rotate[14]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[15], this.rotate[15]), o2 = s2, t3[a3] = c2 >>> 24 & 255, t3[a3 + 1] = c2 >>> 16 & 255, t3[a3 + 2] = c2 >>> 8 & 255, t3[a3 + 3] = 255 & c2, t3[a3 + 4] = o2 >>> 24 & 255, t3[a3 + 5] = o2 >>> 16 & 255, t3[a3 + 6] = o2 >>> 8 & 255, t3[a3 + 7] = 255 & o2;
        }
        return t3;
      }, this.decrypt = function(e3) {
        const t3 = Array(e3.length);
        for (let a3 = 0; a3 < e3.length; a3 += 8) {
          let s2, o2 = e3[a3] << 24 | e3[a3 + 1] << 16 | e3[a3 + 2] << 8 | e3[a3 + 3], c2 = e3[a3 + 4] << 24 | e3[a3 + 5] << 16 | e3[a3 + 6] << 8 | e3[a3 + 7];
          s2 = c2, c2 = o2 ^ r2(c2, this.masking[15], this.rotate[15]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[14], this.rotate[14]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[13], this.rotate[13]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[12], this.rotate[12]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[11], this.rotate[11]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[10], this.rotate[10]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[9], this.rotate[9]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[8], this.rotate[8]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[7], this.rotate[7]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[6], this.rotate[6]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[5], this.rotate[5]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[4], this.rotate[4]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[3], this.rotate[3]), o2 = s2, s2 = c2, c2 = o2 ^ n2(c2, this.masking[2], this.rotate[2]), o2 = s2, s2 = c2, c2 = o2 ^ i2(c2, this.masking[1], this.rotate[1]), o2 = s2, s2 = c2, c2 = o2 ^ r2(c2, this.masking[0], this.rotate[0]), o2 = s2, t3[a3] = c2 >>> 24 & 255, t3[a3 + 1] = c2 >>> 16 & 255, t3[a3 + 2] = c2 >>> 8 & 255, t3[a3 + 3] = 255 & c2, t3[a3 + 4] = o2 >>> 24 & 255, t3[a3 + 5] = o2 >> 16 & 255, t3[a3 + 6] = o2 >> 8 & 255, t3[a3 + 7] = 255 & o2;
        }
        return t3;
      };
      const e2 = [, , , ,];
      e2[0] = [, , , ,], e2[0][0] = [4, 0, 13, 15, 12, 14, 8], e2[0][1] = [5, 2, 16, 18, 17, 19, 10], e2[0][2] = [6, 3, 23, 22, 21, 20, 9], e2[0][3] = [7, 1, 26, 25, 27, 24, 11], e2[1] = [, , , ,], e2[1][0] = [0, 6, 21, 23, 20, 22, 16], e2[1][1] = [1, 4, 0, 2, 1, 3, 18], e2[1][2] = [2, 5, 7, 6, 5, 4, 17], e2[1][3] = [3, 7, 10, 9, 11, 8, 19], e2[2] = [, , , ,], e2[2][0] = [4, 0, 13, 15, 12, 14, 8], e2[2][1] = [5, 2, 16, 18, 17, 19, 10], e2[2][2] = [6, 3, 23, 22, 21, 20, 9], e2[2][3] = [7, 1, 26, 25, 27, 24, 11], e2[3] = [, , , ,], e2[3][0] = [0, 6, 21, 23, 20, 22, 16], e2[3][1] = [1, 4, 0, 2, 1, 3, 18], e2[3][2] = [2, 5, 7, 6, 5, 4, 17], e2[3][3] = [3, 7, 10, 9, 11, 8, 19];
      const t2 = [, , , ,];
      function r2(e3, t3, r3) {
        const i3 = t3 + e3, n3 = i3 << r3 | i3 >>> 32 - r3;
        return (a2[0][n3 >>> 24] ^ a2[1][n3 >>> 16 & 255]) - a2[2][n3 >>> 8 & 255] + a2[3][255 & n3];
      }
      function i2(e3, t3, r3) {
        const i3 = t3 ^ e3, n3 = i3 << r3 | i3 >>> 32 - r3;
        return a2[0][n3 >>> 24] - a2[1][n3 >>> 16 & 255] + a2[2][n3 >>> 8 & 255] ^ a2[3][255 & n3];
      }
      function n2(e3, t3, r3) {
        const i3 = t3 - e3, n3 = i3 << r3 | i3 >>> 32 - r3;
        return (a2[0][n3 >>> 24] + a2[1][n3 >>> 16 & 255] ^ a2[2][n3 >>> 8 & 255]) - a2[3][255 & n3];
      }
      t2[0] = [, , , ,], t2[0][0] = [24, 25, 23, 22, 18], t2[0][1] = [26, 27, 21, 20, 22], t2[0][2] = [28, 29, 19, 18, 25], t2[0][3] = [30, 31, 17, 16, 28], t2[1] = [, , , ,], t2[1][0] = [3, 2, 12, 13, 8], t2[1][1] = [1, 0, 14, 15, 13], t2[1][2] = [7, 6, 8, 9, 3], t2[1][3] = [5, 4, 10, 11, 7], t2[2] = [, , , ,], t2[2][0] = [19, 18, 28, 29, 25], t2[2][1] = [17, 16, 30, 31, 28], t2[2][2] = [23, 22, 24, 25, 18], t2[2][3] = [21, 20, 26, 27, 22], t2[3] = [, , , ,], t2[3][0] = [8, 9, 7, 6, 3], t2[3][1] = [10, 11, 5, 4, 7], t2[3][2] = [12, 13, 3, 2, 8], t2[3][3] = [14, 15, 1, 0, 13], this.keySchedule = function(r3) {
        const i3 = [, , , , , , , ,], n3 = Array(32);
        let s2;
        for (let e3 = 0; e3 < 4; e3++)
          s2 = 4 * e3, i3[e3] = r3[s2] << 24 | r3[s2 + 1] << 16 | r3[s2 + 2] << 8 | r3[s2 + 3];
        const o2 = [6, 7, 4, 5];
        let c2, u2 = 0;
        for (let r4 = 0; r4 < 2; r4++)
          for (let r5 = 0; r5 < 4; r5++) {
            for (s2 = 0; s2 < 4; s2++) {
              const t3 = e2[r5][s2];
              c2 = i3[t3[1]], c2 ^= a2[4][i3[t3[2] >>> 2] >>> 24 - 8 * (3 & t3[2]) & 255], c2 ^= a2[5][i3[t3[3] >>> 2] >>> 24 - 8 * (3 & t3[3]) & 255], c2 ^= a2[6][i3[t3[4] >>> 2] >>> 24 - 8 * (3 & t3[4]) & 255], c2 ^= a2[7][i3[t3[5] >>> 2] >>> 24 - 8 * (3 & t3[5]) & 255], c2 ^= a2[o2[s2]][i3[t3[6] >>> 2] >>> 24 - 8 * (3 & t3[6]) & 255], i3[t3[0]] = c2;
            }
            for (s2 = 0; s2 < 4; s2++) {
              const e3 = t2[r5][s2];
              c2 = a2[4][i3[e3[0] >>> 2] >>> 24 - 8 * (3 & e3[0]) & 255], c2 ^= a2[5][i3[e3[1] >>> 2] >>> 24 - 8 * (3 & e3[1]) & 255], c2 ^= a2[6][i3[e3[2] >>> 2] >>> 24 - 8 * (3 & e3[2]) & 255], c2 ^= a2[7][i3[e3[3] >>> 2] >>> 24 - 8 * (3 & e3[3]) & 255], c2 ^= a2[4 + s2][i3[e3[4] >>> 2] >>> 24 - 8 * (3 & e3[4]) & 255], n3[u2] = c2, u2++;
            }
          }
        for (let e3 = 0; e3 < 16; e3++)
          this.masking[e3] = n3[e3], this.rotate[e3] = 31 & n3[16 + e3];
      };
      const a2 = [, , , , , , , ,];
      a2[0] = [821772500, 2678128395, 1810681135, 1059425402, 505495343, 2617265619, 1610868032, 3483355465, 3218386727, 2294005173, 3791863952, 2563806837, 1852023008, 365126098, 3269944861, 584384398, 677919599, 3229601881, 4280515016, 2002735330, 1136869587, 3744433750, 2289869850, 2731719981, 2714362070, 879511577, 1639411079, 575934255, 717107937, 2857637483, 576097850, 2731753936, 1725645e3, 2810460463, 5111599, 767152862, 2543075244, 1251459544, 1383482551, 3052681127, 3089939183, 3612463449, 1878520045, 1510570527, 2189125840, 2431448366, 582008916, 3163445557, 1265446783, 1354458274, 3529918736, 3202711853, 3073581712, 3912963487, 3029263377, 1275016285, 4249207360, 2905708351, 3304509486, 1442611557, 3585198765, 2712415662, 2731849581, 3248163920, 2283946226, 208555832, 2766454743, 1331405426, 1447828783, 3315356441, 3108627284, 2957404670, 2981538698, 3339933917, 1669711173, 286233437, 1465092821, 1782121619, 3862771680, 710211251, 980974943, 1651941557, 430374111, 2051154026, 704238805, 4128970897, 3144820574, 2857402727, 948965521, 3333752299, 2227686284, 718756367, 2269778983, 2731643755, 718440111, 2857816721, 3616097120, 1113355533, 2478022182, 410092745, 1811985197, 1944238868, 2696854588, 1415722873, 1682284203, 1060277122, 1998114690, 1503841958, 82706478, 2315155686, 1068173648, 845149890, 2167947013, 1768146376, 1993038550, 3566826697, 3390574031, 940016341, 3355073782, 2328040721, 904371731, 1205506512, 4094660742, 2816623006, 825647681, 85914773, 2857843460, 1249926541, 1417871568, 3287612, 3211054559, 3126306446, 1975924523, 1353700161, 2814456437, 2438597621, 1800716203, 722146342, 2873936343, 1151126914, 4160483941, 2877670899, 458611604, 2866078500, 3483680063, 770352098, 2652916994, 3367839148, 3940505011, 3585973912, 3809620402, 718646636, 2504206814, 2914927912, 3631288169, 2857486607, 2860018678, 575749918, 2857478043, 718488780, 2069512688, 3548183469, 453416197, 1106044049, 3032691430, 52586708, 3378514636, 3459808877, 3211506028, 1785789304, 218356169, 3571399134, 3759170522, 1194783844, 1523787992, 3007827094, 1975193539, 2555452411, 1341901877, 3045838698, 3776907964, 3217423946, 2802510864, 2889438986, 1057244207, 1636348243, 3761863214, 1462225785, 2632663439, 481089165, 718503062, 24497053, 3332243209, 3344655856, 3655024856, 3960371065, 1195698900, 2971415156, 3710176158, 2115785917, 4027663609, 3525578417, 2524296189, 2745972565, 3564906415, 1372086093, 1452307862, 2780501478, 1476592880, 3389271281, 18495466, 2378148571, 901398090, 891748256, 3279637769, 3157290713, 2560960102, 1447622437, 4284372637, 216884176, 2086908623, 1879786977, 3588903153, 2242455666, 2938092967, 3559082096, 2810645491, 758861177, 1121993112, 215018983, 642190776, 4169236812, 1196255959, 2081185372, 3508738393, 941322904, 4124243163, 2877523539, 1848581667, 2205260958, 3180453958, 2589345134, 3694731276, 550028657, 2519456284, 3789985535, 2973870856, 2093648313, 443148163, 46942275, 2734146937, 1117713533, 1115362972, 1523183689, 3717140224, 1551984063], a2[1] = [522195092, 4010518363, 1776537470, 960447360, 4267822970, 4005896314, 1435016340, 1929119313, 2913464185, 1310552629, 3579470798, 3724818106, 2579771631, 1594623892, 417127293, 2715217907, 2696228731, 1508390405, 3994398868, 3925858569, 3695444102, 4019471449, 3129199795, 3770928635, 3520741761, 990456497, 4187484609, 2783367035, 21106139, 3840405339, 631373633, 3783325702, 532942976, 396095098, 3548038825, 4267192484, 2564721535, 2011709262, 2039648873, 620404603, 3776170075, 2898526339, 3612357925, 4159332703, 1645490516, 223693667, 1567101217, 3362177881, 1029951347, 3470931136, 3570957959, 1550265121, 119497089, 972513919, 907948164, 3840628539, 1613718692, 3594177948, 465323573, 2659255085, 654439692, 2575596212, 2699288441, 3127702412, 277098644, 624404830, 4100943870, 2717858591, 546110314, 2403699828, 3655377447, 1321679412, 4236791657, 1045293279, 4010672264, 895050893, 2319792268, 494945126, 1914543101, 2777056443, 3894764339, 2219737618, 311263384, 4275257268, 3458730721, 669096869, 3584475730, 3835122877, 3319158237, 3949359204, 2005142349, 2713102337, 2228954793, 3769984788, 569394103, 3855636576, 1425027204, 108000370, 2736431443, 3671869269, 3043122623, 1750473702, 2211081108, 762237499, 3972989403, 2798899386, 3061857628, 2943854345, 867476300, 964413654, 1591880597, 1594774276, 2179821409, 552026980, 3026064248, 3726140315, 2283577634, 3110545105, 2152310760, 582474363, 1582640421, 1383256631, 2043843868, 3322775884, 1217180674, 463797851, 2763038571, 480777679, 2718707717, 2289164131, 3118346187, 214354409, 200212307, 3810608407, 3025414197, 2674075964, 3997296425, 1847405948, 1342460550, 510035443, 4080271814, 815934613, 833030224, 1620250387, 1945732119, 2703661145, 3966000196, 1388869545, 3456054182, 2687178561, 2092620194, 562037615, 1356438536, 3409922145, 3261847397, 1688467115, 2150901366, 631725691, 3840332284, 549916902, 3455104640, 394546491, 837744717, 2114462948, 751520235, 2221554606, 2415360136, 3999097078, 2063029875, 803036379, 2702586305, 821456707, 3019566164, 360699898, 4018502092, 3511869016, 3677355358, 2402471449, 812317050, 49299192, 2570164949, 3259169295, 2816732080, 3331213574, 3101303564, 2156015656, 3705598920, 3546263921, 143268808, 3200304480, 1638124008, 3165189453, 3341807610, 578956953, 2193977524, 3638120073, 2333881532, 807278310, 658237817, 2969561766, 1641658566, 11683945, 3086995007, 148645947, 1138423386, 4158756760, 1981396783, 2401016740, 3699783584, 380097457, 2680394679, 2803068651, 3334260286, 441530178, 4016580796, 1375954390, 761952171, 891809099, 2183123478, 157052462, 3683840763, 1592404427, 341349109, 2438483839, 1417898363, 644327628, 2233032776, 2353769706, 2201510100, 220455161, 1815641738, 182899273, 2995019788, 3627381533, 3702638151, 2890684138, 1052606899, 588164016, 1681439879, 4038439418, 2405343923, 4229449282, 167996282, 1336969661, 1688053129, 2739224926, 1543734051, 1046297529, 1138201970, 2121126012, 115334942, 1819067631, 1902159161, 1941945968, 2206692869, 1159982321], a2[2] = [2381300288, 637164959, 3952098751, 3893414151, 1197506559, 916448331, 2350892612, 2932787856, 3199334847, 4009478890, 3905886544, 1373570990, 2450425862, 4037870920, 3778841987, 2456817877, 286293407, 124026297, 3001279700, 1028597854, 3115296800, 4208886496, 2691114635, 2188540206, 1430237888, 1218109995, 3572471700, 308166588, 570424558, 2187009021, 2455094765, 307733056, 1310360322, 3135275007, 1384269543, 2388071438, 863238079, 2359263624, 2801553128, 3380786597, 2831162807, 1470087780, 1728663345, 4072488799, 1090516929, 532123132, 2389430977, 1132193179, 2578464191, 3051079243, 1670234342, 1434557849, 2711078940, 1241591150, 3314043432, 3435360113, 3091448339, 1812415473, 2198440252, 267246943, 796911696, 3619716990, 38830015, 1526438404, 2806502096, 374413614, 2943401790, 1489179520, 1603809326, 1920779204, 168801282, 260042626, 2358705581, 1563175598, 2397674057, 1356499128, 2217211040, 514611088, 2037363785, 2186468373, 4022173083, 2792511869, 2913485016, 1173701892, 4200428547, 3896427269, 1334932762, 2455136706, 602925377, 2835607854, 1613172210, 41346230, 2499634548, 2457437618, 2188827595, 41386358, 4172255629, 1313404830, 2405527007, 3801973774, 2217704835, 873260488, 2528884354, 2478092616, 4012915883, 2555359016, 2006953883, 2463913485, 575479328, 2218240648, 2099895446, 660001756, 2341502190, 3038761536, 3888151779, 3848713377, 3286851934, 1022894237, 1620365795, 3449594689, 1551255054, 15374395, 3570825345, 4249311020, 4151111129, 3181912732, 310226346, 1133119310, 530038928, 136043402, 2476768958, 3107506709, 2544909567, 1036173560, 2367337196, 1681395281, 1758231547, 3641649032, 306774401, 1575354324, 3716085866, 1990386196, 3114533736, 2455606671, 1262092282, 3124342505, 2768229131, 4210529083, 1833535011, 423410938, 660763973, 2187129978, 1639812e3, 3508421329, 3467445492, 310289298, 272797111, 2188552562, 2456863912, 310240523, 677093832, 1013118031, 901835429, 3892695601, 1116285435, 3036471170, 1337354835, 243122523, 520626091, 277223598, 4244441197, 4194248841, 1766575121, 594173102, 316590669, 742362309, 3536858622, 4176435350, 3838792410, 2501204839, 1229605004, 3115755532, 1552908988, 2312334149, 979407927, 3959474601, 1148277331, 176638793, 3614686272, 2083809052, 40992502, 1340822838, 2731552767, 3535757508, 3560899520, 1354035053, 122129617, 7215240, 2732932949, 3118912700, 2718203926, 2539075635, 3609230695, 3725561661, 1928887091, 2882293555, 1988674909, 2063640240, 2491088897, 1459647954, 4189817080, 2302804382, 1113892351, 2237858528, 1927010603, 4002880361, 1856122846, 1594404395, 2944033133, 3855189863, 3474975698, 1643104450, 4054590833, 3431086530, 1730235576, 2984608721, 3084664418, 2131803598, 4178205752, 267404349, 1617849798, 1616132681, 1462223176, 736725533, 2327058232, 551665188, 2945899023, 1749386277, 2575514597, 1611482493, 674206544, 2201269090, 3642560800, 728599968, 1680547377, 2620414464, 1388111496, 453204106, 4156223445, 1094905244, 2754698257, 2201108165, 3757000246, 2704524545, 3922940700, 3996465027], a2[3] = [2645754912, 532081118, 2814278639, 3530793624, 1246723035, 1689095255, 2236679235, 4194438865, 2116582143, 3859789411, 157234593, 2045505824, 4245003587, 1687664561, 4083425123, 605965023, 672431967, 1336064205, 3376611392, 214114848, 4258466608, 3232053071, 489488601, 605322005, 3998028058, 264917351, 1912574028, 756637694, 436560991, 202637054, 135989450, 85393697, 2152923392, 3896401662, 2895836408, 2145855233, 3535335007, 115294817, 3147733898, 1922296357, 3464822751, 4117858305, 1037454084, 2725193275, 2127856640, 1417604070, 1148013728, 1827919605, 642362335, 2929772533, 909348033, 1346338451, 3547799649, 297154785, 1917849091, 4161712827, 2883604526, 3968694238, 1469521537, 3780077382, 3375584256, 1763717519, 136166297, 4290970789, 1295325189, 2134727907, 2798151366, 1566297257, 3672928234, 2677174161, 2672173615, 965822077, 2780786062, 289653839, 1133871874, 3491843819, 35685304, 1068898316, 418943774, 672553190, 642281022, 2346158704, 1954014401, 3037126780, 4079815205, 2030668546, 3840588673, 672283427, 1776201016, 359975446, 3750173538, 555499703, 2769985273, 1324923, 69110472, 152125443, 3176785106, 3822147285, 1340634837, 798073664, 1434183902, 15393959, 216384236, 1303690150, 3881221631, 3711134124, 3960975413, 106373927, 2578434224, 1455997841, 1801814300, 1578393881, 1854262133, 3188178946, 3258078583, 2302670060, 1539295533, 3505142565, 3078625975, 2372746020, 549938159, 3278284284, 2620926080, 181285381, 2865321098, 3970029511, 68876850, 488006234, 1728155692, 2608167508, 836007927, 2435231793, 919367643, 3339422534, 3655756360, 1457871481, 40520939, 1380155135, 797931188, 234455205, 2255801827, 3990488299, 397000196, 739833055, 3077865373, 2871719860, 4022553888, 772369276, 390177364, 3853951029, 557662966, 740064294, 1640166671, 1699928825, 3535942136, 622006121, 3625353122, 68743880, 1742502, 219489963, 1664179233, 1577743084, 1236991741, 410585305, 2366487942, 823226535, 1050371084, 3426619607, 3586839478, 212779912, 4147118561, 1819446015, 1911218849, 530248558, 3486241071, 3252585495, 2886188651, 3410272728, 2342195030, 20547779, 2982490058, 3032363469, 3631753222, 312714466, 1870521650, 1493008054, 3491686656, 615382978, 4103671749, 2534517445, 1932181, 2196105170, 278426614, 6369430, 3274544417, 2913018367, 697336853, 2143000447, 2946413531, 701099306, 1558357093, 2805003052, 3500818408, 2321334417, 3567135975, 216290473, 3591032198, 23009561, 1996984579, 3735042806, 2024298078, 3739440863, 569400510, 2339758983, 3016033873, 3097871343, 3639523026, 3844324983, 3256173865, 795471839, 2951117563, 4101031090, 4091603803, 3603732598, 971261452, 534414648, 428311343, 3389027175, 2844869880, 694888862, 1227866773, 2456207019, 3043454569, 2614353370, 3749578031, 3676663836, 459166190, 4132644070, 1794958188, 51825668, 2252611902, 3084671440, 2036672799, 3436641603, 1099053433, 2469121526, 3059204941, 1323291266, 2061838604, 1018778475, 2233344254, 2553501054, 334295216, 3556750194, 1065731521, 183467730], a2[4] = [2127105028, 745436345, 2601412319, 2788391185, 3093987327, 500390133, 1155374404, 389092991, 150729210, 3891597772, 3523549952, 1935325696, 716645080, 946045387, 2901812282, 1774124410, 3869435775, 4039581901, 3293136918, 3438657920, 948246080, 363898952, 3867875531, 1286266623, 1598556673, 68334250, 630723836, 1104211938, 1312863373, 613332731, 2377784574, 1101634306, 441780740, 3129959883, 1917973735, 2510624549, 3238456535, 2544211978, 3308894634, 1299840618, 4076074851, 1756332096, 3977027158, 297047435, 3790297736, 2265573040, 3621810518, 1311375015, 1667687725, 47300608, 3299642885, 2474112369, 201668394, 1468347890, 576830978, 3594690761, 3742605952, 1958042578, 1747032512, 3558991340, 1408974056, 3366841779, 682131401, 1033214337, 1545599232, 4265137049, 206503691, 103024618, 2855227313, 1337551222, 2428998917, 2963842932, 4015366655, 3852247746, 2796956967, 3865723491, 3747938335, 247794022, 3755824572, 702416469, 2434691994, 397379957, 851939612, 2314769512, 218229120, 1380406772, 62274761, 214451378, 3170103466, 2276210409, 3845813286, 28563499, 446592073, 1693330814, 3453727194, 29968656, 3093872512, 220656637, 2470637031, 77972100, 1667708854, 1358280214, 4064765667, 2395616961, 325977563, 4277240721, 4220025399, 3605526484, 3355147721, 811859167, 3069544926, 3962126810, 652502677, 3075892249, 4132761541, 3498924215, 1217549313, 3250244479, 3858715919, 3053989961, 1538642152, 2279026266, 2875879137, 574252750, 3324769229, 2651358713, 1758150215, 141295887, 2719868960, 3515574750, 4093007735, 4194485238, 1082055363, 3417560400, 395511885, 2966884026, 179534037, 3646028556, 3738688086, 1092926436, 2496269142, 257381841, 3772900718, 1636087230, 1477059743, 2499234752, 3811018894, 2675660129, 3285975680, 90732309, 1684827095, 1150307763, 1723134115, 3237045386, 1769919919, 1240018934, 815675215, 750138730, 2239792499, 1234303040, 1995484674, 138143821, 675421338, 1145607174, 1936608440, 3238603024, 2345230278, 2105974004, 323969391, 779555213, 3004902369, 2861610098, 1017501463, 2098600890, 2628620304, 2940611490, 2682542546, 1171473753, 3656571411, 3687208071, 4091869518, 393037935, 159126506, 1662887367, 1147106178, 391545844, 3452332695, 1891500680, 3016609650, 1851642611, 546529401, 1167818917, 3194020571, 2848076033, 3953471836, 575554290, 475796850, 4134673196, 450035699, 2351251534, 844027695, 1080539133, 86184846, 1554234488, 3692025454, 1972511363, 2018339607, 1491841390, 1141460869, 1061690759, 4244549243, 2008416118, 2351104703, 2868147542, 1598468138, 722020353, 1027143159, 212344630, 1387219594, 1725294528, 3745187956, 2500153616, 458938280, 4129215917, 1828119673, 544571780, 3503225445, 2297937496, 1241802790, 267843827, 2694610800, 1397140384, 1558801448, 3782667683, 1806446719, 929573330, 2234912681, 400817706, 616011623, 4121520928, 3603768725, 1761550015, 1968522284, 4053731006, 4192232858, 4005120285, 872482584, 3140537016, 3894607381, 2287405443, 1963876937, 3663887957, 1584857e3, 2975024454, 1833426440, 4025083860], a2[5] = [4143615901, 749497569, 1285769319, 3795025788, 2514159847, 23610292, 3974978748, 844452780, 3214870880, 3751928557, 2213566365, 1676510905, 448177848, 3730751033, 4086298418, 2307502392, 871450977, 3222878141, 4110862042, 3831651966, 2735270553, 1310974780, 2043402188, 1218528103, 2736035353, 4274605013, 2702448458, 3936360550, 2693061421, 162023535, 2827510090, 687910808, 23484817, 3784910947, 3371371616, 779677500, 3503626546, 3473927188, 4157212626, 3500679282, 4248902014, 2466621104, 3899384794, 1958663117, 925738300, 1283408968, 3669349440, 1840910019, 137959847, 2679828185, 1239142320, 1315376211, 1547541505, 1690155329, 739140458, 3128809933, 3933172616, 3876308834, 905091803, 1548541325, 4040461708, 3095483362, 144808038, 451078856, 676114313, 2861728291, 2469707347, 993665471, 373509091, 2599041286, 4025009006, 4170239449, 2149739950, 3275793571, 3749616649, 2794760199, 1534877388, 572371878, 2590613551, 1753320020, 3467782511, 1405125690, 4270405205, 633333386, 3026356924, 3475123903, 632057672, 2846462855, 1404951397, 3882875879, 3915906424, 195638627, 2385783745, 3902872553, 1233155085, 3355999740, 2380578713, 2702246304, 2144565621, 3663341248, 3894384975, 2502479241, 4248018925, 3094885567, 1594115437, 572884632, 3385116731, 767645374, 1331858858, 1475698373, 3793881790, 3532746431, 1321687957, 619889600, 1121017241, 3440213920, 2070816767, 2833025776, 1933951238, 4095615791, 890643334, 3874130214, 859025556, 360630002, 925594799, 1764062180, 3920222280, 4078305929, 979562269, 2810700344, 4087740022, 1949714515, 546639971, 1165388173, 3069891591, 1495988560, 922170659, 1291546247, 2107952832, 1813327274, 3406010024, 3306028637, 4241950635, 153207855, 2313154747, 1608695416, 1150242611, 1967526857, 721801357, 1220138373, 3691287617, 3356069787, 2112743302, 3281662835, 1111556101, 1778980689, 250857638, 2298507990, 673216130, 2846488510, 3207751581, 3562756981, 3008625920, 3417367384, 2198807050, 529510932, 3547516680, 3426503187, 2364944742, 102533054, 2294910856, 1617093527, 1204784762, 3066581635, 1019391227, 1069574518, 1317995090, 1691889997, 3661132003, 510022745, 3238594800, 1362108837, 1817929911, 2184153760, 805817662, 1953603311, 3699844737, 120799444, 2118332377, 207536705, 2282301548, 4120041617, 145305846, 2508124933, 3086745533, 3261524335, 1877257368, 2977164480, 3160454186, 2503252186, 4221677074, 759945014, 254147243, 2767453419, 3801518371, 629083197, 2471014217, 907280572, 3900796746, 940896768, 2751021123, 2625262786, 3161476951, 3661752313, 3260732218, 1425318020, 2977912069, 1496677566, 3988592072, 2140652971, 3126511541, 3069632175, 977771578, 1392695845, 1698528874, 1411812681, 1369733098, 1343739227, 3620887944, 1142123638, 67414216, 3102056737, 3088749194, 1626167401, 2546293654, 3941374235, 697522451, 33404913, 143560186, 2595682037, 994885535, 1247667115, 3859094837, 2699155541, 3547024625, 4114935275, 2968073508, 3199963069, 2732024527, 1237921620, 951448369, 1898488916, 1211705605, 2790989240, 2233243581, 3598044975], a2[6] = [2246066201, 858518887, 1714274303, 3485882003, 713916271, 2879113490, 3730835617, 539548191, 36158695, 1298409750, 419087104, 1358007170, 749914897, 2989680476, 1261868530, 2995193822, 2690628854, 3443622377, 3780124940, 3796824509, 2976433025, 4259637129, 1551479e3, 512490819, 1296650241, 951993153, 2436689437, 2460458047, 144139966, 3136204276, 310820559, 3068840729, 643875328, 1969602020, 1680088954, 2185813161, 3283332454, 672358534, 198762408, 896343282, 276269502, 3014846926, 84060815, 197145886, 376173866, 3943890818, 3813173521, 3545068822, 1316698879, 1598252827, 2633424951, 1233235075, 859989710, 2358460855, 3503838400, 3409603720, 1203513385, 1193654839, 2792018475, 2060853022, 207403770, 1144516871, 3068631394, 1121114134, 177607304, 3785736302, 326409831, 1929119770, 2983279095, 4183308101, 3474579288, 3200513878, 3228482096, 119610148, 1170376745, 3378393471, 3163473169, 951863017, 3337026068, 3135789130, 2907618374, 1183797387, 2015970143, 4045674555, 2182986399, 2952138740, 3928772205, 384012900, 2454997643, 10178499, 2879818989, 2596892536, 111523738, 2995089006, 451689641, 3196290696, 235406569, 1441906262, 3890558523, 3013735005, 4158569349, 1644036924, 376726067, 1006849064, 3664579700, 2041234796, 1021632941, 1374734338, 2566452058, 371631263, 4007144233, 490221539, 206551450, 3140638584, 1053219195, 1853335209, 3412429660, 3562156231, 735133835, 1623211703, 3104214392, 2738312436, 4096837757, 3366392578, 3110964274, 3956598718, 3196820781, 2038037254, 3877786376, 2339753847, 300912036, 3766732888, 2372630639, 1516443558, 4200396704, 1574567987, 4069441456, 4122592016, 2699739776, 146372218, 2748961456, 2043888151, 35287437, 2596680554, 655490400, 1132482787, 110692520, 1031794116, 2188192751, 1324057718, 1217253157, 919197030, 686247489, 3261139658, 1028237775, 3135486431, 3059715558, 2460921700, 986174950, 2661811465, 4062904701, 2752986992, 3709736643, 367056889, 1353824391, 731860949, 1650113154, 1778481506, 784341916, 357075625, 3608602432, 1074092588, 2480052770, 3811426202, 92751289, 877911070, 3600361838, 1231880047, 480201094, 3756190983, 3094495953, 434011822, 87971354, 363687820, 1717726236, 1901380172, 3926403882, 2481662265, 400339184, 1490350766, 2661455099, 1389319756, 2558787174, 784598401, 1983468483, 30828846, 3550527752, 2716276238, 3841122214, 1765724805, 1955612312, 1277890269, 1333098070, 1564029816, 2704417615, 1026694237, 3287671188, 1260819201, 3349086767, 1016692350, 1582273796, 1073413053, 1995943182, 694588404, 1025494639, 3323872702, 3551898420, 4146854327, 453260480, 1316140391, 1435673405, 3038941953, 3486689407, 1622062951, 403978347, 817677117, 950059133, 4246079218, 3278066075, 1486738320, 1417279718, 481875527, 2549965225, 3933690356, 760697757, 1452955855, 3897451437, 1177426808, 1702951038, 4085348628, 2447005172, 1084371187, 3516436277, 3068336338, 1073369276, 1027665953, 3284188590, 1230553676, 1368340146, 2226246512, 267243139, 2274220762, 4070734279, 2497715176, 2423353163, 2504755875], a2[7] = [3793104909, 3151888380, 2817252029, 895778965, 2005530807, 3871412763, 237245952, 86829237, 296341424, 3851759377, 3974600970, 2475086196, 709006108, 1994621201, 2972577594, 937287164, 3734691505, 168608556, 3189338153, 2225080640, 3139713551, 3033610191, 3025041904, 77524477, 185966941, 1208824168, 2344345178, 1721625922, 3354191921, 1066374631, 1927223579, 1971335949, 2483503697, 1551748602, 2881383779, 2856329572, 3003241482, 48746954, 1398218158, 2050065058, 313056748, 4255789917, 393167848, 1912293076, 940740642, 3465845460, 3091687853, 2522601570, 2197016661, 1727764327, 364383054, 492521376, 1291706479, 3264136376, 1474851438, 1685747964, 2575719748, 1619776915, 1814040067, 970743798, 1561002147, 2925768690, 2123093554, 1880132620, 3151188041, 697884420, 2550985770, 2607674513, 2659114323, 110200136, 1489731079, 997519150, 1378877361, 3527870668, 478029773, 2766872923, 1022481122, 431258168, 1112503832, 897933369, 2635587303, 669726182, 3383752315, 918222264, 163866573, 3246985393, 3776823163, 114105080, 1903216136, 761148244, 3571337562, 1690750982, 3166750252, 1037045171, 1888456500, 2010454850, 642736655, 616092351, 365016990, 1185228132, 4174898510, 1043824992, 2023083429, 2241598885, 3863320456, 3279669087, 3674716684, 108438443, 2132974366, 830746235, 606445527, 4173263986, 2204105912, 1844756978, 2532684181, 4245352700, 2969441100, 3796921661, 1335562986, 4061524517, 2720232303, 2679424040, 634407289, 885462008, 3294724487, 3933892248, 2094100220, 339117932, 4048830727, 3202280980, 1458155303, 2689246273, 1022871705, 2464987878, 3714515309, 353796843, 2822958815, 4256850100, 4052777845, 551748367, 618185374, 3778635579, 4020649912, 1904685140, 3069366075, 2670879810, 3407193292, 2954511620, 4058283405, 2219449317, 3135758300, 1120655984, 3447565834, 1474845562, 3577699062, 550456716, 3466908712, 2043752612, 881257467, 869518812, 2005220179, 938474677, 3305539448, 3850417126, 1315485940, 3318264702, 226533026, 965733244, 321539988, 1136104718, 804158748, 573969341, 3708209826, 937399083, 3290727049, 2901666755, 1461057207, 4013193437, 4066861423, 3242773476, 2421326174, 1581322155, 3028952165, 786071460, 3900391652, 3918438532, 1485433313, 4023619836, 3708277595, 3678951060, 953673138, 1467089153, 1930354364, 1533292819, 2492563023, 1346121658, 1685000834, 1965281866, 3765933717, 4190206607, 2052792609, 3515332758, 690371149, 3125873887, 2180283551, 2903598061, 3933952357, 436236910, 289419410, 14314871, 1242357089, 2904507907, 1616633776, 2666382180, 585885352, 3471299210, 2699507360, 1432659641, 277164553, 3354103607, 770115018, 2303809295, 3741942315, 3177781868, 2853364978, 2269453327, 3774259834, 987383833, 1290892879, 225909803, 1741533526, 890078084, 1496906255, 1111072499, 916028167, 243534141, 1252605537, 2204162171, 531204876, 290011180, 3916834213, 102027703, 237315147, 209093447, 1486785922, 220223953, 2758195998, 4175039106, 82940208, 3127791296, 2569425252, 518464269, 1353887104, 3941492737, 2377294467, 3935040926];
    }
    function Ge(e2) {
      this.cast5 = new He(), this.cast5.setKey(e2), this.encrypt = function(e3) {
        return this.cast5.encrypt(e3);
      };
    }
    We.keySize = We.prototype.keySize = 24, We.blockSize = We.prototype.blockSize = 8, Ge.blockSize = Ge.prototype.blockSize = 8, Ge.keySize = Ge.prototype.keySize = 16;
    var Ve = 4294967295;
    function $e(e2, t2) {
      return (e2 << t2 | e2 >>> 32 - t2) & Ve;
    }
    function Ze(e2, t2) {
      return e2[t2] | e2[t2 + 1] << 8 | e2[t2 + 2] << 16 | e2[t2 + 3] << 24;
    }
    function Ye(e2, t2, r2) {
      e2.splice(t2, 4, 255 & r2, r2 >>> 8 & 255, r2 >>> 16 & 255, r2 >>> 24 & 255);
    }
    function Xe(e2, t2) {
      return e2 >>> 8 * t2 & 255;
    }
    function Qe(e2) {
      this.tf = function() {
        let e3 = null, t2 = null, r2 = -1, i2 = [], n2 = [[], [], [], []];
        function a2(e4) {
          return n2[0][Xe(e4, 0)] ^ n2[1][Xe(e4, 1)] ^ n2[2][Xe(e4, 2)] ^ n2[3][Xe(e4, 3)];
        }
        function s2(e4) {
          return n2[0][Xe(e4, 3)] ^ n2[1][Xe(e4, 0)] ^ n2[2][Xe(e4, 1)] ^ n2[3][Xe(e4, 2)];
        }
        function o2(e4, t3) {
          let r3 = a2(t3[0]), n3 = s2(t3[1]);
          t3[2] = $e(t3[2] ^ r3 + n3 + i2[4 * e4 + 8] & Ve, 31), t3[3] = $e(t3[3], 1) ^ r3 + 2 * n3 + i2[4 * e4 + 9] & Ve, r3 = a2(t3[2]), n3 = s2(t3[3]), t3[0] = $e(t3[0] ^ r3 + n3 + i2[4 * e4 + 10] & Ve, 31), t3[1] = $e(t3[1], 1) ^ r3 + 2 * n3 + i2[4 * e4 + 11] & Ve;
        }
        function c2(e4, t3) {
          let r3 = a2(t3[0]), n3 = s2(t3[1]);
          t3[2] = $e(t3[2], 1) ^ r3 + n3 + i2[4 * e4 + 10] & Ve, t3[3] = $e(t3[3] ^ r3 + 2 * n3 + i2[4 * e4 + 11] & Ve, 31), r3 = a2(t3[2]), n3 = s2(t3[3]), t3[0] = $e(t3[0], 1) ^ r3 + n3 + i2[4 * e4 + 8] & Ve, t3[1] = $e(t3[1] ^ r3 + 2 * n3 + i2[4 * e4 + 9] & Ve, 31);
        }
        return { name: "twofish", blocksize: 16, open: function(t3) {
          let r3, a3, s3, o3, c3;
          e3 = t3;
          const u2 = [], h2 = [], f2 = [];
          let d2;
          const l2 = [];
          let p2, y2, b2;
          const m2 = [[8, 1, 7, 13, 6, 15, 3, 2, 0, 11, 5, 9, 14, 12, 10, 4], [2, 8, 11, 13, 15, 7, 6, 14, 3, 1, 9, 4, 0, 10, 12, 5]], g2 = [[14, 12, 11, 8, 1, 2, 3, 5, 15, 4, 10, 6, 7, 0, 9, 13], [1, 14, 2, 11, 4, 12, 3, 7, 6, 13, 10, 5, 15, 9, 0, 8]], w2 = [[11, 10, 5, 14, 6, 13, 9, 0, 12, 8, 15, 3, 2, 4, 7, 1], [4, 12, 7, 5, 1, 6, 9, 10, 0, 14, 13, 8, 2, 11, 3, 15]], v2 = [[13, 7, 15, 4, 1, 2, 6, 14, 9, 11, 3, 0, 8, 5, 12, 10], [11, 9, 5, 1, 12, 3, 13, 14, 6, 4, 7, 15, 2, 0, 8, 10]], _2 = [0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15], k2 = [0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 5, 14, 7], A2 = [[], []], S2 = [[], [], [], []];
          function E2(e4) {
            return e4 ^ e4 >> 2 ^ [0, 90, 180, 238][3 & e4];
          }
          function P2(e4) {
            return e4 ^ e4 >> 1 ^ e4 >> 2 ^ [0, 238, 180, 90][3 & e4];
          }
          function x2(e4, t4) {
            let r4, i3, n3;
            for (r4 = 0; r4 < 8; r4++)
              i3 = t4 >>> 24, t4 = t4 << 8 & Ve | e4 >>> 24, e4 = e4 << 8 & Ve, n3 = i3 << 1, 128 & i3 && (n3 ^= 333), t4 ^= i3 ^ n3 << 16, n3 ^= i3 >>> 1, 1 & i3 && (n3 ^= 166), t4 ^= n3 << 24 | n3 << 8;
            return t4;
          }
          function M2(e4, t4) {
            const r4 = t4 >> 4, i3 = 15 & t4, n3 = m2[e4][r4 ^ i3], a4 = g2[e4][_2[i3] ^ k2[r4]];
            return v2[e4][_2[a4] ^ k2[n3]] << 4 | w2[e4][n3 ^ a4];
          }
          function C2(e4, t4) {
            let r4 = Xe(e4, 0), i3 = Xe(e4, 1), n3 = Xe(e4, 2), a4 = Xe(e4, 3);
            switch (d2) {
              case 4:
                r4 = A2[1][r4] ^ Xe(t4[3], 0), i3 = A2[0][i3] ^ Xe(t4[3], 1), n3 = A2[0][n3] ^ Xe(t4[3], 2), a4 = A2[1][a4] ^ Xe(t4[3], 3);
              case 3:
                r4 = A2[1][r4] ^ Xe(t4[2], 0), i3 = A2[1][i3] ^ Xe(t4[2], 1), n3 = A2[0][n3] ^ Xe(t4[2], 2), a4 = A2[0][a4] ^ Xe(t4[2], 3);
              case 2:
                r4 = A2[0][A2[0][r4] ^ Xe(t4[1], 0)] ^ Xe(t4[0], 0), i3 = A2[0][A2[1][i3] ^ Xe(t4[1], 1)] ^ Xe(t4[0], 1), n3 = A2[1][A2[0][n3] ^ Xe(t4[1], 2)] ^ Xe(t4[0], 2), a4 = A2[1][A2[1][a4] ^ Xe(t4[1], 3)] ^ Xe(t4[0], 3);
            }
            return S2[0][r4] ^ S2[1][i3] ^ S2[2][n3] ^ S2[3][a4];
          }
          for (e3 = e3.slice(0, 32), r3 = e3.length; 16 !== r3 && 24 !== r3 && 32 !== r3; )
            e3[r3++] = 0;
          for (r3 = 0; r3 < e3.length; r3 += 4)
            f2[r3 >> 2] = Ze(e3, r3);
          for (r3 = 0; r3 < 256; r3++)
            A2[0][r3] = M2(0, r3), A2[1][r3] = M2(1, r3);
          for (r3 = 0; r3 < 256; r3++)
            p2 = A2[1][r3], y2 = E2(p2), b2 = P2(p2), S2[0][r3] = p2 + (y2 << 8) + (b2 << 16) + (b2 << 24), S2[2][r3] = y2 + (b2 << 8) + (p2 << 16) + (b2 << 24), p2 = A2[0][r3], y2 = E2(p2), b2 = P2(p2), S2[1][r3] = b2 + (b2 << 8) + (y2 << 16) + (p2 << 24), S2[3][r3] = y2 + (p2 << 8) + (b2 << 16) + (y2 << 24);
          for (d2 = f2.length / 2, r3 = 0; r3 < d2; r3++)
            a3 = f2[r3 + r3], u2[r3] = a3, s3 = f2[r3 + r3 + 1], h2[r3] = s3, l2[d2 - r3 - 1] = x2(a3, s3);
          for (r3 = 0; r3 < 40; r3 += 2)
            a3 = 16843009 * r3, s3 = a3 + 16843009, a3 = C2(a3, u2), s3 = $e(C2(s3, h2), 8), i2[r3] = a3 + s3 & Ve, i2[r3 + 1] = $e(a3 + 2 * s3, 9);
          for (r3 = 0; r3 < 256; r3++)
            switch (a3 = s3 = o3 = c3 = r3, d2) {
              case 4:
                a3 = A2[1][a3] ^ Xe(l2[3], 0), s3 = A2[0][s3] ^ Xe(l2[3], 1), o3 = A2[0][o3] ^ Xe(l2[3], 2), c3 = A2[1][c3] ^ Xe(l2[3], 3);
              case 3:
                a3 = A2[1][a3] ^ Xe(l2[2], 0), s3 = A2[1][s3] ^ Xe(l2[2], 1), o3 = A2[0][o3] ^ Xe(l2[2], 2), c3 = A2[0][c3] ^ Xe(l2[2], 3);
              case 2:
                n2[0][r3] = S2[0][A2[0][A2[0][a3] ^ Xe(l2[1], 0)] ^ Xe(l2[0], 0)], n2[1][r3] = S2[1][A2[0][A2[1][s3] ^ Xe(l2[1], 1)] ^ Xe(l2[0], 1)], n2[2][r3] = S2[2][A2[1][A2[0][o3] ^ Xe(l2[1], 2)] ^ Xe(l2[0], 2)], n2[3][r3] = S2[3][A2[1][A2[1][c3] ^ Xe(l2[1], 3)] ^ Xe(l2[0], 3)];
            }
        }, close: function() {
          i2 = [], n2 = [[], [], [], []];
        }, encrypt: function(e4, n3) {
          t2 = e4, r2 = n3;
          const a3 = [Ze(t2, r2) ^ i2[0], Ze(t2, r2 + 4) ^ i2[1], Ze(t2, r2 + 8) ^ i2[2], Ze(t2, r2 + 12) ^ i2[3]];
          for (let e5 = 0; e5 < 8; e5++)
            o2(e5, a3);
          return Ye(t2, r2, a3[2] ^ i2[4]), Ye(t2, r2 + 4, a3[3] ^ i2[5]), Ye(t2, r2 + 8, a3[0] ^ i2[6]), Ye(t2, r2 + 12, a3[1] ^ i2[7]), r2 += 16, t2;
        }, decrypt: function(e4, n3) {
          t2 = e4, r2 = n3;
          const a3 = [Ze(t2, r2) ^ i2[4], Ze(t2, r2 + 4) ^ i2[5], Ze(t2, r2 + 8) ^ i2[6], Ze(t2, r2 + 12) ^ i2[7]];
          for (let e5 = 7; e5 >= 0; e5--)
            c2(e5, a3);
          Ye(t2, r2, a3[2] ^ i2[0]), Ye(t2, r2 + 4, a3[3] ^ i2[1]), Ye(t2, r2 + 8, a3[0] ^ i2[2]), Ye(t2, r2 + 12, a3[1] ^ i2[3]), r2 += 16;
        }, finalize: function() {
          return t2;
        } };
      }(), this.tf.open(Array.from(e2), 0), this.encrypt = function(e3) {
        return this.tf.encrypt(Array.from(e3), 0);
      };
    }
    function Je() {
    }
    function et(e2) {
      this.bf = new Je(), this.bf.init(e2), this.encrypt = function(e3) {
        return this.bf.encryptBlock(e3);
      };
    }
    Qe.keySize = Qe.prototype.keySize = 32, Qe.blockSize = Qe.prototype.blockSize = 16, Je.prototype.BLOCKSIZE = 8, Je.prototype.SBOXES = [[3509652390, 2564797868, 805139163, 3491422135, 3101798381, 1780907670, 3128725573, 4046225305, 614570311, 3012652279, 134345442, 2240740374, 1667834072, 1901547113, 2757295779, 4103290238, 227898511, 1921955416, 1904987480, 2182433518, 2069144605, 3260701109, 2620446009, 720527379, 3318853667, 677414384, 3393288472, 3101374703, 2390351024, 1614419982, 1822297739, 2954791486, 3608508353, 3174124327, 2024746970, 1432378464, 3864339955, 2857741204, 1464375394, 1676153920, 1439316330, 715854006, 3033291828, 289532110, 2706671279, 2087905683, 3018724369, 1668267050, 732546397, 1947742710, 3462151702, 2609353502, 2950085171, 1814351708, 2050118529, 680887927, 999245976, 1800124847, 3300911131, 1713906067, 1641548236, 4213287313, 1216130144, 1575780402, 4018429277, 3917837745, 3693486850, 3949271944, 596196993, 3549867205, 258830323, 2213823033, 772490370, 2760122372, 1774776394, 2652871518, 566650946, 4142492826, 1728879713, 2882767088, 1783734482, 3629395816, 2517608232, 2874225571, 1861159788, 326777828, 3124490320, 2130389656, 2716951837, 967770486, 1724537150, 2185432712, 2364442137, 1164943284, 2105845187, 998989502, 3765401048, 2244026483, 1075463327, 1455516326, 1322494562, 910128902, 469688178, 1117454909, 936433444, 3490320968, 3675253459, 1240580251, 122909385, 2157517691, 634681816, 4142456567, 3825094682, 3061402683, 2540495037, 79693498, 3249098678, 1084186820, 1583128258, 426386531, 1761308591, 1047286709, 322548459, 995290223, 1845252383, 2603652396, 3431023940, 2942221577, 3202600964, 3727903485, 1712269319, 422464435, 3234572375, 1170764815, 3523960633, 3117677531, 1434042557, 442511882, 3600875718, 1076654713, 1738483198, 4213154764, 2393238008, 3677496056, 1014306527, 4251020053, 793779912, 2902807211, 842905082, 4246964064, 1395751752, 1040244610, 2656851899, 3396308128, 445077038, 3742853595, 3577915638, 679411651, 2892444358, 2354009459, 1767581616, 3150600392, 3791627101, 3102740896, 284835224, 4246832056, 1258075500, 768725851, 2589189241, 3069724005, 3532540348, 1274779536, 3789419226, 2764799539, 1660621633, 3471099624, 4011903706, 913787905, 3497959166, 737222580, 2514213453, 2928710040, 3937242737, 1804850592, 3499020752, 2949064160, 2386320175, 2390070455, 2415321851, 4061277028, 2290661394, 2416832540, 1336762016, 1754252060, 3520065937, 3014181293, 791618072, 3188594551, 3933548030, 2332172193, 3852520463, 3043980520, 413987798, 3465142937, 3030929376, 4245938359, 2093235073, 3534596313, 375366246, 2157278981, 2479649556, 555357303, 3870105701, 2008414854, 3344188149, 4221384143, 3956125452, 2067696032, 3594591187, 2921233993, 2428461, 544322398, 577241275, 1471733935, 610547355, 4027169054, 1432588573, 1507829418, 2025931657, 3646575487, 545086370, 48609733, 2200306550, 1653985193, 298326376, 1316178497, 3007786442, 2064951626, 458293330, 2589141269, 3591329599, 3164325604, 727753846, 2179363840, 146436021, 1461446943, 4069977195, 705550613, 3059967265, 3887724982, 4281599278, 3313849956, 1404054877, 2845806497, 146425753, 1854211946], [1266315497, 3048417604, 3681880366, 3289982499, 290971e4, 1235738493, 2632868024, 2414719590, 3970600049, 1771706367, 1449415276, 3266420449, 422970021, 1963543593, 2690192192, 3826793022, 1062508698, 1531092325, 1804592342, 2583117782, 2714934279, 4024971509, 1294809318, 4028980673, 1289560198, 2221992742, 1669523910, 35572830, 157838143, 1052438473, 1016535060, 1802137761, 1753167236, 1386275462, 3080475397, 2857371447, 1040679964, 2145300060, 2390574316, 1461121720, 2956646967, 4031777805, 4028374788, 33600511, 2920084762, 1018524850, 629373528, 3691585981, 3515945977, 2091462646, 2486323059, 586499841, 988145025, 935516892, 3367335476, 2599673255, 2839830854, 265290510, 3972581182, 2759138881, 3795373465, 1005194799, 847297441, 406762289, 1314163512, 1332590856, 1866599683, 4127851711, 750260880, 613907577, 1450815602, 3165620655, 3734664991, 3650291728, 3012275730, 3704569646, 1427272223, 778793252, 1343938022, 2676280711, 2052605720, 1946737175, 3164576444, 3914038668, 3967478842, 3682934266, 1661551462, 3294938066, 4011595847, 840292616, 3712170807, 616741398, 312560963, 711312465, 1351876610, 322626781, 1910503582, 271666773, 2175563734, 1594956187, 70604529, 3617834859, 1007753275, 1495573769, 4069517037, 2549218298, 2663038764, 504708206, 2263041392, 3941167025, 2249088522, 1514023603, 1998579484, 1312622330, 694541497, 2582060303, 2151582166, 1382467621, 776784248, 2618340202, 3323268794, 2497899128, 2784771155, 503983604, 4076293799, 907881277, 423175695, 432175456, 1378068232, 4145222326, 3954048622, 3938656102, 3820766613, 2793130115, 2977904593, 26017576, 3274890735, 3194772133, 1700274565, 1756076034, 4006520079, 3677328699, 720338349, 1533947780, 354530856, 688349552, 3973924725, 1637815568, 332179504, 3949051286, 53804574, 2852348879, 3044236432, 1282449977, 3583942155, 3416972820, 4006381244, 1617046695, 2628476075, 3002303598, 1686838959, 431878346, 2686675385, 1700445008, 1080580658, 1009431731, 832498133, 3223435511, 2605976345, 2271191193, 2516031870, 1648197032, 4164389018, 2548247927, 300782431, 375919233, 238389289, 3353747414, 2531188641, 2019080857, 1475708069, 455242339, 2609103871, 448939670, 3451063019, 1395535956, 2413381860, 1841049896, 1491858159, 885456874, 4264095073, 4001119347, 1565136089, 3898914787, 1108368660, 540939232, 1173283510, 2745871338, 3681308437, 4207628240, 3343053890, 4016749493, 1699691293, 1103962373, 3625875870, 2256883143, 3830138730, 1031889488, 3479347698, 1535977030, 4236805024, 3251091107, 2132092099, 1774941330, 1199868427, 1452454533, 157007616, 2904115357, 342012276, 595725824, 1480756522, 206960106, 497939518, 591360097, 863170706, 2375253569, 3596610801, 1814182875, 2094937945, 3421402208, 1082520231, 3463918190, 2785509508, 435703966, 3908032597, 1641649973, 2842273706, 3305899714, 1510255612, 2148256476, 2655287854, 3276092548, 4258621189, 236887753, 3681803219, 274041037, 1734335097, 3815195456, 3317970021, 1899903192, 1026095262, 4050517792, 356393447, 2410691914, 3873677099, 3682840055], [3913112168, 2491498743, 4132185628, 2489919796, 1091903735, 1979897079, 3170134830, 3567386728, 3557303409, 857797738, 1136121015, 1342202287, 507115054, 2535736646, 337727348, 3213592640, 1301675037, 2528481711, 1895095763, 1721773893, 3216771564, 62756741, 2142006736, 835421444, 2531993523, 1442658625, 3659876326, 2882144922, 676362277, 1392781812, 170690266, 3921047035, 1759253602, 3611846912, 1745797284, 664899054, 1329594018, 3901205900, 3045908486, 2062866102, 2865634940, 3543621612, 3464012697, 1080764994, 553557557, 3656615353, 3996768171, 991055499, 499776247, 1265440854, 648242737, 3940784050, 980351604, 3713745714, 1749149687, 3396870395, 4211799374, 3640570775, 1161844396, 3125318951, 1431517754, 545492359, 4268468663, 3499529547, 1437099964, 2702547544, 3433638243, 2581715763, 2787789398, 1060185593, 1593081372, 2418618748, 4260947970, 69676912, 2159744348, 86519011, 2512459080, 3838209314, 1220612927, 3339683548, 133810670, 1090789135, 1078426020, 1569222167, 845107691, 3583754449, 4072456591, 1091646820, 628848692, 1613405280, 3757631651, 526609435, 236106946, 48312990, 2942717905, 3402727701, 1797494240, 859738849, 992217954, 4005476642, 2243076622, 3870952857, 3732016268, 765654824, 3490871365, 2511836413, 1685915746, 3888969200, 1414112111, 2273134842, 3281911079, 4080962846, 172450625, 2569994100, 980381355, 4109958455, 2819808352, 2716589560, 2568741196, 3681446669, 3329971472, 1835478071, 660984891, 3704678404, 4045999559, 3422617507, 3040415634, 1762651403, 1719377915, 3470491036, 2693910283, 3642056355, 3138596744, 1364962596, 2073328063, 1983633131, 926494387, 3423689081, 2150032023, 4096667949, 1749200295, 3328846651, 309677260, 2016342300, 1779581495, 3079819751, 111262694, 1274766160, 443224088, 298511866, 1025883608, 3806446537, 1145181785, 168956806, 3641502830, 3584813610, 1689216846, 3666258015, 3200248200, 1692713982, 2646376535, 4042768518, 1618508792, 1610833997, 3523052358, 4130873264, 2001055236, 3610705100, 2202168115, 4028541809, 2961195399, 1006657119, 2006996926, 3186142756, 1430667929, 3210227297, 1314452623, 4074634658, 4101304120, 2273951170, 1399257539, 3367210612, 3027628629, 1190975929, 2062231137, 2333990788, 2221543033, 2438960610, 1181637006, 548689776, 2362791313, 3372408396, 3104550113, 3145860560, 296247880, 1970579870, 3078560182, 3769228297, 1714227617, 3291629107, 3898220290, 166772364, 1251581989, 493813264, 448347421, 195405023, 2709975567, 677966185, 3703036547, 1463355134, 2715995803, 1338867538, 1343315457, 2802222074, 2684532164, 233230375, 2599980071, 2000651841, 3277868038, 1638401717, 4028070440, 3237316320, 6314154, 819756386, 300326615, 590932579, 1405279636, 3267499572, 3150704214, 2428286686, 3959192993, 3461946742, 1862657033, 1266418056, 963775037, 2089974820, 2263052895, 1917689273, 448879540, 3550394620, 3981727096, 150775221, 3627908307, 1303187396, 508620638, 2975983352, 2726630617, 1817252668, 1876281319, 1457606340, 908771278, 3720792119, 3617206836, 2455994898, 1729034894, 1080033504], [976866871, 3556439503, 2881648439, 1522871579, 1555064734, 1336096578, 3548522304, 2579274686, 3574697629, 3205460757, 3593280638, 3338716283, 3079412587, 564236357, 2993598910, 1781952180, 1464380207, 3163844217, 3332601554, 1699332808, 1393555694, 1183702653, 3581086237, 1288719814, 691649499, 2847557200, 2895455976, 3193889540, 2717570544, 1781354906, 1676643554, 2592534050, 3230253752, 1126444790, 2770207658, 2633158820, 2210423226, 2615765581, 2414155088, 3127139286, 673620729, 2805611233, 1269405062, 4015350505, 3341807571, 4149409754, 1057255273, 2012875353, 2162469141, 2276492801, 2601117357, 993977747, 3918593370, 2654263191, 753973209, 36408145, 2530585658, 25011837, 3520020182, 2088578344, 530523599, 2918365339, 1524020338, 1518925132, 3760827505, 3759777254, 1202760957, 3985898139, 3906192525, 674977740, 4174734889, 2031300136, 2019492241, 3983892565, 4153806404, 3822280332, 352677332, 2297720250, 60907813, 90501309, 3286998549, 1016092578, 2535922412, 2839152426, 457141659, 509813237, 4120667899, 652014361, 1966332200, 2975202805, 55981186, 2327461051, 676427537, 3255491064, 2882294119, 3433927263, 1307055953, 942726286, 933058658, 2468411793, 3933900994, 4215176142, 1361170020, 2001714738, 2830558078, 3274259782, 1222529897, 1679025792, 2729314320, 3714953764, 1770335741, 151462246, 3013232138, 1682292957, 1483529935, 471910574, 1539241949, 458788160, 3436315007, 1807016891, 3718408830, 978976581, 1043663428, 3165965781, 1927990952, 4200891579, 2372276910, 3208408903, 3533431907, 1412390302, 2931980059, 4132332400, 1947078029, 3881505623, 4168226417, 2941484381, 1077988104, 1320477388, 886195818, 18198404, 3786409e3, 2509781533, 112762804, 3463356488, 1866414978, 891333506, 18488651, 661792760, 1628790961, 3885187036, 3141171499, 876946877, 2693282273, 1372485963, 791857591, 2686433993, 3759982718, 3167212022, 3472953795, 2716379847, 445679433, 3561995674, 3504004811, 3574258232, 54117162, 3331405415, 2381918588, 3769707343, 4154350007, 1140177722, 4074052095, 668550556, 3214352940, 367459370, 261225585, 2610173221, 4209349473, 3468074219, 3265815641, 314222801, 3066103646, 3808782860, 282218597, 3406013506, 3773591054, 379116347, 1285071038, 846784868, 2669647154, 3771962079, 3550491691, 2305946142, 453669953, 1268987020, 3317592352, 3279303384, 3744833421, 2610507566, 3859509063, 266596637, 3847019092, 517658769, 3462560207, 3443424879, 370717030, 4247526661, 2224018117, 4143653529, 4112773975, 2788324899, 2477274417, 1456262402, 2901442914, 1517677493, 1846949527, 2295493580, 3734397586, 2176403920, 1280348187, 1908823572, 3871786941, 846861322, 1172426758, 3287448474, 3383383037, 1655181056, 3139813346, 901632758, 1897031941, 2986607138, 3066810236, 3447102507, 1393639104, 373351379, 950779232, 625454576, 3124240540, 4148612726, 2007998917, 544563296, 2244738638, 2330496472, 2058025392, 1291430526, 424198748, 50039436, 29584100, 3605783033, 2429876329, 2791104160, 1057563949, 3255363231, 3075367218, 3463963227, 1469046755, 985887462]], Je.prototype.PARRAY = [608135816, 2242054355, 320440878, 57701188, 2752067618, 698298832, 137296536, 3964562569, 1160258022, 953160567, 3193202383, 887688300, 3232508343, 3380367581, 1065670069, 3041331479, 2450970073, 2306472731], Je.prototype.NN = 16, Je.prototype._clean = function(e2) {
      if (e2 < 0) {
        e2 = (2147483647 & e2) + 2147483648;
      }
      return e2;
    }, Je.prototype._F = function(e2) {
      let t2;
      const r2 = 255 & e2, i2 = 255 & (e2 >>>= 8), n2 = 255 & (e2 >>>= 8), a2 = 255 & (e2 >>>= 8);
      return t2 = this.sboxes[0][a2] + this.sboxes[1][n2], t2 ^= this.sboxes[2][i2], t2 += this.sboxes[3][r2], t2;
    }, Je.prototype._encryptBlock = function(e2) {
      let t2, r2 = e2[0], i2 = e2[1];
      for (t2 = 0; t2 < this.NN; ++t2) {
        r2 ^= this.parray[t2], i2 = this._F(r2) ^ i2;
        const e3 = r2;
        r2 = i2, i2 = e3;
      }
      r2 ^= this.parray[this.NN + 0], i2 ^= this.parray[this.NN + 1], e2[0] = this._clean(i2), e2[1] = this._clean(r2);
    }, Je.prototype.encryptBlock = function(e2) {
      let t2;
      const r2 = [0, 0], i2 = this.BLOCKSIZE / 2;
      for (t2 = 0; t2 < this.BLOCKSIZE / 2; ++t2)
        r2[0] = r2[0] << 8 | 255 & e2[t2 + 0], r2[1] = r2[1] << 8 | 255 & e2[t2 + i2];
      this._encryptBlock(r2);
      const n2 = [];
      for (t2 = 0; t2 < this.BLOCKSIZE / 2; ++t2)
        n2[t2 + 0] = r2[0] >>> 24 - 8 * t2 & 255, n2[t2 + i2] = r2[1] >>> 24 - 8 * t2 & 255;
      return n2;
    }, Je.prototype._decryptBlock = function(e2) {
      let t2, r2 = e2[0], i2 = e2[1];
      for (t2 = this.NN + 1; t2 > 1; --t2) {
        r2 ^= this.parray[t2], i2 = this._F(r2) ^ i2;
        const e3 = r2;
        r2 = i2, i2 = e3;
      }
      r2 ^= this.parray[1], i2 ^= this.parray[0], e2[0] = this._clean(i2), e2[1] = this._clean(r2);
    }, Je.prototype.init = function(e2) {
      let t2, r2 = 0;
      for (this.parray = [], t2 = 0; t2 < this.NN + 2; ++t2) {
        let i3 = 0;
        for (let t3 = 0; t3 < 4; ++t3)
          i3 = i3 << 8 | 255 & e2[r2], ++r2 >= e2.length && (r2 = 0);
        this.parray[t2] = this.PARRAY[t2] ^ i3;
      }
      for (this.sboxes = [], t2 = 0; t2 < 4; ++t2)
        for (this.sboxes[t2] = [], r2 = 0; r2 < 256; ++r2)
          this.sboxes[t2][r2] = this.SBOXES[t2][r2];
      const i2 = [0, 0];
      for (t2 = 0; t2 < this.NN + 2; t2 += 2)
        this._encryptBlock(i2), this.parray[t2 + 0] = i2[0], this.parray[t2 + 1] = i2[1];
      for (t2 = 0; t2 < 4; ++t2)
        for (r2 = 0; r2 < 256; r2 += 2)
          this._encryptBlock(i2), this.sboxes[t2][r2 + 0] = i2[0], this.sboxes[t2][r2 + 1] = i2[1];
    }, et.keySize = et.prototype.keySize = 16, et.blockSize = et.prototype.blockSize = 8;
    var tt = Ne(128);
    var rt = Ne(192);
    var it = Ne(256);
    var nt = /* @__PURE__ */ Object.freeze({ __proto__: null, aes128: tt, aes192: rt, aes256: it, des: function(e2) {
      this.key = e2, this.encrypt = function(e3, t2) {
        return je(Le(this.key), e3, true, 0, null, t2);
      }, this.decrypt = function(e3, t2) {
        return je(Le(this.key), e3, false, 0, null, t2);
      };
    }, tripledes: We, cast5: Ge, twofish: Qe, blowfish: et, idea: function() {
      throw Error("IDEA symmetric-key algorithm not implemented");
    } });
    var at = function(e2, t2, r2) {
      ;
      var i2 = 0, n2 = 0, a2 = 0, s2 = 0, o2 = 0, c2 = 0, u2 = 0;
      var h2 = 0, f2 = 0, d2 = 0, l2 = 0, p2 = 0, y2 = 0, b2 = 0, m2 = 0, g2 = 0, w2 = 0;
      var v2 = new e2.Uint8Array(r2);
      function _2(e3, t3, r3, c3, u3, h3, f3, d3, l3, p3, y3, b3, m3, g3, w3, v6) {
        e3 = e3 | 0;
        t3 = t3 | 0;
        r3 = r3 | 0;
        c3 = c3 | 0;
        u3 = u3 | 0;
        h3 = h3 | 0;
        f3 = f3 | 0;
        d3 = d3 | 0;
        l3 = l3 | 0;
        p3 = p3 | 0;
        y3 = y3 | 0;
        b3 = b3 | 0;
        m3 = m3 | 0;
        g3 = g3 | 0;
        w3 = w3 | 0;
        v6 = v6 | 0;
        var _3 = 0, k3 = 0, A3 = 0, S3 = 0, E3 = 0, P3 = 0, x3 = 0, M3 = 0, C3 = 0, K3 = 0, D3 = 0, R3 = 0, U2 = 0, I2 = 0, B2 = 0, T2 = 0, z2 = 0, q2 = 0, O2 = 0, F2 = 0, N2 = 0, j2 = 0, L2 = 0, W2 = 0, H2 = 0, G2 = 0, V2 = 0, $2 = 0, Z2 = 0, Y2 = 0, X2 = 0, Q2 = 0, J2 = 0, ee2 = 0, te2 = 0, re2 = 0, ie2 = 0, ne2 = 0, ae2 = 0, se2 = 0, oe2 = 0, ce2 = 0, ue2 = 0, he2 = 0, fe2 = 0, de2 = 0, le2 = 0, pe2 = 0, ye2 = 0, be2 = 0, me2 = 0, ge2 = 0, we2 = 0, ve2 = 0, _e2 = 0, ke2 = 0, Ae2 = 0, Se2 = 0, Ee2 = 0, Pe2 = 0, xe2 = 0, Me2 = 0, Ce2 = 0, Ke2 = 0, De2 = 0, Re2 = 0, Ue2 = 0, Ie2 = 0, Be2 = 0, Te2 = 0, ze2 = 0;
        _3 = i2;
        k3 = n2;
        A3 = a2;
        S3 = s2;
        E3 = o2;
        x3 = e3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = t3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = r3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = c3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = u3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = h3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = f3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = d3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = l3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = p3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = y3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = b3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = m3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = g3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = w3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        x3 = v6 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = g3 ^ l3 ^ r3 ^ e3;
        M3 = P3 << 1 | P3 >>> 31;
        x3 = M3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = w3 ^ p3 ^ c3 ^ t3;
        C3 = P3 << 1 | P3 >>> 31;
        x3 = C3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = v6 ^ y3 ^ u3 ^ r3;
        K3 = P3 << 1 | P3 >>> 31;
        x3 = K3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = M3 ^ b3 ^ h3 ^ c3;
        D3 = P3 << 1 | P3 >>> 31;
        x3 = D3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | ~k3 & S3) + 1518500249 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = C3 ^ m3 ^ f3 ^ u3;
        R3 = P3 << 1 | P3 >>> 31;
        x3 = R3 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = K3 ^ g3 ^ d3 ^ h3;
        U2 = P3 << 1 | P3 >>> 31;
        x3 = U2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = D3 ^ w3 ^ l3 ^ f3;
        I2 = P3 << 1 | P3 >>> 31;
        x3 = I2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = R3 ^ v6 ^ p3 ^ d3;
        B2 = P3 << 1 | P3 >>> 31;
        x3 = B2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = U2 ^ M3 ^ y3 ^ l3;
        T2 = P3 << 1 | P3 >>> 31;
        x3 = T2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = I2 ^ C3 ^ b3 ^ p3;
        z2 = P3 << 1 | P3 >>> 31;
        x3 = z2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = B2 ^ K3 ^ m3 ^ y3;
        q2 = P3 << 1 | P3 >>> 31;
        x3 = q2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = T2 ^ D3 ^ g3 ^ b3;
        O2 = P3 << 1 | P3 >>> 31;
        x3 = O2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = z2 ^ R3 ^ w3 ^ m3;
        F2 = P3 << 1 | P3 >>> 31;
        x3 = F2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = q2 ^ U2 ^ v6 ^ g3;
        N2 = P3 << 1 | P3 >>> 31;
        x3 = N2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = O2 ^ I2 ^ M3 ^ w3;
        j2 = P3 << 1 | P3 >>> 31;
        x3 = j2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = F2 ^ B2 ^ C3 ^ v6;
        L2 = P3 << 1 | P3 >>> 31;
        x3 = L2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = N2 ^ T2 ^ K3 ^ M3;
        W2 = P3 << 1 | P3 >>> 31;
        x3 = W2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = j2 ^ z2 ^ D3 ^ C3;
        H2 = P3 << 1 | P3 >>> 31;
        x3 = H2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = L2 ^ q2 ^ R3 ^ K3;
        G2 = P3 << 1 | P3 >>> 31;
        x3 = G2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = W2 ^ O2 ^ U2 ^ D3;
        V2 = P3 << 1 | P3 >>> 31;
        x3 = V2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = H2 ^ F2 ^ I2 ^ R3;
        $2 = P3 << 1 | P3 >>> 31;
        x3 = $2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = G2 ^ N2 ^ B2 ^ U2;
        Z2 = P3 << 1 | P3 >>> 31;
        x3 = Z2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = V2 ^ j2 ^ T2 ^ I2;
        Y2 = P3 << 1 | P3 >>> 31;
        x3 = Y2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = $2 ^ L2 ^ z2 ^ B2;
        X2 = P3 << 1 | P3 >>> 31;
        x3 = X2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) + 1859775393 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Z2 ^ W2 ^ q2 ^ T2;
        Q2 = P3 << 1 | P3 >>> 31;
        x3 = Q2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Y2 ^ H2 ^ O2 ^ z2;
        J2 = P3 << 1 | P3 >>> 31;
        x3 = J2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = X2 ^ G2 ^ F2 ^ q2;
        ee2 = P3 << 1 | P3 >>> 31;
        x3 = ee2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Q2 ^ V2 ^ N2 ^ O2;
        te2 = P3 << 1 | P3 >>> 31;
        x3 = te2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = J2 ^ $2 ^ j2 ^ F2;
        re2 = P3 << 1 | P3 >>> 31;
        x3 = re2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ee2 ^ Z2 ^ L2 ^ N2;
        ie2 = P3 << 1 | P3 >>> 31;
        x3 = ie2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = te2 ^ Y2 ^ W2 ^ j2;
        ne2 = P3 << 1 | P3 >>> 31;
        x3 = ne2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = re2 ^ X2 ^ H2 ^ L2;
        ae2 = P3 << 1 | P3 >>> 31;
        x3 = ae2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ie2 ^ Q2 ^ G2 ^ W2;
        se2 = P3 << 1 | P3 >>> 31;
        x3 = se2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ne2 ^ J2 ^ V2 ^ H2;
        oe2 = P3 << 1 | P3 >>> 31;
        x3 = oe2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ae2 ^ ee2 ^ $2 ^ G2;
        ce2 = P3 << 1 | P3 >>> 31;
        x3 = ce2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = se2 ^ te2 ^ Z2 ^ V2;
        ue2 = P3 << 1 | P3 >>> 31;
        x3 = ue2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = oe2 ^ re2 ^ Y2 ^ $2;
        he2 = P3 << 1 | P3 >>> 31;
        x3 = he2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ce2 ^ ie2 ^ X2 ^ Z2;
        fe2 = P3 << 1 | P3 >>> 31;
        x3 = fe2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ue2 ^ ne2 ^ Q2 ^ Y2;
        de2 = P3 << 1 | P3 >>> 31;
        x3 = de2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = he2 ^ ae2 ^ J2 ^ X2;
        le2 = P3 << 1 | P3 >>> 31;
        x3 = le2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = fe2 ^ se2 ^ ee2 ^ Q2;
        pe2 = P3 << 1 | P3 >>> 31;
        x3 = pe2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = de2 ^ oe2 ^ te2 ^ J2;
        ye2 = P3 << 1 | P3 >>> 31;
        x3 = ye2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = le2 ^ ce2 ^ re2 ^ ee2;
        be2 = P3 << 1 | P3 >>> 31;
        x3 = be2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = pe2 ^ ue2 ^ ie2 ^ te2;
        me2 = P3 << 1 | P3 >>> 31;
        x3 = me2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 & A3 | k3 & S3 | A3 & S3) - 1894007588 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ye2 ^ he2 ^ ne2 ^ re2;
        ge2 = P3 << 1 | P3 >>> 31;
        x3 = ge2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = be2 ^ fe2 ^ ae2 ^ ie2;
        we2 = P3 << 1 | P3 >>> 31;
        x3 = we2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = me2 ^ de2 ^ se2 ^ ne2;
        ve2 = P3 << 1 | P3 >>> 31;
        x3 = ve2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ge2 ^ le2 ^ oe2 ^ ae2;
        _e2 = P3 << 1 | P3 >>> 31;
        x3 = _e2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = we2 ^ pe2 ^ ce2 ^ se2;
        ke2 = P3 << 1 | P3 >>> 31;
        x3 = ke2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ve2 ^ ye2 ^ ue2 ^ oe2;
        Ae2 = P3 << 1 | P3 >>> 31;
        x3 = Ae2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = _e2 ^ be2 ^ he2 ^ ce2;
        Se2 = P3 << 1 | P3 >>> 31;
        x3 = Se2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = ke2 ^ me2 ^ fe2 ^ ue2;
        Ee2 = P3 << 1 | P3 >>> 31;
        x3 = Ee2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Ae2 ^ ge2 ^ de2 ^ he2;
        Pe2 = P3 << 1 | P3 >>> 31;
        x3 = Pe2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Se2 ^ we2 ^ le2 ^ fe2;
        xe2 = P3 << 1 | P3 >>> 31;
        x3 = xe2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Ee2 ^ ve2 ^ pe2 ^ de2;
        Me2 = P3 << 1 | P3 >>> 31;
        x3 = Me2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Pe2 ^ _e2 ^ ye2 ^ le2;
        Ce2 = P3 << 1 | P3 >>> 31;
        x3 = Ce2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = xe2 ^ ke2 ^ be2 ^ pe2;
        Ke2 = P3 << 1 | P3 >>> 31;
        x3 = Ke2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Me2 ^ Ae2 ^ me2 ^ ye2;
        De2 = P3 << 1 | P3 >>> 31;
        x3 = De2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Ce2 ^ Se2 ^ ge2 ^ be2;
        Re2 = P3 << 1 | P3 >>> 31;
        x3 = Re2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Ke2 ^ Ee2 ^ we2 ^ me2;
        Ue2 = P3 << 1 | P3 >>> 31;
        x3 = Ue2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = De2 ^ Pe2 ^ ve2 ^ ge2;
        Ie2 = P3 << 1 | P3 >>> 31;
        x3 = Ie2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Re2 ^ xe2 ^ _e2 ^ we2;
        Be2 = P3 << 1 | P3 >>> 31;
        x3 = Be2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Ue2 ^ Me2 ^ ke2 ^ ve2;
        Te2 = P3 << 1 | P3 >>> 31;
        x3 = Te2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        P3 = Ie2 ^ Ce2 ^ Ae2 ^ _e2;
        ze2 = P3 << 1 | P3 >>> 31;
        x3 = ze2 + (_3 << 5 | _3 >>> 27) + E3 + (k3 ^ A3 ^ S3) - 899497514 | 0;
        E3 = S3;
        S3 = A3;
        A3 = k3 << 30 | k3 >>> 2;
        k3 = _3;
        _3 = x3;
        i2 = i2 + _3 | 0;
        n2 = n2 + k3 | 0;
        a2 = a2 + A3 | 0;
        s2 = s2 + S3 | 0;
        o2 = o2 + E3 | 0;
      }
      function k2(e3) {
        e3 = e3 | 0;
        _2(v2[e3 | 0] << 24 | v2[e3 | 1] << 16 | v2[e3 | 2] << 8 | v2[e3 | 3], v2[e3 | 4] << 24 | v2[e3 | 5] << 16 | v2[e3 | 6] << 8 | v2[e3 | 7], v2[e3 | 8] << 24 | v2[e3 | 9] << 16 | v2[e3 | 10] << 8 | v2[e3 | 11], v2[e3 | 12] << 24 | v2[e3 | 13] << 16 | v2[e3 | 14] << 8 | v2[e3 | 15], v2[e3 | 16] << 24 | v2[e3 | 17] << 16 | v2[e3 | 18] << 8 | v2[e3 | 19], v2[e3 | 20] << 24 | v2[e3 | 21] << 16 | v2[e3 | 22] << 8 | v2[e3 | 23], v2[e3 | 24] << 24 | v2[e3 | 25] << 16 | v2[e3 | 26] << 8 | v2[e3 | 27], v2[e3 | 28] << 24 | v2[e3 | 29] << 16 | v2[e3 | 30] << 8 | v2[e3 | 31], v2[e3 | 32] << 24 | v2[e3 | 33] << 16 | v2[e3 | 34] << 8 | v2[e3 | 35], v2[e3 | 36] << 24 | v2[e3 | 37] << 16 | v2[e3 | 38] << 8 | v2[e3 | 39], v2[e3 | 40] << 24 | v2[e3 | 41] << 16 | v2[e3 | 42] << 8 | v2[e3 | 43], v2[e3 | 44] << 24 | v2[e3 | 45] << 16 | v2[e3 | 46] << 8 | v2[e3 | 47], v2[e3 | 48] << 24 | v2[e3 | 49] << 16 | v2[e3 | 50] << 8 | v2[e3 | 51], v2[e3 | 52] << 24 | v2[e3 | 53] << 16 | v2[e3 | 54] << 8 | v2[e3 | 55], v2[e3 | 56] << 24 | v2[e3 | 57] << 16 | v2[e3 | 58] << 8 | v2[e3 | 59], v2[e3 | 60] << 24 | v2[e3 | 61] << 16 | v2[e3 | 62] << 8 | v2[e3 | 63]);
      }
      function A2(e3) {
        e3 = e3 | 0;
        v2[e3 | 0] = i2 >>> 24;
        v2[e3 | 1] = i2 >>> 16 & 255;
        v2[e3 | 2] = i2 >>> 8 & 255;
        v2[e3 | 3] = i2 & 255;
        v2[e3 | 4] = n2 >>> 24;
        v2[e3 | 5] = n2 >>> 16 & 255;
        v2[e3 | 6] = n2 >>> 8 & 255;
        v2[e3 | 7] = n2 & 255;
        v2[e3 | 8] = a2 >>> 24;
        v2[e3 | 9] = a2 >>> 16 & 255;
        v2[e3 | 10] = a2 >>> 8 & 255;
        v2[e3 | 11] = a2 & 255;
        v2[e3 | 12] = s2 >>> 24;
        v2[e3 | 13] = s2 >>> 16 & 255;
        v2[e3 | 14] = s2 >>> 8 & 255;
        v2[e3 | 15] = s2 & 255;
        v2[e3 | 16] = o2 >>> 24;
        v2[e3 | 17] = o2 >>> 16 & 255;
        v2[e3 | 18] = o2 >>> 8 & 255;
        v2[e3 | 19] = o2 & 255;
      }
      function S2() {
        i2 = 1732584193;
        n2 = 4023233417;
        a2 = 2562383102;
        s2 = 271733878;
        o2 = 3285377520;
        c2 = u2 = 0;
      }
      function E2(e3, t3, r3, h3, f3, d3, l3) {
        e3 = e3 | 0;
        t3 = t3 | 0;
        r3 = r3 | 0;
        h3 = h3 | 0;
        f3 = f3 | 0;
        d3 = d3 | 0;
        l3 = l3 | 0;
        i2 = e3;
        n2 = t3;
        a2 = r3;
        s2 = h3;
        o2 = f3;
        c2 = d3;
        u2 = l3;
      }
      function P2(e3, t3) {
        e3 = e3 | 0;
        t3 = t3 | 0;
        var r3 = 0;
        if (e3 & 63)
          return -1;
        while ((t3 | 0) >= 64) {
          k2(e3);
          e3 = e3 + 64 | 0;
          t3 = t3 - 64 | 0;
          r3 = r3 + 64 | 0;
        }
        c2 = c2 + r3 | 0;
        if (c2 >>> 0 < r3 >>> 0)
          u2 = u2 + 1 | 0;
        return r3 | 0;
      }
      function x2(e3, t3, r3) {
        e3 = e3 | 0;
        t3 = t3 | 0;
        r3 = r3 | 0;
        var i3 = 0, n3 = 0;
        if (e3 & 63)
          return -1;
        if (~r3) {
          if (r3 & 31)
            return -1;
        }
        if ((t3 | 0) >= 64) {
          i3 = P2(e3, t3) | 0;
          if ((i3 | 0) == -1)
            return -1;
          e3 = e3 + i3 | 0;
          t3 = t3 - i3 | 0;
        }
        i3 = i3 + t3 | 0;
        c2 = c2 + t3 | 0;
        if (c2 >>> 0 < t3 >>> 0)
          u2 = u2 + 1 | 0;
        v2[e3 | t3] = 128;
        if ((t3 | 0) >= 56) {
          for (n3 = t3 + 1 | 0; (n3 | 0) < 64; n3 = n3 + 1 | 0)
            v2[e3 | n3] = 0;
          k2(e3);
          t3 = 0;
          v2[e3 | 0] = 0;
        }
        for (n3 = t3 + 1 | 0; (n3 | 0) < 59; n3 = n3 + 1 | 0)
          v2[e3 | n3] = 0;
        v2[e3 | 56] = u2 >>> 21 & 255;
        v2[e3 | 57] = u2 >>> 13 & 255;
        v2[e3 | 58] = u2 >>> 5 & 255;
        v2[e3 | 59] = u2 << 3 & 255 | c2 >>> 29;
        v2[e3 | 60] = c2 >>> 21 & 255;
        v2[e3 | 61] = c2 >>> 13 & 255;
        v2[e3 | 62] = c2 >>> 5 & 255;
        v2[e3 | 63] = c2 << 3 & 255;
        k2(e3);
        if (~r3)
          A2(r3);
        return i3 | 0;
      }
      function M2() {
        i2 = h2;
        n2 = f2;
        a2 = d2;
        s2 = l2;
        o2 = p2;
        c2 = 64;
        u2 = 0;
      }
      function C2() {
        i2 = y2;
        n2 = b2;
        a2 = m2;
        s2 = g2;
        o2 = w2;
        c2 = 64;
        u2 = 0;
      }
      function K2(e3, t3, r3, v6, k3, A3, E3, P3, x3, M3, C3, K3, D3, R3, U2, I2) {
        e3 = e3 | 0;
        t3 = t3 | 0;
        r3 = r3 | 0;
        v6 = v6 | 0;
        k3 = k3 | 0;
        A3 = A3 | 0;
        E3 = E3 | 0;
        P3 = P3 | 0;
        x3 = x3 | 0;
        M3 = M3 | 0;
        C3 = C3 | 0;
        K3 = K3 | 0;
        D3 = D3 | 0;
        R3 = R3 | 0;
        U2 = U2 | 0;
        I2 = I2 | 0;
        S2();
        _2(e3 ^ 1549556828, t3 ^ 1549556828, r3 ^ 1549556828, v6 ^ 1549556828, k3 ^ 1549556828, A3 ^ 1549556828, E3 ^ 1549556828, P3 ^ 1549556828, x3 ^ 1549556828, M3 ^ 1549556828, C3 ^ 1549556828, K3 ^ 1549556828, D3 ^ 1549556828, R3 ^ 1549556828, U2 ^ 1549556828, I2 ^ 1549556828);
        y2 = i2;
        b2 = n2;
        m2 = a2;
        g2 = s2;
        w2 = o2;
        S2();
        _2(e3 ^ 909522486, t3 ^ 909522486, r3 ^ 909522486, v6 ^ 909522486, k3 ^ 909522486, A3 ^ 909522486, E3 ^ 909522486, P3 ^ 909522486, x3 ^ 909522486, M3 ^ 909522486, C3 ^ 909522486, K3 ^ 909522486, D3 ^ 909522486, R3 ^ 909522486, U2 ^ 909522486, I2 ^ 909522486);
        h2 = i2;
        f2 = n2;
        d2 = a2;
        l2 = s2;
        p2 = o2;
        c2 = 64;
        u2 = 0;
      }
      function D2(e3, t3, r3) {
        e3 = e3 | 0;
        t3 = t3 | 0;
        r3 = r3 | 0;
        var c3 = 0, u3 = 0, h3 = 0, f3 = 0, d3 = 0, l3 = 0;
        if (e3 & 63)
          return -1;
        if (~r3) {
          if (r3 & 31)
            return -1;
        }
        l3 = x2(e3, t3, -1) | 0;
        c3 = i2, u3 = n2, h3 = a2, f3 = s2, d3 = o2;
        C2();
        _2(c3, u3, h3, f3, d3, 2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);
        if (~r3)
          A2(r3);
        return l3 | 0;
      }
      function R2(e3, t3, r3, c3, u3) {
        e3 = e3 | 0;
        t3 = t3 | 0;
        r3 = r3 | 0;
        c3 = c3 | 0;
        u3 = u3 | 0;
        var h3 = 0, f3 = 0, d3 = 0, l3 = 0, p3 = 0, y3 = 0, b3 = 0, m3 = 0, g3 = 0, w3 = 0;
        if (e3 & 63)
          return -1;
        if (~u3) {
          if (u3 & 31)
            return -1;
        }
        v2[e3 + t3 | 0] = r3 >>> 24;
        v2[e3 + t3 + 1 | 0] = r3 >>> 16 & 255;
        v2[e3 + t3 + 2 | 0] = r3 >>> 8 & 255;
        v2[e3 + t3 + 3 | 0] = r3 & 255;
        D2(e3, t3 + 4 | 0, -1) | 0;
        h3 = y3 = i2, f3 = b3 = n2, d3 = m3 = a2, l3 = g3 = s2, p3 = w3 = o2;
        c3 = c3 - 1 | 0;
        while ((c3 | 0) > 0) {
          M2();
          _2(y3, b3, m3, g3, w3, 2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);
          y3 = i2, b3 = n2, m3 = a2, g3 = s2, w3 = o2;
          C2();
          _2(y3, b3, m3, g3, w3, 2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);
          y3 = i2, b3 = n2, m3 = a2, g3 = s2, w3 = o2;
          h3 = h3 ^ i2;
          f3 = f3 ^ n2;
          d3 = d3 ^ a2;
          l3 = l3 ^ s2;
          p3 = p3 ^ o2;
          c3 = c3 - 1 | 0;
        }
        i2 = h3;
        n2 = f3;
        a2 = d3;
        s2 = l3;
        o2 = p3;
        if (~u3)
          A2(u3);
        return 0;
      }
      return { reset: S2, init: E2, process: P2, finish: x2, hmac_reset: M2, hmac_init: K2, hmac_finish: D2, pbkdf2_generate_block: R2 };
    };
    var st = class {
      constructor() {
        this.pos = 0, this.len = 0;
      }
      reset() {
        const { asm: e2 } = this.acquire_asm();
        return this.result = null, this.pos = 0, this.len = 0, e2.reset(), this;
      }
      process(e2) {
        if (null !== this.result)
          throw new Ie("state must be reset before processing new data");
        const { asm: t2, heap: r2 } = this.acquire_asm();
        let i2 = this.pos, n2 = this.len, a2 = 0, s2 = e2.length, o2 = 0;
        for (; s2 > 0; )
          o2 = Re(r2, i2 + n2, e2, a2, s2), n2 += o2, a2 += o2, s2 -= o2, o2 = t2.process(i2, n2), i2 += o2, n2 -= o2, n2 || (i2 = 0);
        return this.pos = i2, this.len = n2, this;
      }
      finish() {
        if (null !== this.result)
          throw new Ie("state must be reset before processing new data");
        const { asm: e2, heap: t2 } = this.acquire_asm();
        return e2.finish(this.pos, this.len, 0), this.result = new Uint8Array(this.HASH_SIZE), this.result.set(t2.subarray(0, this.HASH_SIZE)), this.pos = 0, this.len = 0, this.release_asm(), this;
      }
    };
    var ot = [];
    var ct = [];
    var ut = class extends st {
      constructor() {
        super(), this.NAME = "sha1", this.BLOCK_SIZE = 64, this.HASH_SIZE = 20, this.acquire_asm();
      }
      acquire_asm() {
        return void 0 !== this.heap && void 0 !== this.asm || (this.heap = ot.pop() || De(), this.asm = ct.pop() || at({ Uint8Array }, null, this.heap.buffer), this.reset()), { heap: this.heap, asm: this.asm };
      }
      release_asm() {
        void 0 !== this.heap && void 0 !== this.asm && (ot.push(this.heap), ct.push(this.asm)), this.heap = void 0, this.asm = void 0;
      }
      static bytes(e2) {
        return new ut().process(e2).finish().result;
      }
    };
    ut.NAME = "sha1", ut.heap_pool = [], ut.asm_pool = [], ut.asm_function = at;
    var ht = [];
    var ft = [];
    var dt = class extends st {
      constructor() {
        super(), this.NAME = "sha256", this.BLOCK_SIZE = 64, this.HASH_SIZE = 32, this.acquire_asm();
      }
      acquire_asm() {
        return void 0 !== this.heap && void 0 !== this.asm || (this.heap = ht.pop() || De(), this.asm = ft.pop() || function(e2, t2, r2) {
          ;
          var i2 = 0, n2 = 0, a2 = 0, s2 = 0, o2 = 0, c2 = 0, u2 = 0, h2 = 0, f2 = 0, d2 = 0, l2 = 0, p2 = 0, y2 = 0, b2 = 0, m2 = 0, g2 = 0, w2 = 0, v2 = 0, _2 = 0, k2 = 0, A2 = 0, S2 = 0, E2 = 0, P2 = 0, x2 = 0, M2 = 0, C2 = new e2.Uint8Array(r2);
          function K2(e3, t3, r3, f3, d3, l3, p3, y3, b3, m3, g3, w3, v6, _3, k3, A3) {
            e3 = e3 | 0;
            t3 = t3 | 0;
            r3 = r3 | 0;
            f3 = f3 | 0;
            d3 = d3 | 0;
            l3 = l3 | 0;
            p3 = p3 | 0;
            y3 = y3 | 0;
            b3 = b3 | 0;
            m3 = m3 | 0;
            g3 = g3 | 0;
            w3 = w3 | 0;
            v6 = v6 | 0;
            _3 = _3 | 0;
            k3 = k3 | 0;
            A3 = A3 | 0;
            var S3 = 0, E3 = 0, P3 = 0, x3 = 0, M3 = 0, C3 = 0, K3 = 0, D3 = 0;
            S3 = i2;
            E3 = n2;
            P3 = a2;
            x3 = s2;
            M3 = o2;
            C3 = c2;
            K3 = u2;
            D3 = h2;
            D3 = e3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 1116352408 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            K3 = t3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 1899447441 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            C3 = r3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 3049323471 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            M3 = f3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 3921009573 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            x3 = d3 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 961987163 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            P3 = l3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 1508970993 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            E3 = p3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 2453635748 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            S3 = y3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 2870763221 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            D3 = b3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 3624381080 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            K3 = m3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 310598401 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            C3 = g3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 607225278 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            M3 = w3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 1426881987 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            x3 = v6 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 1925078388 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            P3 = _3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 2162078206 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            E3 = k3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 2614888103 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            S3 = A3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 3248222580 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            e3 = (t3 >>> 7 ^ t3 >>> 18 ^ t3 >>> 3 ^ t3 << 25 ^ t3 << 14) + (k3 >>> 17 ^ k3 >>> 19 ^ k3 >>> 10 ^ k3 << 15 ^ k3 << 13) + e3 + m3 | 0;
            D3 = e3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 3835390401 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            t3 = (r3 >>> 7 ^ r3 >>> 18 ^ r3 >>> 3 ^ r3 << 25 ^ r3 << 14) + (A3 >>> 17 ^ A3 >>> 19 ^ A3 >>> 10 ^ A3 << 15 ^ A3 << 13) + t3 + g3 | 0;
            K3 = t3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 4022224774 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            r3 = (f3 >>> 7 ^ f3 >>> 18 ^ f3 >>> 3 ^ f3 << 25 ^ f3 << 14) + (e3 >>> 17 ^ e3 >>> 19 ^ e3 >>> 10 ^ e3 << 15 ^ e3 << 13) + r3 + w3 | 0;
            C3 = r3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 264347078 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            f3 = (d3 >>> 7 ^ d3 >>> 18 ^ d3 >>> 3 ^ d3 << 25 ^ d3 << 14) + (t3 >>> 17 ^ t3 >>> 19 ^ t3 >>> 10 ^ t3 << 15 ^ t3 << 13) + f3 + v6 | 0;
            M3 = f3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 604807628 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            d3 = (l3 >>> 7 ^ l3 >>> 18 ^ l3 >>> 3 ^ l3 << 25 ^ l3 << 14) + (r3 >>> 17 ^ r3 >>> 19 ^ r3 >>> 10 ^ r3 << 15 ^ r3 << 13) + d3 + _3 | 0;
            x3 = d3 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 770255983 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            l3 = (p3 >>> 7 ^ p3 >>> 18 ^ p3 >>> 3 ^ p3 << 25 ^ p3 << 14) + (f3 >>> 17 ^ f3 >>> 19 ^ f3 >>> 10 ^ f3 << 15 ^ f3 << 13) + l3 + k3 | 0;
            P3 = l3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 1249150122 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            p3 = (y3 >>> 7 ^ y3 >>> 18 ^ y3 >>> 3 ^ y3 << 25 ^ y3 << 14) + (d3 >>> 17 ^ d3 >>> 19 ^ d3 >>> 10 ^ d3 << 15 ^ d3 << 13) + p3 + A3 | 0;
            E3 = p3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 1555081692 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            y3 = (b3 >>> 7 ^ b3 >>> 18 ^ b3 >>> 3 ^ b3 << 25 ^ b3 << 14) + (l3 >>> 17 ^ l3 >>> 19 ^ l3 >>> 10 ^ l3 << 15 ^ l3 << 13) + y3 + e3 | 0;
            S3 = y3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 1996064986 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            b3 = (m3 >>> 7 ^ m3 >>> 18 ^ m3 >>> 3 ^ m3 << 25 ^ m3 << 14) + (p3 >>> 17 ^ p3 >>> 19 ^ p3 >>> 10 ^ p3 << 15 ^ p3 << 13) + b3 + t3 | 0;
            D3 = b3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 2554220882 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            m3 = (g3 >>> 7 ^ g3 >>> 18 ^ g3 >>> 3 ^ g3 << 25 ^ g3 << 14) + (y3 >>> 17 ^ y3 >>> 19 ^ y3 >>> 10 ^ y3 << 15 ^ y3 << 13) + m3 + r3 | 0;
            K3 = m3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 2821834349 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            g3 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (b3 >>> 17 ^ b3 >>> 19 ^ b3 >>> 10 ^ b3 << 15 ^ b3 << 13) + g3 + f3 | 0;
            C3 = g3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 2952996808 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            w3 = (v6 >>> 7 ^ v6 >>> 18 ^ v6 >>> 3 ^ v6 << 25 ^ v6 << 14) + (m3 >>> 17 ^ m3 >>> 19 ^ m3 >>> 10 ^ m3 << 15 ^ m3 << 13) + w3 + d3 | 0;
            M3 = w3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 3210313671 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            v6 = (_3 >>> 7 ^ _3 >>> 18 ^ _3 >>> 3 ^ _3 << 25 ^ _3 << 14) + (g3 >>> 17 ^ g3 >>> 19 ^ g3 >>> 10 ^ g3 << 15 ^ g3 << 13) + v6 + l3 | 0;
            x3 = v6 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 3336571891 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            _3 = (k3 >>> 7 ^ k3 >>> 18 ^ k3 >>> 3 ^ k3 << 25 ^ k3 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + _3 + p3 | 0;
            P3 = _3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 3584528711 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            k3 = (A3 >>> 7 ^ A3 >>> 18 ^ A3 >>> 3 ^ A3 << 25 ^ A3 << 14) + (v6 >>> 17 ^ v6 >>> 19 ^ v6 >>> 10 ^ v6 << 15 ^ v6 << 13) + k3 + y3 | 0;
            E3 = k3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 113926993 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            A3 = (e3 >>> 7 ^ e3 >>> 18 ^ e3 >>> 3 ^ e3 << 25 ^ e3 << 14) + (_3 >>> 17 ^ _3 >>> 19 ^ _3 >>> 10 ^ _3 << 15 ^ _3 << 13) + A3 + b3 | 0;
            S3 = A3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 338241895 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            e3 = (t3 >>> 7 ^ t3 >>> 18 ^ t3 >>> 3 ^ t3 << 25 ^ t3 << 14) + (k3 >>> 17 ^ k3 >>> 19 ^ k3 >>> 10 ^ k3 << 15 ^ k3 << 13) + e3 + m3 | 0;
            D3 = e3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 666307205 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            t3 = (r3 >>> 7 ^ r3 >>> 18 ^ r3 >>> 3 ^ r3 << 25 ^ r3 << 14) + (A3 >>> 17 ^ A3 >>> 19 ^ A3 >>> 10 ^ A3 << 15 ^ A3 << 13) + t3 + g3 | 0;
            K3 = t3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 773529912 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            r3 = (f3 >>> 7 ^ f3 >>> 18 ^ f3 >>> 3 ^ f3 << 25 ^ f3 << 14) + (e3 >>> 17 ^ e3 >>> 19 ^ e3 >>> 10 ^ e3 << 15 ^ e3 << 13) + r3 + w3 | 0;
            C3 = r3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 1294757372 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            f3 = (d3 >>> 7 ^ d3 >>> 18 ^ d3 >>> 3 ^ d3 << 25 ^ d3 << 14) + (t3 >>> 17 ^ t3 >>> 19 ^ t3 >>> 10 ^ t3 << 15 ^ t3 << 13) + f3 + v6 | 0;
            M3 = f3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 1396182291 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            d3 = (l3 >>> 7 ^ l3 >>> 18 ^ l3 >>> 3 ^ l3 << 25 ^ l3 << 14) + (r3 >>> 17 ^ r3 >>> 19 ^ r3 >>> 10 ^ r3 << 15 ^ r3 << 13) + d3 + _3 | 0;
            x3 = d3 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 1695183700 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            l3 = (p3 >>> 7 ^ p3 >>> 18 ^ p3 >>> 3 ^ p3 << 25 ^ p3 << 14) + (f3 >>> 17 ^ f3 >>> 19 ^ f3 >>> 10 ^ f3 << 15 ^ f3 << 13) + l3 + k3 | 0;
            P3 = l3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 1986661051 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            p3 = (y3 >>> 7 ^ y3 >>> 18 ^ y3 >>> 3 ^ y3 << 25 ^ y3 << 14) + (d3 >>> 17 ^ d3 >>> 19 ^ d3 >>> 10 ^ d3 << 15 ^ d3 << 13) + p3 + A3 | 0;
            E3 = p3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 2177026350 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            y3 = (b3 >>> 7 ^ b3 >>> 18 ^ b3 >>> 3 ^ b3 << 25 ^ b3 << 14) + (l3 >>> 17 ^ l3 >>> 19 ^ l3 >>> 10 ^ l3 << 15 ^ l3 << 13) + y3 + e3 | 0;
            S3 = y3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 2456956037 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            b3 = (m3 >>> 7 ^ m3 >>> 18 ^ m3 >>> 3 ^ m3 << 25 ^ m3 << 14) + (p3 >>> 17 ^ p3 >>> 19 ^ p3 >>> 10 ^ p3 << 15 ^ p3 << 13) + b3 + t3 | 0;
            D3 = b3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 2730485921 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            m3 = (g3 >>> 7 ^ g3 >>> 18 ^ g3 >>> 3 ^ g3 << 25 ^ g3 << 14) + (y3 >>> 17 ^ y3 >>> 19 ^ y3 >>> 10 ^ y3 << 15 ^ y3 << 13) + m3 + r3 | 0;
            K3 = m3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 2820302411 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            g3 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (b3 >>> 17 ^ b3 >>> 19 ^ b3 >>> 10 ^ b3 << 15 ^ b3 << 13) + g3 + f3 | 0;
            C3 = g3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 3259730800 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            w3 = (v6 >>> 7 ^ v6 >>> 18 ^ v6 >>> 3 ^ v6 << 25 ^ v6 << 14) + (m3 >>> 17 ^ m3 >>> 19 ^ m3 >>> 10 ^ m3 << 15 ^ m3 << 13) + w3 + d3 | 0;
            M3 = w3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 3345764771 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            v6 = (_3 >>> 7 ^ _3 >>> 18 ^ _3 >>> 3 ^ _3 << 25 ^ _3 << 14) + (g3 >>> 17 ^ g3 >>> 19 ^ g3 >>> 10 ^ g3 << 15 ^ g3 << 13) + v6 + l3 | 0;
            x3 = v6 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 3516065817 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            _3 = (k3 >>> 7 ^ k3 >>> 18 ^ k3 >>> 3 ^ k3 << 25 ^ k3 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + _3 + p3 | 0;
            P3 = _3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 3600352804 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            k3 = (A3 >>> 7 ^ A3 >>> 18 ^ A3 >>> 3 ^ A3 << 25 ^ A3 << 14) + (v6 >>> 17 ^ v6 >>> 19 ^ v6 >>> 10 ^ v6 << 15 ^ v6 << 13) + k3 + y3 | 0;
            E3 = k3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 4094571909 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            A3 = (e3 >>> 7 ^ e3 >>> 18 ^ e3 >>> 3 ^ e3 << 25 ^ e3 << 14) + (_3 >>> 17 ^ _3 >>> 19 ^ _3 >>> 10 ^ _3 << 15 ^ _3 << 13) + A3 + b3 | 0;
            S3 = A3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 275423344 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            e3 = (t3 >>> 7 ^ t3 >>> 18 ^ t3 >>> 3 ^ t3 << 25 ^ t3 << 14) + (k3 >>> 17 ^ k3 >>> 19 ^ k3 >>> 10 ^ k3 << 15 ^ k3 << 13) + e3 + m3 | 0;
            D3 = e3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 430227734 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            t3 = (r3 >>> 7 ^ r3 >>> 18 ^ r3 >>> 3 ^ r3 << 25 ^ r3 << 14) + (A3 >>> 17 ^ A3 >>> 19 ^ A3 >>> 10 ^ A3 << 15 ^ A3 << 13) + t3 + g3 | 0;
            K3 = t3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 506948616 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            r3 = (f3 >>> 7 ^ f3 >>> 18 ^ f3 >>> 3 ^ f3 << 25 ^ f3 << 14) + (e3 >>> 17 ^ e3 >>> 19 ^ e3 >>> 10 ^ e3 << 15 ^ e3 << 13) + r3 + w3 | 0;
            C3 = r3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 659060556 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            f3 = (d3 >>> 7 ^ d3 >>> 18 ^ d3 >>> 3 ^ d3 << 25 ^ d3 << 14) + (t3 >>> 17 ^ t3 >>> 19 ^ t3 >>> 10 ^ t3 << 15 ^ t3 << 13) + f3 + v6 | 0;
            M3 = f3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 883997877 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            d3 = (l3 >>> 7 ^ l3 >>> 18 ^ l3 >>> 3 ^ l3 << 25 ^ l3 << 14) + (r3 >>> 17 ^ r3 >>> 19 ^ r3 >>> 10 ^ r3 << 15 ^ r3 << 13) + d3 + _3 | 0;
            x3 = d3 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 958139571 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            l3 = (p3 >>> 7 ^ p3 >>> 18 ^ p3 >>> 3 ^ p3 << 25 ^ p3 << 14) + (f3 >>> 17 ^ f3 >>> 19 ^ f3 >>> 10 ^ f3 << 15 ^ f3 << 13) + l3 + k3 | 0;
            P3 = l3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 1322822218 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            p3 = (y3 >>> 7 ^ y3 >>> 18 ^ y3 >>> 3 ^ y3 << 25 ^ y3 << 14) + (d3 >>> 17 ^ d3 >>> 19 ^ d3 >>> 10 ^ d3 << 15 ^ d3 << 13) + p3 + A3 | 0;
            E3 = p3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 1537002063 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            y3 = (b3 >>> 7 ^ b3 >>> 18 ^ b3 >>> 3 ^ b3 << 25 ^ b3 << 14) + (l3 >>> 17 ^ l3 >>> 19 ^ l3 >>> 10 ^ l3 << 15 ^ l3 << 13) + y3 + e3 | 0;
            S3 = y3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 1747873779 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            b3 = (m3 >>> 7 ^ m3 >>> 18 ^ m3 >>> 3 ^ m3 << 25 ^ m3 << 14) + (p3 >>> 17 ^ p3 >>> 19 ^ p3 >>> 10 ^ p3 << 15 ^ p3 << 13) + b3 + t3 | 0;
            D3 = b3 + D3 + (M3 >>> 6 ^ M3 >>> 11 ^ M3 >>> 25 ^ M3 << 26 ^ M3 << 21 ^ M3 << 7) + (K3 ^ M3 & (C3 ^ K3)) + 1955562222 | 0;
            x3 = x3 + D3 | 0;
            D3 = D3 + (S3 & E3 ^ P3 & (S3 ^ E3)) + (S3 >>> 2 ^ S3 >>> 13 ^ S3 >>> 22 ^ S3 << 30 ^ S3 << 19 ^ S3 << 10) | 0;
            m3 = (g3 >>> 7 ^ g3 >>> 18 ^ g3 >>> 3 ^ g3 << 25 ^ g3 << 14) + (y3 >>> 17 ^ y3 >>> 19 ^ y3 >>> 10 ^ y3 << 15 ^ y3 << 13) + m3 + r3 | 0;
            K3 = m3 + K3 + (x3 >>> 6 ^ x3 >>> 11 ^ x3 >>> 25 ^ x3 << 26 ^ x3 << 21 ^ x3 << 7) + (C3 ^ x3 & (M3 ^ C3)) + 2024104815 | 0;
            P3 = P3 + K3 | 0;
            K3 = K3 + (D3 & S3 ^ E3 & (D3 ^ S3)) + (D3 >>> 2 ^ D3 >>> 13 ^ D3 >>> 22 ^ D3 << 30 ^ D3 << 19 ^ D3 << 10) | 0;
            g3 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (b3 >>> 17 ^ b3 >>> 19 ^ b3 >>> 10 ^ b3 << 15 ^ b3 << 13) + g3 + f3 | 0;
            C3 = g3 + C3 + (P3 >>> 6 ^ P3 >>> 11 ^ P3 >>> 25 ^ P3 << 26 ^ P3 << 21 ^ P3 << 7) + (M3 ^ P3 & (x3 ^ M3)) + 2227730452 | 0;
            E3 = E3 + C3 | 0;
            C3 = C3 + (K3 & D3 ^ S3 & (K3 ^ D3)) + (K3 >>> 2 ^ K3 >>> 13 ^ K3 >>> 22 ^ K3 << 30 ^ K3 << 19 ^ K3 << 10) | 0;
            w3 = (v6 >>> 7 ^ v6 >>> 18 ^ v6 >>> 3 ^ v6 << 25 ^ v6 << 14) + (m3 >>> 17 ^ m3 >>> 19 ^ m3 >>> 10 ^ m3 << 15 ^ m3 << 13) + w3 + d3 | 0;
            M3 = w3 + M3 + (E3 >>> 6 ^ E3 >>> 11 ^ E3 >>> 25 ^ E3 << 26 ^ E3 << 21 ^ E3 << 7) + (x3 ^ E3 & (P3 ^ x3)) + 2361852424 | 0;
            S3 = S3 + M3 | 0;
            M3 = M3 + (C3 & K3 ^ D3 & (C3 ^ K3)) + (C3 >>> 2 ^ C3 >>> 13 ^ C3 >>> 22 ^ C3 << 30 ^ C3 << 19 ^ C3 << 10) | 0;
            v6 = (_3 >>> 7 ^ _3 >>> 18 ^ _3 >>> 3 ^ _3 << 25 ^ _3 << 14) + (g3 >>> 17 ^ g3 >>> 19 ^ g3 >>> 10 ^ g3 << 15 ^ g3 << 13) + v6 + l3 | 0;
            x3 = v6 + x3 + (S3 >>> 6 ^ S3 >>> 11 ^ S3 >>> 25 ^ S3 << 26 ^ S3 << 21 ^ S3 << 7) + (P3 ^ S3 & (E3 ^ P3)) + 2428436474 | 0;
            D3 = D3 + x3 | 0;
            x3 = x3 + (M3 & C3 ^ K3 & (M3 ^ C3)) + (M3 >>> 2 ^ M3 >>> 13 ^ M3 >>> 22 ^ M3 << 30 ^ M3 << 19 ^ M3 << 10) | 0;
            _3 = (k3 >>> 7 ^ k3 >>> 18 ^ k3 >>> 3 ^ k3 << 25 ^ k3 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + _3 + p3 | 0;
            P3 = _3 + P3 + (D3 >>> 6 ^ D3 >>> 11 ^ D3 >>> 25 ^ D3 << 26 ^ D3 << 21 ^ D3 << 7) + (E3 ^ D3 & (S3 ^ E3)) + 2756734187 | 0;
            K3 = K3 + P3 | 0;
            P3 = P3 + (x3 & M3 ^ C3 & (x3 ^ M3)) + (x3 >>> 2 ^ x3 >>> 13 ^ x3 >>> 22 ^ x3 << 30 ^ x3 << 19 ^ x3 << 10) | 0;
            k3 = (A3 >>> 7 ^ A3 >>> 18 ^ A3 >>> 3 ^ A3 << 25 ^ A3 << 14) + (v6 >>> 17 ^ v6 >>> 19 ^ v6 >>> 10 ^ v6 << 15 ^ v6 << 13) + k3 + y3 | 0;
            E3 = k3 + E3 + (K3 >>> 6 ^ K3 >>> 11 ^ K3 >>> 25 ^ K3 << 26 ^ K3 << 21 ^ K3 << 7) + (S3 ^ K3 & (D3 ^ S3)) + 3204031479 | 0;
            C3 = C3 + E3 | 0;
            E3 = E3 + (P3 & x3 ^ M3 & (P3 ^ x3)) + (P3 >>> 2 ^ P3 >>> 13 ^ P3 >>> 22 ^ P3 << 30 ^ P3 << 19 ^ P3 << 10) | 0;
            A3 = (e3 >>> 7 ^ e3 >>> 18 ^ e3 >>> 3 ^ e3 << 25 ^ e3 << 14) + (_3 >>> 17 ^ _3 >>> 19 ^ _3 >>> 10 ^ _3 << 15 ^ _3 << 13) + A3 + b3 | 0;
            S3 = A3 + S3 + (C3 >>> 6 ^ C3 >>> 11 ^ C3 >>> 25 ^ C3 << 26 ^ C3 << 21 ^ C3 << 7) + (D3 ^ C3 & (K3 ^ D3)) + 3329325298 | 0;
            M3 = M3 + S3 | 0;
            S3 = S3 + (E3 & P3 ^ x3 & (E3 ^ P3)) + (E3 >>> 2 ^ E3 >>> 13 ^ E3 >>> 22 ^ E3 << 30 ^ E3 << 19 ^ E3 << 10) | 0;
            i2 = i2 + S3 | 0;
            n2 = n2 + E3 | 0;
            a2 = a2 + P3 | 0;
            s2 = s2 + x3 | 0;
            o2 = o2 + M3 | 0;
            c2 = c2 + C3 | 0;
            u2 = u2 + K3 | 0;
            h2 = h2 + D3 | 0;
          }
          function D2(e3) {
            e3 = e3 | 0;
            K2(C2[e3 | 0] << 24 | C2[e3 | 1] << 16 | C2[e3 | 2] << 8 | C2[e3 | 3], C2[e3 | 4] << 24 | C2[e3 | 5] << 16 | C2[e3 | 6] << 8 | C2[e3 | 7], C2[e3 | 8] << 24 | C2[e3 | 9] << 16 | C2[e3 | 10] << 8 | C2[e3 | 11], C2[e3 | 12] << 24 | C2[e3 | 13] << 16 | C2[e3 | 14] << 8 | C2[e3 | 15], C2[e3 | 16] << 24 | C2[e3 | 17] << 16 | C2[e3 | 18] << 8 | C2[e3 | 19], C2[e3 | 20] << 24 | C2[e3 | 21] << 16 | C2[e3 | 22] << 8 | C2[e3 | 23], C2[e3 | 24] << 24 | C2[e3 | 25] << 16 | C2[e3 | 26] << 8 | C2[e3 | 27], C2[e3 | 28] << 24 | C2[e3 | 29] << 16 | C2[e3 | 30] << 8 | C2[e3 | 31], C2[e3 | 32] << 24 | C2[e3 | 33] << 16 | C2[e3 | 34] << 8 | C2[e3 | 35], C2[e3 | 36] << 24 | C2[e3 | 37] << 16 | C2[e3 | 38] << 8 | C2[e3 | 39], C2[e3 | 40] << 24 | C2[e3 | 41] << 16 | C2[e3 | 42] << 8 | C2[e3 | 43], C2[e3 | 44] << 24 | C2[e3 | 45] << 16 | C2[e3 | 46] << 8 | C2[e3 | 47], C2[e3 | 48] << 24 | C2[e3 | 49] << 16 | C2[e3 | 50] << 8 | C2[e3 | 51], C2[e3 | 52] << 24 | C2[e3 | 53] << 16 | C2[e3 | 54] << 8 | C2[e3 | 55], C2[e3 | 56] << 24 | C2[e3 | 57] << 16 | C2[e3 | 58] << 8 | C2[e3 | 59], C2[e3 | 60] << 24 | C2[e3 | 61] << 16 | C2[e3 | 62] << 8 | C2[e3 | 63]);
          }
          function R2(e3) {
            e3 = e3 | 0;
            C2[e3 | 0] = i2 >>> 24;
            C2[e3 | 1] = i2 >>> 16 & 255;
            C2[e3 | 2] = i2 >>> 8 & 255;
            C2[e3 | 3] = i2 & 255;
            C2[e3 | 4] = n2 >>> 24;
            C2[e3 | 5] = n2 >>> 16 & 255;
            C2[e3 | 6] = n2 >>> 8 & 255;
            C2[e3 | 7] = n2 & 255;
            C2[e3 | 8] = a2 >>> 24;
            C2[e3 | 9] = a2 >>> 16 & 255;
            C2[e3 | 10] = a2 >>> 8 & 255;
            C2[e3 | 11] = a2 & 255;
            C2[e3 | 12] = s2 >>> 24;
            C2[e3 | 13] = s2 >>> 16 & 255;
            C2[e3 | 14] = s2 >>> 8 & 255;
            C2[e3 | 15] = s2 & 255;
            C2[e3 | 16] = o2 >>> 24;
            C2[e3 | 17] = o2 >>> 16 & 255;
            C2[e3 | 18] = o2 >>> 8 & 255;
            C2[e3 | 19] = o2 & 255;
            C2[e3 | 20] = c2 >>> 24;
            C2[e3 | 21] = c2 >>> 16 & 255;
            C2[e3 | 22] = c2 >>> 8 & 255;
            C2[e3 | 23] = c2 & 255;
            C2[e3 | 24] = u2 >>> 24;
            C2[e3 | 25] = u2 >>> 16 & 255;
            C2[e3 | 26] = u2 >>> 8 & 255;
            C2[e3 | 27] = u2 & 255;
            C2[e3 | 28] = h2 >>> 24;
            C2[e3 | 29] = h2 >>> 16 & 255;
            C2[e3 | 30] = h2 >>> 8 & 255;
            C2[e3 | 31] = h2 & 255;
          }
          function U2() {
            i2 = 1779033703;
            n2 = 3144134277;
            a2 = 1013904242;
            s2 = 2773480762;
            o2 = 1359893119;
            c2 = 2600822924;
            u2 = 528734635;
            h2 = 1541459225;
            f2 = d2 = 0;
          }
          function I2(e3, t3, r3, l3, p3, y3, b3, m3, g3, w3) {
            e3 = e3 | 0;
            t3 = t3 | 0;
            r3 = r3 | 0;
            l3 = l3 | 0;
            p3 = p3 | 0;
            y3 = y3 | 0;
            b3 = b3 | 0;
            m3 = m3 | 0;
            g3 = g3 | 0;
            w3 = w3 | 0;
            i2 = e3;
            n2 = t3;
            a2 = r3;
            s2 = l3;
            o2 = p3;
            c2 = y3;
            u2 = b3;
            h2 = m3;
            f2 = g3;
            d2 = w3;
          }
          function B2(e3, t3) {
            e3 = e3 | 0;
            t3 = t3 | 0;
            var r3 = 0;
            if (e3 & 63)
              return -1;
            while ((t3 | 0) >= 64) {
              D2(e3);
              e3 = e3 + 64 | 0;
              t3 = t3 - 64 | 0;
              r3 = r3 + 64 | 0;
            }
            f2 = f2 + r3 | 0;
            if (f2 >>> 0 < r3 >>> 0)
              d2 = d2 + 1 | 0;
            return r3 | 0;
          }
          function T2(e3, t3, r3) {
            e3 = e3 | 0;
            t3 = t3 | 0;
            r3 = r3 | 0;
            var i3 = 0, n3 = 0;
            if (e3 & 63)
              return -1;
            if (~r3) {
              if (r3 & 31)
                return -1;
            }
            if ((t3 | 0) >= 64) {
              i3 = B2(e3, t3) | 0;
              if ((i3 | 0) == -1)
                return -1;
              e3 = e3 + i3 | 0;
              t3 = t3 - i3 | 0;
            }
            i3 = i3 + t3 | 0;
            f2 = f2 + t3 | 0;
            if (f2 >>> 0 < t3 >>> 0)
              d2 = d2 + 1 | 0;
            C2[e3 | t3] = 128;
            if ((t3 | 0) >= 56) {
              for (n3 = t3 + 1 | 0; (n3 | 0) < 64; n3 = n3 + 1 | 0)
                C2[e3 | n3] = 0;
              D2(e3);
              t3 = 0;
              C2[e3 | 0] = 0;
            }
            for (n3 = t3 + 1 | 0; (n3 | 0) < 59; n3 = n3 + 1 | 0)
              C2[e3 | n3] = 0;
            C2[e3 | 56] = d2 >>> 21 & 255;
            C2[e3 | 57] = d2 >>> 13 & 255;
            C2[e3 | 58] = d2 >>> 5 & 255;
            C2[e3 | 59] = d2 << 3 & 255 | f2 >>> 29;
            C2[e3 | 60] = f2 >>> 21 & 255;
            C2[e3 | 61] = f2 >>> 13 & 255;
            C2[e3 | 62] = f2 >>> 5 & 255;
            C2[e3 | 63] = f2 << 3 & 255;
            D2(e3);
            if (~r3)
              R2(r3);
            return i3 | 0;
          }
          function z2() {
            i2 = l2;
            n2 = p2;
            a2 = y2;
            s2 = b2;
            o2 = m2;
            c2 = g2;
            u2 = w2;
            h2 = v2;
            f2 = 64;
            d2 = 0;
          }
          function q2() {
            i2 = _2;
            n2 = k2;
            a2 = A2;
            s2 = S2;
            o2 = E2;
            c2 = P2;
            u2 = x2;
            h2 = M2;
            f2 = 64;
            d2 = 0;
          }
          function O2(e3, t3, r3, C3, D3, R3, I3, B3, T3, z3, q3, O3, F3, N3, j2, L2) {
            e3 = e3 | 0;
            t3 = t3 | 0;
            r3 = r3 | 0;
            C3 = C3 | 0;
            D3 = D3 | 0;
            R3 = R3 | 0;
            I3 = I3 | 0;
            B3 = B3 | 0;
            T3 = T3 | 0;
            z3 = z3 | 0;
            q3 = q3 | 0;
            O3 = O3 | 0;
            F3 = F3 | 0;
            N3 = N3 | 0;
            j2 = j2 | 0;
            L2 = L2 | 0;
            U2();
            K2(e3 ^ 1549556828, t3 ^ 1549556828, r3 ^ 1549556828, C3 ^ 1549556828, D3 ^ 1549556828, R3 ^ 1549556828, I3 ^ 1549556828, B3 ^ 1549556828, T3 ^ 1549556828, z3 ^ 1549556828, q3 ^ 1549556828, O3 ^ 1549556828, F3 ^ 1549556828, N3 ^ 1549556828, j2 ^ 1549556828, L2 ^ 1549556828);
            _2 = i2;
            k2 = n2;
            A2 = a2;
            S2 = s2;
            E2 = o2;
            P2 = c2;
            x2 = u2;
            M2 = h2;
            U2();
            K2(e3 ^ 909522486, t3 ^ 909522486, r3 ^ 909522486, C3 ^ 909522486, D3 ^ 909522486, R3 ^ 909522486, I3 ^ 909522486, B3 ^ 909522486, T3 ^ 909522486, z3 ^ 909522486, q3 ^ 909522486, O3 ^ 909522486, F3 ^ 909522486, N3 ^ 909522486, j2 ^ 909522486, L2 ^ 909522486);
            l2 = i2;
            p2 = n2;
            y2 = a2;
            b2 = s2;
            m2 = o2;
            g2 = c2;
            w2 = u2;
            v2 = h2;
            f2 = 64;
            d2 = 0;
          }
          function F2(e3, t3, r3) {
            e3 = e3 | 0;
            t3 = t3 | 0;
            r3 = r3 | 0;
            var f3 = 0, d3 = 0, l3 = 0, p3 = 0, y3 = 0, b3 = 0, m3 = 0, g3 = 0, w3 = 0;
            if (e3 & 63)
              return -1;
            if (~r3) {
              if (r3 & 31)
                return -1;
            }
            w3 = T2(e3, t3, -1) | 0;
            f3 = i2, d3 = n2, l3 = a2, p3 = s2, y3 = o2, b3 = c2, m3 = u2, g3 = h2;
            q2();
            K2(f3, d3, l3, p3, y3, b3, m3, g3, 2147483648, 0, 0, 0, 0, 0, 0, 768);
            if (~r3)
              R2(r3);
            return w3 | 0;
          }
          function N2(e3, t3, r3, f3, d3) {
            e3 = e3 | 0;
            t3 = t3 | 0;
            r3 = r3 | 0;
            f3 = f3 | 0;
            d3 = d3 | 0;
            var l3 = 0, p3 = 0, y3 = 0, b3 = 0, m3 = 0, g3 = 0, w3 = 0, v6 = 0, _3 = 0, k3 = 0, A3 = 0, S3 = 0, E3 = 0, P3 = 0, x3 = 0, M3 = 0;
            if (e3 & 63)
              return -1;
            if (~d3) {
              if (d3 & 31)
                return -1;
            }
            C2[e3 + t3 | 0] = r3 >>> 24;
            C2[e3 + t3 + 1 | 0] = r3 >>> 16 & 255;
            C2[e3 + t3 + 2 | 0] = r3 >>> 8 & 255;
            C2[e3 + t3 + 3 | 0] = r3 & 255;
            F2(e3, t3 + 4 | 0, -1) | 0;
            l3 = _3 = i2, p3 = k3 = n2, y3 = A3 = a2, b3 = S3 = s2, m3 = E3 = o2, g3 = P3 = c2, w3 = x3 = u2, v6 = M3 = h2;
            f3 = f3 - 1 | 0;
            while ((f3 | 0) > 0) {
              z2();
              K2(_3, k3, A3, S3, E3, P3, x3, M3, 2147483648, 0, 0, 0, 0, 0, 0, 768);
              _3 = i2, k3 = n2, A3 = a2, S3 = s2, E3 = o2, P3 = c2, x3 = u2, M3 = h2;
              q2();
              K2(_3, k3, A3, S3, E3, P3, x3, M3, 2147483648, 0, 0, 0, 0, 0, 0, 768);
              _3 = i2, k3 = n2, A3 = a2, S3 = s2, E3 = o2, P3 = c2, x3 = u2, M3 = h2;
              l3 = l3 ^ i2;
              p3 = p3 ^ n2;
              y3 = y3 ^ a2;
              b3 = b3 ^ s2;
              m3 = m3 ^ o2;
              g3 = g3 ^ c2;
              w3 = w3 ^ u2;
              v6 = v6 ^ h2;
              f3 = f3 - 1 | 0;
            }
            i2 = l3;
            n2 = p3;
            a2 = y3;
            s2 = b3;
            o2 = m3;
            c2 = g3;
            u2 = w3;
            h2 = v6;
            if (~d3)
              R2(d3);
            return 0;
          }
          return { reset: U2, init: I2, process: B2, finish: T2, hmac_reset: z2, hmac_init: O2, hmac_finish: F2, pbkdf2_generate_block: N2 };
        }({ Uint8Array }, null, this.heap.buffer), this.reset()), { heap: this.heap, asm: this.asm };
      }
      release_asm() {
        void 0 !== this.heap && void 0 !== this.asm && (ht.push(this.heap), ft.push(this.asm)), this.heap = void 0, this.asm = void 0;
      }
      static bytes(e2) {
        return new dt().process(e2).finish().result;
      }
    };
    dt.NAME = "sha256";
    var lt = pt;
    function pt(e2, t2) {
      if (!e2)
        throw Error(t2 || "Assertion failed");
    }
    pt.equal = function(e2, t2, r2) {
      if (e2 != t2)
        throw Error(r2 || "Assertion failed: " + e2 + " != " + t2);
    };
    var yt = void 0 !== e ? e : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
    function bt(e2, t2) {
      return e2(t2 = { exports: {} }, t2.exports), t2.exports;
    }
    var mt = bt(function(e2) {
      e2.exports = "function" == typeof Object.create ? function(e3, t2) {
        e3.super_ = t2, e3.prototype = Object.create(t2.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } });
      } : function(e3, t2) {
        e3.super_ = t2;
        var r2 = function() {
        };
        r2.prototype = t2.prototype, e3.prototype = new r2(), e3.prototype.constructor = e3;
      };
    });
    var gt = bt(function(e2) {
      try {
        var t2 = p.default;
        if ("function" != typeof t2.inherits)
          throw "";
        e2.exports = t2.inherits;
      } catch (t3) {
        e2.exports = mt;
      }
    });
    function wt(e2) {
      return (e2 >>> 24 | e2 >>> 8 & 65280 | e2 << 8 & 16711680 | (255 & e2) << 24) >>> 0;
    }
    function vt(e2) {
      return 1 === e2.length ? "0" + e2 : e2;
    }
    function _t(e2) {
      return 7 === e2.length ? "0" + e2 : 6 === e2.length ? "00" + e2 : 5 === e2.length ? "000" + e2 : 4 === e2.length ? "0000" + e2 : 3 === e2.length ? "00000" + e2 : 2 === e2.length ? "000000" + e2 : 1 === e2.length ? "0000000" + e2 : e2;
    }
    var kt = { inherits: gt, toArray: function(e2, t2) {
      if (Array.isArray(e2))
        return e2.slice();
      if (!e2)
        return [];
      var r2 = [];
      if ("string" == typeof e2)
        if (t2) {
          if ("hex" === t2)
            for ((e2 = e2.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e2 = "0" + e2), i2 = 0; i2 < e2.length; i2 += 2)
              r2.push(parseInt(e2[i2] + e2[i2 + 1], 16));
        } else
          for (var i2 = 0; i2 < e2.length; i2++) {
            var n2 = e2.charCodeAt(i2), a2 = n2 >> 8, s2 = 255 & n2;
            a2 ? r2.push(a2, s2) : r2.push(s2);
          }
      else
        for (i2 = 0; i2 < e2.length; i2++)
          r2[i2] = 0 | e2[i2];
      return r2;
    }, toHex: function(e2) {
      for (var t2 = "", r2 = 0; r2 < e2.length; r2++)
        t2 += vt(e2[r2].toString(16));
      return t2;
    }, htonl: wt, toHex32: function(e2, t2) {
      for (var r2 = "", i2 = 0; i2 < e2.length; i2++) {
        var n2 = e2[i2];
        "little" === t2 && (n2 = wt(n2)), r2 += _t(n2.toString(16));
      }
      return r2;
    }, zero2: vt, zero8: _t, join32: function(e2, t2, r2, i2) {
      var n2 = r2 - t2;
      lt(n2 % 4 == 0);
      for (var a2 = Array(n2 / 4), s2 = 0, o2 = t2; s2 < a2.length; s2++, o2 += 4) {
        var c2;
        c2 = "big" === i2 ? e2[o2] << 24 | e2[o2 + 1] << 16 | e2[o2 + 2] << 8 | e2[o2 + 3] : e2[o2 + 3] << 24 | e2[o2 + 2] << 16 | e2[o2 + 1] << 8 | e2[o2], a2[s2] = c2 >>> 0;
      }
      return a2;
    }, split32: function(e2, t2) {
      for (var r2 = Array(4 * e2.length), i2 = 0, n2 = 0; i2 < e2.length; i2++, n2 += 4) {
        var a2 = e2[i2];
        "big" === t2 ? (r2[n2] = a2 >>> 24, r2[n2 + 1] = a2 >>> 16 & 255, r2[n2 + 2] = a2 >>> 8 & 255, r2[n2 + 3] = 255 & a2) : (r2[n2 + 3] = a2 >>> 24, r2[n2 + 2] = a2 >>> 16 & 255, r2[n2 + 1] = a2 >>> 8 & 255, r2[n2] = 255 & a2);
      }
      return r2;
    }, rotr32: function(e2, t2) {
      return e2 >>> t2 | e2 << 32 - t2;
    }, rotl32: function(e2, t2) {
      return e2 << t2 | e2 >>> 32 - t2;
    }, sum32: function(e2, t2) {
      return e2 + t2 >>> 0;
    }, sum32_3: function(e2, t2, r2) {
      return e2 + t2 + r2 >>> 0;
    }, sum32_4: function(e2, t2, r2, i2) {
      return e2 + t2 + r2 + i2 >>> 0;
    }, sum32_5: function(e2, t2, r2, i2, n2) {
      return e2 + t2 + r2 + i2 + n2 >>> 0;
    }, sum64: function(e2, t2, r2, i2) {
      var n2 = e2[t2], a2 = i2 + e2[t2 + 1] >>> 0, s2 = (a2 < i2 ? 1 : 0) + r2 + n2;
      e2[t2] = s2 >>> 0, e2[t2 + 1] = a2;
    }, sum64_hi: function(e2, t2, r2, i2) {
      return (t2 + i2 >>> 0 < t2 ? 1 : 0) + e2 + r2 >>> 0;
    }, sum64_lo: function(e2, t2, r2, i2) {
      return t2 + i2 >>> 0;
    }, sum64_4_hi: function(e2, t2, r2, i2, n2, a2, s2, o2) {
      var c2 = 0, u2 = t2;
      return c2 += (u2 = u2 + i2 >>> 0) < t2 ? 1 : 0, c2 += (u2 = u2 + a2 >>> 0) < a2 ? 1 : 0, e2 + r2 + n2 + s2 + (c2 += (u2 = u2 + o2 >>> 0) < o2 ? 1 : 0) >>> 0;
    }, sum64_4_lo: function(e2, t2, r2, i2, n2, a2, s2, o2) {
      return t2 + i2 + a2 + o2 >>> 0;
    }, sum64_5_hi: function(e2, t2, r2, i2, n2, a2, s2, o2, c2, u2) {
      var h2 = 0, f2 = t2;
      return h2 += (f2 = f2 + i2 >>> 0) < t2 ? 1 : 0, h2 += (f2 = f2 + a2 >>> 0) < a2 ? 1 : 0, h2 += (f2 = f2 + o2 >>> 0) < o2 ? 1 : 0, e2 + r2 + n2 + s2 + c2 + (h2 += (f2 = f2 + u2 >>> 0) < u2 ? 1 : 0) >>> 0;
    }, sum64_5_lo: function(e2, t2, r2, i2, n2, a2, s2, o2, c2, u2) {
      return t2 + i2 + a2 + o2 + u2 >>> 0;
    }, rotr64_hi: function(e2, t2, r2) {
      return (t2 << 32 - r2 | e2 >>> r2) >>> 0;
    }, rotr64_lo: function(e2, t2, r2) {
      return (e2 << 32 - r2 | t2 >>> r2) >>> 0;
    }, shr64_hi: function(e2, t2, r2) {
      return e2 >>> r2;
    }, shr64_lo: function(e2, t2, r2) {
      return (e2 << 32 - r2 | t2 >>> r2) >>> 0;
    } };
    function At() {
      this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
    }
    var St = At;
    At.prototype.update = function(e2, t2) {
      if (e2 = kt.toArray(e2, t2), this.pending ? this.pending = this.pending.concat(e2) : this.pending = e2, this.pendingTotal += e2.length, this.pending.length >= this._delta8) {
        var r2 = (e2 = this.pending).length % this._delta8;
        this.pending = e2.slice(e2.length - r2, e2.length), 0 === this.pending.length && (this.pending = null), e2 = kt.join32(e2, 0, e2.length - r2, this.endian);
        for (var i2 = 0; i2 < e2.length; i2 += this._delta32)
          this._update(e2, i2, i2 + this._delta32);
      }
      return this;
    }, At.prototype.digest = function(e2) {
      return this.update(this._pad()), lt(null === this.pending), this._digest(e2);
    }, At.prototype._pad = function() {
      var e2 = this.pendingTotal, t2 = this._delta8, r2 = t2 - (e2 + this.padLength) % t2, i2 = Array(r2 + this.padLength);
      i2[0] = 128;
      for (var n2 = 1; n2 < r2; n2++)
        i2[n2] = 0;
      if (e2 <<= 3, "big" === this.endian) {
        for (var a2 = 8; a2 < this.padLength; a2++)
          i2[n2++] = 0;
        i2[n2++] = 0, i2[n2++] = 0, i2[n2++] = 0, i2[n2++] = 0, i2[n2++] = e2 >>> 24 & 255, i2[n2++] = e2 >>> 16 & 255, i2[n2++] = e2 >>> 8 & 255, i2[n2++] = 255 & e2;
      } else
        for (i2[n2++] = 255 & e2, i2[n2++] = e2 >>> 8 & 255, i2[n2++] = e2 >>> 16 & 255, i2[n2++] = e2 >>> 24 & 255, i2[n2++] = 0, i2[n2++] = 0, i2[n2++] = 0, i2[n2++] = 0, a2 = 8; a2 < this.padLength; a2++)
          i2[n2++] = 0;
      return i2;
    };
    var Et = { BlockHash: St };
    var Pt = kt.rotr32;
    function xt(e2, t2, r2) {
      return e2 & t2 ^ ~e2 & r2;
    }
    function Mt(e2, t2, r2) {
      return e2 & t2 ^ e2 & r2 ^ t2 & r2;
    }
    function Ct(e2, t2, r2) {
      return e2 ^ t2 ^ r2;
    }
    var Kt = { ft_1: function(e2, t2, r2, i2) {
      return 0 === e2 ? xt(t2, r2, i2) : 1 === e2 || 3 === e2 ? Ct(t2, r2, i2) : 2 === e2 ? Mt(t2, r2, i2) : void 0;
    }, ch32: xt, maj32: Mt, p32: Ct, s0_256: function(e2) {
      return Pt(e2, 2) ^ Pt(e2, 13) ^ Pt(e2, 22);
    }, s1_256: function(e2) {
      return Pt(e2, 6) ^ Pt(e2, 11) ^ Pt(e2, 25);
    }, g0_256: function(e2) {
      return Pt(e2, 7) ^ Pt(e2, 18) ^ e2 >>> 3;
    }, g1_256: function(e2) {
      return Pt(e2, 17) ^ Pt(e2, 19) ^ e2 >>> 10;
    } };
    var Dt = kt.sum32;
    var Rt = kt.sum32_4;
    var Ut = kt.sum32_5;
    var It = Kt.ch32;
    var Bt = Kt.maj32;
    var Tt = Kt.s0_256;
    var zt = Kt.s1_256;
    var qt = Kt.g0_256;
    var Ot = Kt.g1_256;
    var Ft = Et.BlockHash;
    var Nt = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    function jt() {
      if (!(this instanceof jt))
        return new jt();
      Ft.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = Nt, this.W = Array(64);
    }
    kt.inherits(jt, Ft);
    var Lt = jt;
    function Wt() {
      if (!(this instanceof Wt))
        return new Wt();
      Lt.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
    }
    jt.blockSize = 512, jt.outSize = 256, jt.hmacStrength = 192, jt.padLength = 64, jt.prototype._update = function(e2, t2) {
      for (var r2 = this.W, i2 = 0; i2 < 16; i2++)
        r2[i2] = e2[t2 + i2];
      for (; i2 < r2.length; i2++)
        r2[i2] = Rt(Ot(r2[i2 - 2]), r2[i2 - 7], qt(r2[i2 - 15]), r2[i2 - 16]);
      var n2 = this.h[0], a2 = this.h[1], s2 = this.h[2], o2 = this.h[3], c2 = this.h[4], u2 = this.h[5], h2 = this.h[6], f2 = this.h[7];
      for (lt(this.k.length === r2.length), i2 = 0; i2 < r2.length; i2++) {
        var d2 = Ut(f2, zt(c2), It(c2, u2, h2), this.k[i2], r2[i2]), l2 = Dt(Tt(n2), Bt(n2, a2, s2));
        f2 = h2, h2 = u2, u2 = c2, c2 = Dt(o2, d2), o2 = s2, s2 = a2, a2 = n2, n2 = Dt(d2, l2);
      }
      this.h[0] = Dt(this.h[0], n2), this.h[1] = Dt(this.h[1], a2), this.h[2] = Dt(this.h[2], s2), this.h[3] = Dt(this.h[3], o2), this.h[4] = Dt(this.h[4], c2), this.h[5] = Dt(this.h[5], u2), this.h[6] = Dt(this.h[6], h2), this.h[7] = Dt(this.h[7], f2);
    }, jt.prototype._digest = function(e2) {
      return "hex" === e2 ? kt.toHex32(this.h, "big") : kt.split32(this.h, "big");
    }, kt.inherits(Wt, Lt);
    var Ht = Wt;
    Wt.blockSize = 512, Wt.outSize = 224, Wt.hmacStrength = 192, Wt.padLength = 64, Wt.prototype._digest = function(e2) {
      return "hex" === e2 ? kt.toHex32(this.h.slice(0, 7), "big") : kt.split32(this.h.slice(0, 7), "big");
    };
    var Gt = kt.rotr64_hi;
    var Vt = kt.rotr64_lo;
    var $t = kt.shr64_hi;
    var Zt = kt.shr64_lo;
    var Yt = kt.sum64;
    var Xt = kt.sum64_hi;
    var Qt = kt.sum64_lo;
    var Jt = kt.sum64_4_hi;
    var er = kt.sum64_4_lo;
    var tr = kt.sum64_5_hi;
    var rr = kt.sum64_5_lo;
    var ir = Et.BlockHash;
    var nr = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
    function ar() {
      if (!(this instanceof ar))
        return new ar();
      ir.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = nr, this.W = Array(160);
    }
    kt.inherits(ar, ir);
    var sr = ar;
    function or(e2, t2, r2, i2, n2) {
      var a2 = e2 & r2 ^ ~e2 & n2;
      return a2 < 0 && (a2 += 4294967296), a2;
    }
    function cr(e2, t2, r2, i2, n2, a2) {
      var s2 = t2 & i2 ^ ~t2 & a2;
      return s2 < 0 && (s2 += 4294967296), s2;
    }
    function ur(e2, t2, r2, i2, n2) {
      var a2 = e2 & r2 ^ e2 & n2 ^ r2 & n2;
      return a2 < 0 && (a2 += 4294967296), a2;
    }
    function hr(e2, t2, r2, i2, n2, a2) {
      var s2 = t2 & i2 ^ t2 & a2 ^ i2 & a2;
      return s2 < 0 && (s2 += 4294967296), s2;
    }
    function fr(e2, t2) {
      var r2 = Gt(e2, t2, 28) ^ Gt(t2, e2, 2) ^ Gt(t2, e2, 7);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function dr(e2, t2) {
      var r2 = Vt(e2, t2, 28) ^ Vt(t2, e2, 2) ^ Vt(t2, e2, 7);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function lr(e2, t2) {
      var r2 = Gt(e2, t2, 14) ^ Gt(e2, t2, 18) ^ Gt(t2, e2, 9);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function pr(e2, t2) {
      var r2 = Vt(e2, t2, 14) ^ Vt(e2, t2, 18) ^ Vt(t2, e2, 9);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function yr(e2, t2) {
      var r2 = Gt(e2, t2, 1) ^ Gt(e2, t2, 8) ^ $t(e2, t2, 7);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function br(e2, t2) {
      var r2 = Vt(e2, t2, 1) ^ Vt(e2, t2, 8) ^ Zt(e2, t2, 7);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function mr(e2, t2) {
      var r2 = Gt(e2, t2, 19) ^ Gt(t2, e2, 29) ^ $t(e2, t2, 6);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function gr(e2, t2) {
      var r2 = Vt(e2, t2, 19) ^ Vt(t2, e2, 29) ^ Zt(e2, t2, 6);
      return r2 < 0 && (r2 += 4294967296), r2;
    }
    function wr() {
      if (!(this instanceof wr))
        return new wr();
      sr.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
    }
    ar.blockSize = 1024, ar.outSize = 512, ar.hmacStrength = 192, ar.padLength = 128, ar.prototype._prepareBlock = function(e2, t2) {
      for (var r2 = this.W, i2 = 0; i2 < 32; i2++)
        r2[i2] = e2[t2 + i2];
      for (; i2 < r2.length; i2 += 2) {
        var n2 = mr(r2[i2 - 4], r2[i2 - 3]), a2 = gr(r2[i2 - 4], r2[i2 - 3]), s2 = r2[i2 - 14], o2 = r2[i2 - 13], c2 = yr(r2[i2 - 30], r2[i2 - 29]), u2 = br(r2[i2 - 30], r2[i2 - 29]), h2 = r2[i2 - 32], f2 = r2[i2 - 31];
        r2[i2] = Jt(n2, a2, s2, o2, c2, u2, h2, f2), r2[i2 + 1] = er(n2, a2, s2, o2, c2, u2, h2, f2);
      }
    }, ar.prototype._update = function(e2, t2) {
      this._prepareBlock(e2, t2);
      var r2 = this.W, i2 = this.h[0], n2 = this.h[1], a2 = this.h[2], s2 = this.h[3], o2 = this.h[4], c2 = this.h[5], u2 = this.h[6], h2 = this.h[7], f2 = this.h[8], d2 = this.h[9], l2 = this.h[10], p2 = this.h[11], y2 = this.h[12], b2 = this.h[13], m2 = this.h[14], g2 = this.h[15];
      lt(this.k.length === r2.length);
      for (var w2 = 0; w2 < r2.length; w2 += 2) {
        var v2 = m2, _2 = g2, k2 = lr(f2, d2), A2 = pr(f2, d2), S2 = or(f2, d2, l2, p2, y2), E2 = cr(f2, d2, l2, p2, y2, b2), P2 = this.k[w2], x2 = this.k[w2 + 1], M2 = r2[w2], C2 = r2[w2 + 1], K2 = tr(v2, _2, k2, A2, S2, E2, P2, x2, M2, C2), D2 = rr(v2, _2, k2, A2, S2, E2, P2, x2, M2, C2);
        v2 = fr(i2, n2), _2 = dr(i2, n2), k2 = ur(i2, n2, a2, s2, o2), A2 = hr(i2, n2, a2, s2, o2, c2);
        var R2 = Xt(v2, _2, k2, A2), U2 = Qt(v2, _2, k2, A2);
        m2 = y2, g2 = b2, y2 = l2, b2 = p2, l2 = f2, p2 = d2, f2 = Xt(u2, h2, K2, D2), d2 = Qt(h2, h2, K2, D2), u2 = o2, h2 = c2, o2 = a2, c2 = s2, a2 = i2, s2 = n2, i2 = Xt(K2, D2, R2, U2), n2 = Qt(K2, D2, R2, U2);
      }
      Yt(this.h, 0, i2, n2), Yt(this.h, 2, a2, s2), Yt(this.h, 4, o2, c2), Yt(this.h, 6, u2, h2), Yt(this.h, 8, f2, d2), Yt(this.h, 10, l2, p2), Yt(this.h, 12, y2, b2), Yt(this.h, 14, m2, g2);
    }, ar.prototype._digest = function(e2) {
      return "hex" === e2 ? kt.toHex32(this.h, "big") : kt.split32(this.h, "big");
    }, kt.inherits(wr, sr);
    var vr = wr;
    wr.blockSize = 1024, wr.outSize = 384, wr.hmacStrength = 192, wr.padLength = 128, wr.prototype._digest = function(e2) {
      return "hex" === e2 ? kt.toHex32(this.h.slice(0, 12), "big") : kt.split32(this.h.slice(0, 12), "big");
    };
    var _r = kt.rotl32;
    var kr = kt.sum32;
    var Ar = kt.sum32_3;
    var Sr = kt.sum32_4;
    var Er = Et.BlockHash;
    function Pr() {
      if (!(this instanceof Pr))
        return new Pr();
      Er.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
    }
    kt.inherits(Pr, Er);
    var xr = Pr;
    function Mr(e2, t2, r2, i2) {
      return e2 <= 15 ? t2 ^ r2 ^ i2 : e2 <= 31 ? t2 & r2 | ~t2 & i2 : e2 <= 47 ? (t2 | ~r2) ^ i2 : e2 <= 63 ? t2 & i2 | r2 & ~i2 : t2 ^ (r2 | ~i2);
    }
    function Cr(e2) {
      return e2 <= 15 ? 0 : e2 <= 31 ? 1518500249 : e2 <= 47 ? 1859775393 : e2 <= 63 ? 2400959708 : 2840853838;
    }
    function Kr(e2) {
      return e2 <= 15 ? 1352829926 : e2 <= 31 ? 1548603684 : e2 <= 47 ? 1836072691 : e2 <= 63 ? 2053994217 : 0;
    }
    Pr.blockSize = 512, Pr.outSize = 160, Pr.hmacStrength = 192, Pr.padLength = 64, Pr.prototype._update = function(e2, t2) {
      for (var r2 = this.h[0], i2 = this.h[1], n2 = this.h[2], a2 = this.h[3], s2 = this.h[4], o2 = r2, c2 = i2, u2 = n2, h2 = a2, f2 = s2, d2 = 0; d2 < 80; d2++) {
        var l2 = kr(_r(Sr(r2, Mr(d2, i2, n2, a2), e2[Dr[d2] + t2], Cr(d2)), Ur[d2]), s2);
        r2 = s2, s2 = a2, a2 = _r(n2, 10), n2 = i2, i2 = l2, l2 = kr(_r(Sr(o2, Mr(79 - d2, c2, u2, h2), e2[Rr[d2] + t2], Kr(d2)), Ir[d2]), f2), o2 = f2, f2 = h2, h2 = _r(u2, 10), u2 = c2, c2 = l2;
      }
      l2 = Ar(this.h[1], n2, h2), this.h[1] = Ar(this.h[2], a2, f2), this.h[2] = Ar(this.h[3], s2, o2), this.h[3] = Ar(this.h[4], r2, c2), this.h[4] = Ar(this.h[0], i2, u2), this.h[0] = l2;
    }, Pr.prototype._digest = function(e2) {
      return "hex" === e2 ? kt.toHex32(this.h, "little") : kt.split32(this.h, "little");
    };
    var Dr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    var Rr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    var Ur = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    var Ir = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
    var Br = { ripemd160: xr };
    function Tr(e2, t2) {
      let r2 = e2[0], i2 = e2[1], n2 = e2[2], a2 = e2[3];
      r2 = qr(r2, i2, n2, a2, t2[0], 7, -680876936), a2 = qr(a2, r2, i2, n2, t2[1], 12, -389564586), n2 = qr(n2, a2, r2, i2, t2[2], 17, 606105819), i2 = qr(i2, n2, a2, r2, t2[3], 22, -1044525330), r2 = qr(r2, i2, n2, a2, t2[4], 7, -176418897), a2 = qr(a2, r2, i2, n2, t2[5], 12, 1200080426), n2 = qr(n2, a2, r2, i2, t2[6], 17, -1473231341), i2 = qr(i2, n2, a2, r2, t2[7], 22, -45705983), r2 = qr(r2, i2, n2, a2, t2[8], 7, 1770035416), a2 = qr(a2, r2, i2, n2, t2[9], 12, -1958414417), n2 = qr(n2, a2, r2, i2, t2[10], 17, -42063), i2 = qr(i2, n2, a2, r2, t2[11], 22, -1990404162), r2 = qr(r2, i2, n2, a2, t2[12], 7, 1804603682), a2 = qr(a2, r2, i2, n2, t2[13], 12, -40341101), n2 = qr(n2, a2, r2, i2, t2[14], 17, -1502002290), i2 = qr(i2, n2, a2, r2, t2[15], 22, 1236535329), r2 = Or(r2, i2, n2, a2, t2[1], 5, -165796510), a2 = Or(a2, r2, i2, n2, t2[6], 9, -1069501632), n2 = Or(n2, a2, r2, i2, t2[11], 14, 643717713), i2 = Or(i2, n2, a2, r2, t2[0], 20, -373897302), r2 = Or(r2, i2, n2, a2, t2[5], 5, -701558691), a2 = Or(a2, r2, i2, n2, t2[10], 9, 38016083), n2 = Or(n2, a2, r2, i2, t2[15], 14, -660478335), i2 = Or(i2, n2, a2, r2, t2[4], 20, -405537848), r2 = Or(r2, i2, n2, a2, t2[9], 5, 568446438), a2 = Or(a2, r2, i2, n2, t2[14], 9, -1019803690), n2 = Or(n2, a2, r2, i2, t2[3], 14, -187363961), i2 = Or(i2, n2, a2, r2, t2[8], 20, 1163531501), r2 = Or(r2, i2, n2, a2, t2[13], 5, -1444681467), a2 = Or(a2, r2, i2, n2, t2[2], 9, -51403784), n2 = Or(n2, a2, r2, i2, t2[7], 14, 1735328473), i2 = Or(i2, n2, a2, r2, t2[12], 20, -1926607734), r2 = Fr(r2, i2, n2, a2, t2[5], 4, -378558), a2 = Fr(a2, r2, i2, n2, t2[8], 11, -2022574463), n2 = Fr(n2, a2, r2, i2, t2[11], 16, 1839030562), i2 = Fr(i2, n2, a2, r2, t2[14], 23, -35309556), r2 = Fr(r2, i2, n2, a2, t2[1], 4, -1530992060), a2 = Fr(a2, r2, i2, n2, t2[4], 11, 1272893353), n2 = Fr(n2, a2, r2, i2, t2[7], 16, -155497632), i2 = Fr(i2, n2, a2, r2, t2[10], 23, -1094730640), r2 = Fr(r2, i2, n2, a2, t2[13], 4, 681279174), a2 = Fr(a2, r2, i2, n2, t2[0], 11, -358537222), n2 = Fr(n2, a2, r2, i2, t2[3], 16, -722521979), i2 = Fr(i2, n2, a2, r2, t2[6], 23, 76029189), r2 = Fr(r2, i2, n2, a2, t2[9], 4, -640364487), a2 = Fr(a2, r2, i2, n2, t2[12], 11, -421815835), n2 = Fr(n2, a2, r2, i2, t2[15], 16, 530742520), i2 = Fr(i2, n2, a2, r2, t2[2], 23, -995338651), r2 = Nr(r2, i2, n2, a2, t2[0], 6, -198630844), a2 = Nr(a2, r2, i2, n2, t2[7], 10, 1126891415), n2 = Nr(n2, a2, r2, i2, t2[14], 15, -1416354905), i2 = Nr(i2, n2, a2, r2, t2[5], 21, -57434055), r2 = Nr(r2, i2, n2, a2, t2[12], 6, 1700485571), a2 = Nr(a2, r2, i2, n2, t2[3], 10, -1894986606), n2 = Nr(n2, a2, r2, i2, t2[10], 15, -1051523), i2 = Nr(i2, n2, a2, r2, t2[1], 21, -2054922799), r2 = Nr(r2, i2, n2, a2, t2[8], 6, 1873313359), a2 = Nr(a2, r2, i2, n2, t2[15], 10, -30611744), n2 = Nr(n2, a2, r2, i2, t2[6], 15, -1560198380), i2 = Nr(i2, n2, a2, r2, t2[13], 21, 1309151649), r2 = Nr(r2, i2, n2, a2, t2[4], 6, -145523070), a2 = Nr(a2, r2, i2, n2, t2[11], 10, -1120210379), n2 = Nr(n2, a2, r2, i2, t2[2], 15, 718787259), i2 = Nr(i2, n2, a2, r2, t2[9], 21, -343485551), e2[0] = Hr(r2, e2[0]), e2[1] = Hr(i2, e2[1]), e2[2] = Hr(n2, e2[2]), e2[3] = Hr(a2, e2[3]);
    }
    function zr(e2, t2, r2, i2, n2, a2) {
      return t2 = Hr(Hr(t2, e2), Hr(i2, a2)), Hr(t2 << n2 | t2 >>> 32 - n2, r2);
    }
    function qr(e2, t2, r2, i2, n2, a2, s2) {
      return zr(t2 & r2 | ~t2 & i2, e2, t2, n2, a2, s2);
    }
    function Or(e2, t2, r2, i2, n2, a2, s2) {
      return zr(t2 & i2 | r2 & ~i2, e2, t2, n2, a2, s2);
    }
    function Fr(e2, t2, r2, i2, n2, a2, s2) {
      return zr(t2 ^ r2 ^ i2, e2, t2, n2, a2, s2);
    }
    function Nr(e2, t2, r2, i2, n2, a2, s2) {
      return zr(r2 ^ (t2 | ~i2), e2, t2, n2, a2, s2);
    }
    function jr(e2) {
      const t2 = [];
      let r2;
      for (r2 = 0; r2 < 64; r2 += 4)
        t2[r2 >> 2] = e2.charCodeAt(r2) + (e2.charCodeAt(r2 + 1) << 8) + (e2.charCodeAt(r2 + 2) << 16) + (e2.charCodeAt(r2 + 3) << 24);
      return t2;
    }
    var Lr = "0123456789abcdef".split("");
    function Wr(e2) {
      let t2 = "", r2 = 0;
      for (; r2 < 4; r2++)
        t2 += Lr[e2 >> 8 * r2 + 4 & 15] + Lr[e2 >> 8 * r2 & 15];
      return t2;
    }
    function Hr(e2, t2) {
      return e2 + t2 & 4294967295;
    }
    var Gr = ce.getWebCrypto();
    var Vr = ce.getNodeCrypto();
    var $r = Vr && Vr.getHashes();
    function Zr(e2) {
      if (Vr && $r.includes(e2))
        return async function(t2) {
          const r2 = Vr.createHash(e2);
          return Y(t2, (e3) => {
            r2.update(e3);
          }, () => new Uint8Array(r2.digest()));
        };
    }
    function Yr(e2, t2) {
      return async function(r2, i2 = ge) {
        if (_(r2) && (r2 = await ie(r2)), !ce.isStream(r2) && Gr && t2 && r2.length >= i2.minBytesForWebCrypto)
          return new Uint8Array(await Gr.digest(t2, r2));
        const n2 = e2();
        return Y(r2, (e3) => {
          n2.update(e3);
        }, () => new Uint8Array(n2.digest()));
      };
    }
    function Xr(e2, t2) {
      return async function(r2, i2 = ge) {
        if (_(r2) && (r2 = await ie(r2)), ce.isStream(r2)) {
          const t3 = new e2();
          return Y(r2, (e3) => {
            t3.process(e3);
          }, () => t3.finish().result);
        }
        return Gr && t2 && r2.length >= i2.minBytesForWebCrypto ? new Uint8Array(await Gr.digest(t2, r2)) : e2.bytes(r2);
      };
    }
    var Qr = { md5: Zr("md5") || async function(e2) {
      const t2 = function(e3) {
        const t3 = e3.length, r2 = [1732584193, -271733879, -1732584194, 271733878];
        let i2;
        for (i2 = 64; i2 <= e3.length; i2 += 64)
          Tr(r2, jr(e3.substring(i2 - 64, i2)));
        e3 = e3.substring(i2 - 64);
        const n2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < e3.length; i2++)
          n2[i2 >> 2] |= e3.charCodeAt(i2) << (i2 % 4 << 3);
        if (n2[i2 >> 2] |= 128 << (i2 % 4 << 3), i2 > 55)
          for (Tr(r2, n2), i2 = 0; i2 < 16; i2++)
            n2[i2] = 0;
        return n2[14] = 8 * t3, Tr(r2, n2), r2;
      }(ce.uint8ArrayToString(e2));
      return ce.hexToUint8Array(function(e3) {
        for (let t3 = 0; t3 < e3.length; t3++)
          e3[t3] = Wr(e3[t3]);
        return e3.join("");
      }(t2));
    }, sha1: Zr("sha1") || Xr(ut, "SHA-1"), sha224: Zr("sha224") || Yr(Ht), sha256: Zr("sha256") || Xr(dt, "SHA-256"), sha384: Zr("sha384") || Yr(vr, "SHA-384"), sha512: Zr("sha512") || Yr(sr, "SHA-512"), ripemd: Zr("ripemd160") || Yr(xr) };
    var Jr = { md5: Qr.md5, sha1: Qr.sha1, sha224: Qr.sha224, sha256: Qr.sha256, sha384: Qr.sha384, sha512: Qr.sha512, ripemd: Qr.ripemd, digest: function(e2, t2) {
      switch (e2) {
        case me.hash.md5:
          return this.md5(t2);
        case me.hash.sha1:
          return this.sha1(t2);
        case me.hash.ripemd:
          return this.ripemd(t2);
        case me.hash.sha256:
          return this.sha256(t2);
        case me.hash.sha384:
          return this.sha384(t2);
        case me.hash.sha512:
          return this.sha512(t2);
        case me.hash.sha224:
          return this.sha224(t2);
        default:
          throw Error("Invalid hash function.");
      }
    }, getHashByteLength: function(e2) {
      switch (e2) {
        case me.hash.md5:
          return 16;
        case me.hash.sha1:
        case me.hash.ripemd:
          return 20;
        case me.hash.sha256:
          return 32;
        case me.hash.sha384:
          return 48;
        case me.hash.sha512:
          return 64;
        case me.hash.sha224:
          return 28;
        default:
          throw Error("Invalid hash algorithm.");
      }
    } };
    var ei = class {
      static encrypt(e2, t2, r2) {
        return new ei(t2, r2).encrypt(e2);
      }
      static decrypt(e2, t2, r2) {
        return new ei(t2, r2).decrypt(e2);
      }
      constructor(e2, t2, r2) {
        this.aes = r2 || new Oe(e2, t2, true, "CFB"), delete this.aes.padding;
      }
      encrypt(e2) {
        return Ue(this.aes.AES_Encrypt_process(e2), this.aes.AES_Encrypt_finish());
      }
      decrypt(e2) {
        return Ue(this.aes.AES_Decrypt_process(e2), this.aes.AES_Decrypt_finish());
      }
    };
    var ti = bt(function(e2) {
      !function(e3) {
        var t2 = function(e4) {
          var t3, r3 = new Float64Array(16);
          if (e4)
            for (t3 = 0; t3 < e4.length; t3++)
              r3[t3] = e4[t3];
          return r3;
        }, r2 = function() {
          throw Error("no PRNG");
        }, i2 = new Uint8Array(32);
        i2[0] = 9;
        var n2 = t2(), a2 = t2([1]), s2 = t2([56129, 1]), o2 = t2([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), c2 = t2([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), u2 = t2([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), h2 = t2([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), d2 = t2([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
        function l2(e4, t3, r3, i3) {
          return function(e5, t4, r4, i4, n3) {
            var a3, s3 = 0;
            for (a3 = 0; a3 < n3; a3++)
              s3 |= e5[t4 + a3] ^ r4[i4 + a3];
            return (1 & s3 - 1 >>> 8) - 1;
          }(e4, t3, r3, i3, 32);
        }
        function p2(e4, t3) {
          var r3;
          for (r3 = 0; r3 < 16; r3++)
            e4[r3] = 0 | t3[r3];
        }
        function y2(e4) {
          var t3, r3, i3 = 1;
          for (t3 = 0; t3 < 16; t3++)
            r3 = e4[t3] + i3 + 65535, i3 = Math.floor(r3 / 65536), e4[t3] = r3 - 65536 * i3;
          e4[0] += i3 - 1 + 37 * (i3 - 1);
        }
        function b2(e4, t3, r3) {
          for (var i3, n3 = ~(r3 - 1), a3 = 0; a3 < 16; a3++)
            i3 = n3 & (e4[a3] ^ t3[a3]), e4[a3] ^= i3, t3[a3] ^= i3;
        }
        function m2(e4, r3) {
          var i3, n3, a3, s3 = t2(), o3 = t2();
          for (i3 = 0; i3 < 16; i3++)
            o3[i3] = r3[i3];
          for (y2(o3), y2(o3), y2(o3), n3 = 0; n3 < 2; n3++) {
            for (s3[0] = o3[0] - 65517, i3 = 1; i3 < 15; i3++)
              s3[i3] = o3[i3] - 65535 - (s3[i3 - 1] >> 16 & 1), s3[i3 - 1] &= 65535;
            s3[15] = o3[15] - 32767 - (s3[14] >> 16 & 1), a3 = s3[15] >> 16 & 1, s3[14] &= 65535, b2(o3, s3, 1 - a3);
          }
          for (i3 = 0; i3 < 16; i3++)
            e4[2 * i3] = 255 & o3[i3], e4[2 * i3 + 1] = o3[i3] >> 8;
        }
        function g2(e4, t3) {
          var r3 = new Uint8Array(32), i3 = new Uint8Array(32);
          return m2(r3, e4), m2(i3, t3), l2(r3, 0, i3, 0);
        }
        function w2(e4) {
          var t3 = new Uint8Array(32);
          return m2(t3, e4), 1 & t3[0];
        }
        function v2(e4, t3) {
          var r3;
          for (r3 = 0; r3 < 16; r3++)
            e4[r3] = t3[2 * r3] + (t3[2 * r3 + 1] << 8);
          e4[15] &= 32767;
        }
        function _2(e4, t3, r3) {
          for (var i3 = 0; i3 < 16; i3++)
            e4[i3] = t3[i3] + r3[i3];
        }
        function k2(e4, t3, r3) {
          for (var i3 = 0; i3 < 16; i3++)
            e4[i3] = t3[i3] - r3[i3];
        }
        function A2(e4, t3, r3) {
          var i3, n3, a3 = 0, s3 = 0, o3 = 0, c3 = 0, u3 = 0, h3 = 0, f2 = 0, d3 = 0, l3 = 0, p3 = 0, y3 = 0, b3 = 0, m3 = 0, g3 = 0, w3 = 0, v6 = 0, _3 = 0, k3 = 0, A3 = 0, S3 = 0, E3 = 0, P3 = 0, x3 = 0, M3 = 0, C3 = 0, K3 = 0, D3 = 0, R3 = 0, U3 = 0, I3 = 0, B3 = 0, T3 = r3[0], z3 = r3[1], q3 = r3[2], O3 = r3[3], F3 = r3[4], N2 = r3[5], j2 = r3[6], L2 = r3[7], W2 = r3[8], H2 = r3[9], G2 = r3[10], V2 = r3[11], $2 = r3[12], Z2 = r3[13], Y2 = r3[14], X2 = r3[15];
          a3 += (i3 = t3[0]) * T3, s3 += i3 * z3, o3 += i3 * q3, c3 += i3 * O3, u3 += i3 * F3, h3 += i3 * N2, f2 += i3 * j2, d3 += i3 * L2, l3 += i3 * W2, p3 += i3 * H2, y3 += i3 * G2, b3 += i3 * V2, m3 += i3 * $2, g3 += i3 * Z2, w3 += i3 * Y2, v6 += i3 * X2, s3 += (i3 = t3[1]) * T3, o3 += i3 * z3, c3 += i3 * q3, u3 += i3 * O3, h3 += i3 * F3, f2 += i3 * N2, d3 += i3 * j2, l3 += i3 * L2, p3 += i3 * W2, y3 += i3 * H2, b3 += i3 * G2, m3 += i3 * V2, g3 += i3 * $2, w3 += i3 * Z2, v6 += i3 * Y2, _3 += i3 * X2, o3 += (i3 = t3[2]) * T3, c3 += i3 * z3, u3 += i3 * q3, h3 += i3 * O3, f2 += i3 * F3, d3 += i3 * N2, l3 += i3 * j2, p3 += i3 * L2, y3 += i3 * W2, b3 += i3 * H2, m3 += i3 * G2, g3 += i3 * V2, w3 += i3 * $2, v6 += i3 * Z2, _3 += i3 * Y2, k3 += i3 * X2, c3 += (i3 = t3[3]) * T3, u3 += i3 * z3, h3 += i3 * q3, f2 += i3 * O3, d3 += i3 * F3, l3 += i3 * N2, p3 += i3 * j2, y3 += i3 * L2, b3 += i3 * W2, m3 += i3 * H2, g3 += i3 * G2, w3 += i3 * V2, v6 += i3 * $2, _3 += i3 * Z2, k3 += i3 * Y2, A3 += i3 * X2, u3 += (i3 = t3[4]) * T3, h3 += i3 * z3, f2 += i3 * q3, d3 += i3 * O3, l3 += i3 * F3, p3 += i3 * N2, y3 += i3 * j2, b3 += i3 * L2, m3 += i3 * W2, g3 += i3 * H2, w3 += i3 * G2, v6 += i3 * V2, _3 += i3 * $2, k3 += i3 * Z2, A3 += i3 * Y2, S3 += i3 * X2, h3 += (i3 = t3[5]) * T3, f2 += i3 * z3, d3 += i3 * q3, l3 += i3 * O3, p3 += i3 * F3, y3 += i3 * N2, b3 += i3 * j2, m3 += i3 * L2, g3 += i3 * W2, w3 += i3 * H2, v6 += i3 * G2, _3 += i3 * V2, k3 += i3 * $2, A3 += i3 * Z2, S3 += i3 * Y2, E3 += i3 * X2, f2 += (i3 = t3[6]) * T3, d3 += i3 * z3, l3 += i3 * q3, p3 += i3 * O3, y3 += i3 * F3, b3 += i3 * N2, m3 += i3 * j2, g3 += i3 * L2, w3 += i3 * W2, v6 += i3 * H2, _3 += i3 * G2, k3 += i3 * V2, A3 += i3 * $2, S3 += i3 * Z2, E3 += i3 * Y2, P3 += i3 * X2, d3 += (i3 = t3[7]) * T3, l3 += i3 * z3, p3 += i3 * q3, y3 += i3 * O3, b3 += i3 * F3, m3 += i3 * N2, g3 += i3 * j2, w3 += i3 * L2, v6 += i3 * W2, _3 += i3 * H2, k3 += i3 * G2, A3 += i3 * V2, S3 += i3 * $2, E3 += i3 * Z2, P3 += i3 * Y2, x3 += i3 * X2, l3 += (i3 = t3[8]) * T3, p3 += i3 * z3, y3 += i3 * q3, b3 += i3 * O3, m3 += i3 * F3, g3 += i3 * N2, w3 += i3 * j2, v6 += i3 * L2, _3 += i3 * W2, k3 += i3 * H2, A3 += i3 * G2, S3 += i3 * V2, E3 += i3 * $2, P3 += i3 * Z2, x3 += i3 * Y2, M3 += i3 * X2, p3 += (i3 = t3[9]) * T3, y3 += i3 * z3, b3 += i3 * q3, m3 += i3 * O3, g3 += i3 * F3, w3 += i3 * N2, v6 += i3 * j2, _3 += i3 * L2, k3 += i3 * W2, A3 += i3 * H2, S3 += i3 * G2, E3 += i3 * V2, P3 += i3 * $2, x3 += i3 * Z2, M3 += i3 * Y2, C3 += i3 * X2, y3 += (i3 = t3[10]) * T3, b3 += i3 * z3, m3 += i3 * q3, g3 += i3 * O3, w3 += i3 * F3, v6 += i3 * N2, _3 += i3 * j2, k3 += i3 * L2, A3 += i3 * W2, S3 += i3 * H2, E3 += i3 * G2, P3 += i3 * V2, x3 += i3 * $2, M3 += i3 * Z2, C3 += i3 * Y2, K3 += i3 * X2, b3 += (i3 = t3[11]) * T3, m3 += i3 * z3, g3 += i3 * q3, w3 += i3 * O3, v6 += i3 * F3, _3 += i3 * N2, k3 += i3 * j2, A3 += i3 * L2, S3 += i3 * W2, E3 += i3 * H2, P3 += i3 * G2, x3 += i3 * V2, M3 += i3 * $2, C3 += i3 * Z2, K3 += i3 * Y2, D3 += i3 * X2, m3 += (i3 = t3[12]) * T3, g3 += i3 * z3, w3 += i3 * q3, v6 += i3 * O3, _3 += i3 * F3, k3 += i3 * N2, A3 += i3 * j2, S3 += i3 * L2, E3 += i3 * W2, P3 += i3 * H2, x3 += i3 * G2, M3 += i3 * V2, C3 += i3 * $2, K3 += i3 * Z2, D3 += i3 * Y2, R3 += i3 * X2, g3 += (i3 = t3[13]) * T3, w3 += i3 * z3, v6 += i3 * q3, _3 += i3 * O3, k3 += i3 * F3, A3 += i3 * N2, S3 += i3 * j2, E3 += i3 * L2, P3 += i3 * W2, x3 += i3 * H2, M3 += i3 * G2, C3 += i3 * V2, K3 += i3 * $2, D3 += i3 * Z2, R3 += i3 * Y2, U3 += i3 * X2, w3 += (i3 = t3[14]) * T3, v6 += i3 * z3, _3 += i3 * q3, k3 += i3 * O3, A3 += i3 * F3, S3 += i3 * N2, E3 += i3 * j2, P3 += i3 * L2, x3 += i3 * W2, M3 += i3 * H2, C3 += i3 * G2, K3 += i3 * V2, D3 += i3 * $2, R3 += i3 * Z2, U3 += i3 * Y2, I3 += i3 * X2, v6 += (i3 = t3[15]) * T3, s3 += 38 * (k3 += i3 * q3), o3 += 38 * (A3 += i3 * O3), c3 += 38 * (S3 += i3 * F3), u3 += 38 * (E3 += i3 * N2), h3 += 38 * (P3 += i3 * j2), f2 += 38 * (x3 += i3 * L2), d3 += 38 * (M3 += i3 * W2), l3 += 38 * (C3 += i3 * H2), p3 += 38 * (K3 += i3 * G2), y3 += 38 * (D3 += i3 * V2), b3 += 38 * (R3 += i3 * $2), m3 += 38 * (U3 += i3 * Z2), g3 += 38 * (I3 += i3 * Y2), w3 += 38 * (B3 += i3 * X2), a3 = (i3 = (a3 += 38 * (_3 += i3 * z3)) + (n3 = 1) + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), s3 = (i3 = s3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), o3 = (i3 = o3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), c3 = (i3 = c3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), u3 = (i3 = u3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), h3 = (i3 = h3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), f2 = (i3 = f2 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), d3 = (i3 = d3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), l3 = (i3 = l3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), p3 = (i3 = p3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), y3 = (i3 = y3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), b3 = (i3 = b3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), m3 = (i3 = m3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), g3 = (i3 = g3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), w3 = (i3 = w3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), v6 = (i3 = v6 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), a3 = (i3 = (a3 += n3 - 1 + 37 * (n3 - 1)) + (n3 = 1) + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), s3 = (i3 = s3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), o3 = (i3 = o3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), c3 = (i3 = c3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), u3 = (i3 = u3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), h3 = (i3 = h3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), f2 = (i3 = f2 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), d3 = (i3 = d3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), l3 = (i3 = l3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), p3 = (i3 = p3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), y3 = (i3 = y3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), b3 = (i3 = b3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), m3 = (i3 = m3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), g3 = (i3 = g3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), w3 = (i3 = w3 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), v6 = (i3 = v6 + n3 + 65535) - 65536 * (n3 = Math.floor(i3 / 65536)), a3 += n3 - 1 + 37 * (n3 - 1), e4[0] = a3, e4[1] = s3, e4[2] = o3, e4[3] = c3, e4[4] = u3, e4[5] = h3, e4[6] = f2, e4[7] = d3, e4[8] = l3, e4[9] = p3, e4[10] = y3, e4[11] = b3, e4[12] = m3, e4[13] = g3, e4[14] = w3, e4[15] = v6;
        }
        function S2(e4, t3) {
          A2(e4, t3, t3);
        }
        function E2(e4, r3) {
          var i3, n3 = t2();
          for (i3 = 0; i3 < 16; i3++)
            n3[i3] = r3[i3];
          for (i3 = 253; i3 >= 0; i3--)
            S2(n3, n3), 2 !== i3 && 4 !== i3 && A2(n3, n3, r3);
          for (i3 = 0; i3 < 16; i3++)
            e4[i3] = n3[i3];
        }
        function P2(e4, r3, i3) {
          var n3, a3, o3 = new Uint8Array(32), c3 = new Float64Array(80), u3 = t2(), h3 = t2(), f2 = t2(), d3 = t2(), l3 = t2(), p3 = t2();
          for (a3 = 0; a3 < 31; a3++)
            o3[a3] = r3[a3];
          for (o3[31] = 127 & r3[31] | 64, o3[0] &= 248, v2(c3, i3), a3 = 0; a3 < 16; a3++)
            h3[a3] = c3[a3], d3[a3] = u3[a3] = f2[a3] = 0;
          for (u3[0] = d3[0] = 1, a3 = 254; a3 >= 0; --a3)
            b2(u3, h3, n3 = o3[a3 >>> 3] >>> (7 & a3) & 1), b2(f2, d3, n3), _2(l3, u3, f2), k2(u3, u3, f2), _2(f2, h3, d3), k2(h3, h3, d3), S2(d3, l3), S2(p3, u3), A2(u3, f2, u3), A2(f2, h3, l3), _2(l3, u3, f2), k2(u3, u3, f2), S2(h3, u3), k2(f2, d3, p3), A2(u3, f2, s2), _2(u3, u3, d3), A2(f2, f2, u3), A2(u3, d3, p3), A2(d3, h3, c3), S2(h3, l3), b2(u3, h3, n3), b2(f2, d3, n3);
          for (a3 = 0; a3 < 16; a3++)
            c3[a3 + 16] = u3[a3], c3[a3 + 32] = f2[a3], c3[a3 + 48] = h3[a3], c3[a3 + 64] = d3[a3];
          var y3 = c3.subarray(32), g3 = c3.subarray(16);
          return E2(y3, y3), A2(g3, g3, y3), m2(e4, g3), 0;
        }
        function x2(e4, t3) {
          return P2(e4, t3, i2);
        }
        function M2(e4, r3) {
          var i3 = t2(), n3 = t2(), a3 = t2(), s3 = t2(), o3 = t2(), u3 = t2(), h3 = t2(), f2 = t2(), d3 = t2();
          k2(i3, e4[1], e4[0]), k2(d3, r3[1], r3[0]), A2(i3, i3, d3), _2(n3, e4[0], e4[1]), _2(d3, r3[0], r3[1]), A2(n3, n3, d3), A2(a3, e4[3], r3[3]), A2(a3, a3, c2), A2(s3, e4[2], r3[2]), _2(s3, s3, s3), k2(o3, n3, i3), k2(u3, s3, a3), _2(h3, s3, a3), _2(f2, n3, i3), A2(e4[0], o3, u3), A2(e4[1], f2, h3), A2(e4[2], h3, u3), A2(e4[3], o3, f2);
        }
        function C2(e4, t3, r3) {
          var i3;
          for (i3 = 0; i3 < 4; i3++)
            b2(e4[i3], t3[i3], r3);
        }
        function K2(e4, r3) {
          var i3 = t2(), n3 = t2(), a3 = t2();
          E2(a3, r3[2]), A2(i3, r3[0], a3), A2(n3, r3[1], a3), m2(e4, n3), e4[31] ^= w2(i3) << 7;
        }
        function D2(e4, t3, r3) {
          var i3, s3;
          for (p2(e4[0], n2), p2(e4[1], a2), p2(e4[2], a2), p2(e4[3], n2), s3 = 255; s3 >= 0; --s3)
            C2(e4, t3, i3 = r3[s3 / 8 | 0] >> (7 & s3) & 1), M2(t3, e4), M2(e4, e4), C2(e4, t3, i3);
        }
        function R2(e4, r3) {
          var i3 = [t2(), t2(), t2(), t2()];
          p2(i3[0], u2), p2(i3[1], h2), p2(i3[2], a2), A2(i3[3], u2, h2), D2(e4, i3, r3);
        }
        function U2(i3, n3, a3) {
          var s3, o3, c3 = [t2(), t2(), t2(), t2()];
          for (a3 || r2(n3, 32), (s3 = e3.hash(n3.subarray(0, 32)))[0] &= 248, s3[31] &= 127, s3[31] |= 64, R2(c3, s3), K2(i3, c3), o3 = 0; o3 < 32; o3++)
            n3[o3 + 32] = i3[o3];
          return 0;
        }
        var I2 = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
        function B2(e4, t3) {
          var r3, i3, n3, a3;
          for (i3 = 63; i3 >= 32; --i3) {
            for (r3 = 0, n3 = i3 - 32, a3 = i3 - 12; n3 < a3; ++n3)
              t3[n3] += r3 - 16 * t3[i3] * I2[n3 - (i3 - 32)], r3 = Math.floor((t3[n3] + 128) / 256), t3[n3] -= 256 * r3;
            t3[n3] += r3, t3[i3] = 0;
          }
          for (r3 = 0, n3 = 0; n3 < 32; n3++)
            t3[n3] += r3 - (t3[31] >> 4) * I2[n3], r3 = t3[n3] >> 8, t3[n3] &= 255;
          for (n3 = 0; n3 < 32; n3++)
            t3[n3] -= r3 * I2[n3];
          for (i3 = 0; i3 < 32; i3++)
            t3[i3 + 1] += t3[i3] >> 8, e4[i3] = 255 & t3[i3];
        }
        function T2(e4) {
          var t3, r3 = new Float64Array(64);
          for (t3 = 0; t3 < 64; t3++)
            r3[t3] = e4[t3];
          for (t3 = 0; t3 < 64; t3++)
            e4[t3] = 0;
          B2(e4, r3);
        }
        function z2(e4, r3) {
          var i3 = t2(), s3 = t2(), c3 = t2(), u3 = t2(), h3 = t2(), f2 = t2(), l3 = t2();
          return p2(e4[2], a2), v2(e4[1], r3), S2(c3, e4[1]), A2(u3, c3, o2), k2(c3, c3, e4[2]), _2(u3, e4[2], u3), S2(h3, u3), S2(f2, h3), A2(l3, f2, h3), A2(i3, l3, c3), A2(i3, i3, u3), function(e5, r4) {
            var i4, n3 = t2();
            for (i4 = 0; i4 < 16; i4++)
              n3[i4] = r4[i4];
            for (i4 = 250; i4 >= 0; i4--)
              S2(n3, n3), 1 !== i4 && A2(n3, n3, r4);
            for (i4 = 0; i4 < 16; i4++)
              e5[i4] = n3[i4];
          }(i3, i3), A2(i3, i3, c3), A2(i3, i3, u3), A2(i3, i3, u3), A2(e4[0], i3, u3), S2(s3, e4[0]), A2(s3, s3, u3), g2(s3, c3) && A2(e4[0], e4[0], d2), S2(s3, e4[0]), A2(s3, s3, u3), g2(s3, c3) ? -1 : (w2(e4[0]) === r3[31] >> 7 && k2(e4[0], n2, e4[0]), A2(e4[3], e4[0], e4[1]), 0);
        }
        var q2 = 64;
        function O2() {
          for (var e4 = 0; e4 < arguments.length; e4++)
            if (!(arguments[e4] instanceof Uint8Array))
              throw new TypeError("unexpected type, use Uint8Array");
        }
        function F2(e4) {
          for (var t3 = 0; t3 < e4.length; t3++)
            e4[t3] = 0;
        }
        e3.scalarMult = function(e4, t3) {
          if (O2(e4, t3), 32 !== e4.length)
            throw Error("bad n size");
          if (32 !== t3.length)
            throw Error("bad p size");
          var r3 = new Uint8Array(32);
          return P2(r3, e4, t3), r3;
        }, e3.box = {}, e3.box.keyPair = function() {
          var e4, t3, i3 = new Uint8Array(32), n3 = new Uint8Array(32);
          return e4 = i3, r2(t3 = n3, 32), x2(e4, t3), { publicKey: i3, secretKey: n3 };
        }, e3.box.keyPair.fromSecretKey = function(e4) {
          if (O2(e4), 32 !== e4.length)
            throw Error("bad secret key size");
          var t3 = new Uint8Array(32);
          return x2(t3, e4), { publicKey: t3, secretKey: new Uint8Array(e4) };
        }, e3.sign = function(r3, i3) {
          if (O2(r3, i3), 64 !== i3.length)
            throw Error("bad secret key size");
          var n3 = new Uint8Array(q2 + r3.length);
          return function(r4, i4, n4, a3) {
            var s3, o3, c3, u3, h3, f2 = new Float64Array(64), d3 = [t2(), t2(), t2(), t2()];
            (s3 = e3.hash(a3.subarray(0, 32)))[0] &= 248, s3[31] &= 127, s3[31] |= 64;
            var l3 = n4 + 64;
            for (u3 = 0; u3 < n4; u3++)
              r4[64 + u3] = i4[u3];
            for (u3 = 0; u3 < 32; u3++)
              r4[32 + u3] = s3[32 + u3];
            for (T2(c3 = e3.hash(r4.subarray(32, l3))), R2(d3, c3), K2(r4, d3), u3 = 32; u3 < 64; u3++)
              r4[u3] = a3[u3];
            for (T2(o3 = e3.hash(r4.subarray(0, l3))), u3 = 0; u3 < 64; u3++)
              f2[u3] = 0;
            for (u3 = 0; u3 < 32; u3++)
              f2[u3] = c3[u3];
            for (u3 = 0; u3 < 32; u3++)
              for (h3 = 0; h3 < 32; h3++)
                f2[u3 + h3] += o3[u3] * s3[h3];
            B2(r4.subarray(32), f2);
          }(n3, r3, r3.length, i3), n3;
        }, e3.sign.detached = function(t3, r3) {
          for (var i3 = e3.sign(t3, r3), n3 = new Uint8Array(q2), a3 = 0; a3 < n3.length; a3++)
            n3[a3] = i3[a3];
          return n3;
        }, e3.sign.detached.verify = function(r3, i3, n3) {
          if (O2(r3, i3, n3), i3.length !== q2)
            throw Error("bad signature size");
          if (32 !== n3.length)
            throw Error("bad public key size");
          var a3, s3 = new Uint8Array(q2 + r3.length), o3 = new Uint8Array(q2 + r3.length);
          for (a3 = 0; a3 < q2; a3++)
            s3[a3] = i3[a3];
          for (a3 = 0; a3 < r3.length; a3++)
            s3[a3 + q2] = r3[a3];
          return function(r4, i4, n4, a4) {
            var s4, o4, c3 = new Uint8Array(32), u3 = [t2(), t2(), t2(), t2()], h3 = [t2(), t2(), t2(), t2()];
            if (n4 < 64)
              return -1;
            if (z2(h3, a4))
              return -1;
            for (s4 = 0; s4 < n4; s4++)
              r4[s4] = i4[s4];
            for (s4 = 0; s4 < 32; s4++)
              r4[s4 + 32] = a4[s4];
            if (T2(o4 = e3.hash(r4.subarray(0, n4))), D2(u3, h3, o4), R2(h3, i4.subarray(32)), M2(u3, h3), K2(c3, u3), n4 -= 64, l2(i4, 0, c3, 0)) {
              for (s4 = 0; s4 < n4; s4++)
                r4[s4] = 0;
              return -1;
            }
            for (s4 = 0; s4 < n4; s4++)
              r4[s4] = i4[s4 + 64];
            return n4;
          }(o3, s3, s3.length, n3) >= 0;
        }, e3.sign.keyPair = function() {
          var e4 = new Uint8Array(32), t3 = new Uint8Array(64);
          return U2(e4, t3), { publicKey: e4, secretKey: t3 };
        }, e3.sign.keyPair.fromSecretKey = function(e4) {
          if (O2(e4), 64 !== e4.length)
            throw Error("bad secret key size");
          for (var t3 = new Uint8Array(32), r3 = 0; r3 < t3.length; r3++)
            t3[r3] = e4[32 + r3];
          return { publicKey: t3, secretKey: new Uint8Array(e4) };
        }, e3.sign.keyPair.fromSeed = function(e4) {
          if (O2(e4), 32 !== e4.length)
            throw Error("bad seed size");
          for (var t3 = new Uint8Array(32), r3 = new Uint8Array(64), i3 = 0; i3 < 32; i3++)
            r3[i3] = e4[i3];
          return U2(t3, r3, true), { publicKey: t3, secretKey: r3 };
        }, e3.setPRNG = function(e4) {
          r2 = e4;
        }, function() {
          var t3 = "undefined" != typeof self ? self.crypto || self.msCrypto : null;
          if (t3 && t3.getRandomValues) {
            e3.setPRNG(function(e4, r3) {
              var i3, n3 = new Uint8Array(r3);
              for (i3 = 0; i3 < r3; i3 += 65536)
                t3.getRandomValues(n3.subarray(i3, i3 + Math.min(r3 - i3, 65536)));
              for (i3 = 0; i3 < r3; i3++)
                e4[i3] = n3[i3];
              F2(n3);
            });
          } else
            (t3 = f.default) && t3.randomBytes && e3.setPRNG(function(e4, r3) {
              var i3, n3 = t3.randomBytes(r3);
              for (i3 = 0; i3 < r3; i3++)
                e4[i3] = n3[i3];
              F2(n3);
            });
        }();
      }(e2.exports ? e2.exports : self.nacl = self.nacl || {});
    });
    var ri = ce.getNodeCrypto();
    async function ii(e2) {
      const t2 = new Uint8Array(e2);
      if ("undefined" != typeof crypto && crypto.getRandomValues)
        crypto.getRandomValues(t2);
      else if (ri) {
        const e3 = ri.randomBytes(t2.length);
        t2.set(e3);
      } else {
        if (!ai.buffer)
          throw Error("No secure random number generator available.");
        await ai.get(t2);
      }
      return t2;
    }
    async function ni(e2, t2) {
      const r2 = await ce.getBigInteger();
      if (t2.lt(e2))
        throw Error("Illegal parameter value: max <= min");
      const i2 = t2.sub(e2), n2 = i2.byteLength();
      return new r2(await ii(n2 + 8)).mod(i2).add(e2);
    }
    var ai = new class {
      constructor() {
        this.buffer = null, this.size = null, this.callback = null;
      }
      init(e2, t2) {
        this.buffer = new Uint8Array(e2), this.size = 0, this.callback = t2;
      }
      set(e2) {
        if (!this.buffer)
          throw Error("RandomBuffer is not initialized");
        if (!(e2 instanceof Uint8Array))
          throw Error("Invalid type: buf not an Uint8Array");
        const t2 = this.buffer.length - this.size;
        e2.length > t2 && (e2 = e2.subarray(0, t2)), this.buffer.set(e2, this.size), this.size += e2.length;
      }
      async get(e2) {
        if (!this.buffer)
          throw Error("RandomBuffer is not initialized");
        if (!(e2 instanceof Uint8Array))
          throw Error("Invalid type: buf not an Uint8Array");
        if (this.size < e2.length) {
          if (!this.callback)
            throw Error("Random number buffer depleted");
          return await this.callback(), this.get(e2);
        }
        for (let t2 = 0; t2 < e2.length; t2++)
          e2[t2] = this.buffer[--this.size], this.buffer[this.size] = 0;
      }
    }();
    var si = /* @__PURE__ */ Object.freeze({ __proto__: null, getRandomBytes: ii, getRandomBigInteger: ni, randomBuffer: ai });
    async function oi(e2, t2, r2) {
      const i2 = await ce.getBigInteger(), n2 = new i2(1), a2 = n2.leftShift(new i2(e2 - 1)), s2 = new i2(30), o2 = [1, 6, 5, 4, 3, 2, 1, 4, 3, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1, 2], c2 = await ni(a2, a2.leftShift(n2));
      let u2 = c2.mod(s2).toNumber();
      do {
        c2.iadd(new i2(o2[u2])), u2 = (u2 + o2[u2]) % o2.length, c2.bitLength() > e2 && (c2.imod(a2.leftShift(n2)).iadd(a2), u2 = c2.mod(s2).toNumber());
      } while (!await ci(c2, t2, r2));
      return c2;
    }
    async function ci(e2, t2, r2) {
      return !(t2 && !e2.dec().gcd(t2).isOne()) && (!!await async function(e3) {
        const t3 = await ce.getBigInteger();
        return ui.every((r3) => 0 !== e3.mod(new t3(r3)));
      }(e2) && (!!await async function(e3, t3) {
        const r3 = await ce.getBigInteger();
        return (t3 = t3 || new r3(2)).modExp(e3.dec(), e3).isOne();
      }(e2) && !!await async function(e3, t3, r3) {
        const i2 = await ce.getBigInteger(), n2 = e3.bitLength();
        t3 || (t3 = Math.max(1, n2 / 48 | 0));
        const a2 = e3.dec();
        let s2 = 0;
        for (; !a2.getBit(s2); )
          s2++;
        const o2 = e3.rightShift(new i2(s2));
        for (; t3 > 0; t3--) {
          let t4, n3 = (r3 ? r3() : await ni(new i2(2), a2)).modExp(o2, e3);
          if (!n3.isOne() && !n3.equal(a2)) {
            for (t4 = 1; t4 < s2; t4++) {
              if (n3 = n3.mul(n3).mod(e3), n3.isOne())
                return false;
              if (n3.equal(a2))
                break;
            }
            if (t4 === s2)
              return false;
          }
        }
        return true;
      }(e2, r2)));
    }
    var ui = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999];
    var hi = [];
    async function fi(e2, t2) {
      const r2 = e2.length;
      if (r2 > t2 - 11)
        throw Error("Message too long");
      const i2 = await async function(e3) {
        const t3 = new Uint8Array(e3);
        let r3 = 0;
        for (; r3 < e3; ) {
          const i3 = await ii(e3 - r3);
          for (let e4 = 0; e4 < i3.length; e4++)
            0 !== i3[e4] && (t3[r3++] = i3[e4]);
        }
        return t3;
      }(t2 - r2 - 3), n2 = new Uint8Array(t2);
      return n2[1] = 2, n2.set(i2, 2), n2.set(e2, t2 - r2), n2;
    }
    function di(e2, t2) {
      let r2 = 2, i2 = 1;
      for (let t3 = r2; t3 < e2.length; t3++)
        i2 &= 0 !== e2[t3], r2 += i2;
      const n2 = r2 - 2, a2 = e2.subarray(r2 + 1), s2 = 0 === e2[0] & 2 === e2[1] & n2 >= 8 & !i2;
      if (t2)
        return ce.selectUint8Array(s2, a2, t2);
      if (s2)
        return a2;
      throw Error("Decryption error");
    }
    async function li(e2, t2, r2) {
      let i2;
      if (t2.length !== Jr.getHashByteLength(e2))
        throw Error("Invalid hash length");
      const n2 = new Uint8Array(hi[e2].length);
      for (i2 = 0; i2 < hi[e2].length; i2++)
        n2[i2] = hi[e2][i2];
      const a2 = n2.length + t2.length;
      if (r2 < a2 + 11)
        throw Error("Intended encoded message length too short");
      const s2 = new Uint8Array(r2 - a2 - 3).fill(255), o2 = new Uint8Array(r2);
      return o2[1] = 1, o2.set(s2, 2), o2.set(n2, r2 - a2), o2.set(t2, r2 - t2.length), o2;
    }
    hi[1] = [48, 32, 48, 12, 6, 8, 42, 134, 72, 134, 247, 13, 2, 5, 5, 0, 4, 16], hi[2] = [48, 33, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 4, 20], hi[3] = [48, 33, 48, 9, 6, 5, 43, 36, 3, 2, 1, 5, 0, 4, 20], hi[8] = [48, 49, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32], hi[9] = [48, 65, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 4, 48], hi[10] = [48, 81, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 4, 64], hi[11] = [48, 45, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 4, 5, 0, 4, 28];
    var pi = /* @__PURE__ */ Object.freeze({ __proto__: null, emeEncode: fi, emeDecode: di, emsaEncode: li });
    var yi = ce.getWebCrypto();
    var bi = ce.getNodeCrypto();
    var mi = bi ? y.default : void 0;
    var gi = bi ? mi.define("RSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
    }) : void 0;
    var wi = bi ? mi.define("RSAPubliceKey", function() {
      this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
    }) : void 0;
    var vi = /* @__PURE__ */ Object.freeze({ __proto__: null, sign: async function(e2, t2, r2, i2, n2, a2, s2, o2, c2) {
      if (t2 && !ce.isStream(t2)) {
        if (ce.getWebCrypto())
          try {
            return await async function(e3, t3, r3, i3, n3, a3, s3, o3) {
              const c3 = await async function(e4, t4, r4, i4, n4, a4) {
                const s4 = await ce.getBigInteger(), o4 = new s4(i4), c4 = new s4(n4), u3 = new s4(r4);
                let h3 = u3.mod(c4.dec()), f2 = u3.mod(o4.dec());
                return f2 = f2.toUint8Array(), h3 = h3.toUint8Array(), { kty: "RSA", n: ye(e4, true), e: ye(t4, true), d: ye(r4, true), p: ye(n4, true), q: ye(i4, true), dp: ye(h3, true), dq: ye(f2, true), qi: ye(a4, true), ext: true };
              }(r3, i3, n3, a3, s3, o3), u2 = { name: "RSASSA-PKCS1-v1_5", hash: { name: e3 } }, h2 = await yi.importKey("jwk", c3, u2, false, ["sign"]);
              return new Uint8Array(await yi.sign("RSASSA-PKCS1-v1_5", h2, t3));
            }(me.read(me.webHash, e2), t2, r2, i2, n2, a2, s2, o2);
          } catch (e3) {
            ce.printDebugError(e3);
          }
        else if (ce.getNodeCrypto())
          return async function(e3, t3, r3, i3, n3, a3, s3, o3) {
            const { default: c3 } = await Promise.resolve().then(function() {
              return Ud;
            }), u2 = new c3(a3), h2 = new c3(s3), f2 = new c3(n3), d2 = f2.mod(h2.subn(1)), l2 = f2.mod(u2.subn(1)), p2 = bi.createSign(me.read(me.hash, e3));
            p2.write(t3), p2.end();
            const y2 = { version: 0, modulus: new c3(r3), publicExponent: new c3(i3), privateExponent: new c3(n3), prime1: new c3(s3), prime2: new c3(a3), exponent1: d2, exponent2: l2, coefficient: new c3(o3) };
            if (void 0 !== bi.createPrivateKey) {
              const e4 = gi.encode(y2, "der");
              return new Uint8Array(p2.sign({ key: e4, format: "der", type: "pkcs1" }));
            }
            const b2 = gi.encode(y2, "pem", { label: "RSA PRIVATE KEY" });
            return new Uint8Array(p2.sign(b2));
          }(e2, t2, r2, i2, n2, a2, s2, o2);
      }
      return async function(e3, t3, r3, i3) {
        const n3 = await ce.getBigInteger();
        t3 = new n3(t3);
        const a3 = new n3(await li(e3, i3, t3.byteLength()));
        if (r3 = new n3(r3), a3.gte(t3))
          throw Error("Message size cannot exceed modulus size");
        return a3.modExp(r3, t3).toUint8Array("be", t3.byteLength());
      }(e2, r2, n2, c2);
    }, verify: async function(e2, t2, r2, i2, n2, a2) {
      if (t2 && !ce.isStream(t2)) {
        if (ce.getWebCrypto())
          try {
            return await async function(e3, t3, r3, i3, n3) {
              const a3 = function(e4, t4) {
                return { kty: "RSA", n: ye(e4, true), e: ye(t4, true), ext: true };
              }(i3, n3), s2 = await yi.importKey("jwk", a3, { name: "RSASSA-PKCS1-v1_5", hash: { name: e3 } }, false, ["verify"]);
              return yi.verify("RSASSA-PKCS1-v1_5", s2, r3, t3);
            }(me.read(me.webHash, e2), t2, r2, i2, n2);
          } catch (e3) {
            ce.printDebugError(e3);
          }
        else if (ce.getNodeCrypto())
          return async function(e3, t3, r3, i3, n3) {
            const { default: a3 } = await Promise.resolve().then(function() {
              return Ud;
            }), s2 = bi.createVerify(me.read(me.hash, e3));
            s2.write(t3), s2.end();
            const o2 = { modulus: new a3(i3), publicExponent: new a3(n3) };
            let c2;
            if (void 0 !== bi.createPrivateKey) {
              c2 = { key: wi.encode(o2, "der"), format: "der", type: "pkcs1" };
            } else
              c2 = wi.encode(o2, "pem", { label: "RSA PUBLIC KEY" });
            try {
              return await s2.verify(c2, r3);
            } catch (e4) {
              return false;
            }
          }(e2, t2, r2, i2, n2);
      }
      return async function(e3, t3, r3, i3, n3) {
        const a3 = await ce.getBigInteger();
        if (r3 = new a3(r3), t3 = new a3(t3), i3 = new a3(i3), t3.gte(r3))
          throw Error("Signature size cannot exceed modulus size");
        const s2 = t3.modExp(i3, r3).toUint8Array("be", r3.byteLength()), o2 = await li(e3, n3, r3.byteLength());
        return ce.equalsUint8Array(s2, o2);
      }(e2, r2, i2, n2, a2);
    }, encrypt: async function(e2, t2, r2) {
      return ce.getNodeCrypto() ? async function(e3, t3, r3) {
        const { default: i2 } = await Promise.resolve().then(function() {
          return Ud;
        }), n2 = { modulus: new i2(t3), publicExponent: new i2(r3) };
        let a2;
        if (void 0 !== bi.createPrivateKey) {
          a2 = { key: wi.encode(n2, "der"), format: "der", type: "pkcs1", padding: bi.constants.RSA_PKCS1_PADDING };
        } else {
          a2 = { key: wi.encode(n2, "pem", { label: "RSA PUBLIC KEY" }), padding: bi.constants.RSA_PKCS1_PADDING };
        }
        return new Uint8Array(bi.publicEncrypt(a2, e3));
      }(e2, t2, r2) : async function(e3, t3, r3) {
        const i2 = await ce.getBigInteger();
        if (t3 = new i2(t3), e3 = new i2(await fi(e3, t3.byteLength())), r3 = new i2(r3), e3.gte(t3))
          throw Error("Message size cannot exceed modulus size");
        return e3.modExp(r3, t3).toUint8Array("be", t3.byteLength());
      }(e2, t2, r2);
    }, decrypt: async function(e2, t2, r2, i2, n2, a2, s2, o2) {
      return ce.getNodeCrypto() ? async function(e3, t3, r3, i3, n3, a3, s3, o3) {
        const { default: c2 } = await Promise.resolve().then(function() {
          return Ud;
        }), u2 = new c2(n3), h2 = new c2(a3), f2 = new c2(i3), d2 = f2.mod(h2.subn(1)), l2 = f2.mod(u2.subn(1)), p2 = { version: 0, modulus: new c2(t3), publicExponent: new c2(r3), privateExponent: new c2(i3), prime1: new c2(a3), prime2: new c2(n3), exponent1: d2, exponent2: l2, coefficient: new c2(s3) };
        let y2;
        if (void 0 !== bi.createPrivateKey) {
          y2 = { key: gi.encode(p2, "der"), format: "der", type: "pkcs1", padding: bi.constants.RSA_PKCS1_PADDING };
        } else {
          y2 = { key: gi.encode(p2, "pem", { label: "RSA PRIVATE KEY" }), padding: bi.constants.RSA_PKCS1_PADDING };
        }
        try {
          return new Uint8Array(bi.privateDecrypt(y2, e3));
        } catch (e4) {
          if (o3)
            return o3;
          throw Error("Decryption error");
        }
      }(e2, t2, r2, i2, n2, a2, s2, o2) : async function(e3, t3, r3, i3, n3, a3, s3, o3) {
        const c2 = await ce.getBigInteger();
        if (e3 = new c2(e3), t3 = new c2(t3), r3 = new c2(r3), i3 = new c2(i3), n3 = new c2(n3), a3 = new c2(a3), s3 = new c2(s3), e3.gte(t3))
          throw Error("Data too large.");
        const u2 = i3.mod(a3.dec()), h2 = i3.mod(n3.dec()), f2 = (await ni(new c2(2), t3)).mod(t3), d2 = f2.modInv(t3).modExp(r3, t3), l2 = (e3 = e3.mul(d2).mod(t3)).modExp(h2, n3), p2 = e3.modExp(u2, a3);
        let y2 = s3.mul(p2.sub(l2)).mod(a3).mul(n3).add(l2);
        return y2 = y2.mul(f2).mod(t3), di(y2.toUint8Array("be", t3.byteLength()), o3);
      }(e2, t2, r2, i2, n2, a2, s2, o2);
    }, generate: async function(e2, t2) {
      if (t2 = new (await ce.getBigInteger())(t2), ce.getWebCrypto()) {
        const r3 = { name: "RSASSA-PKCS1-v1_5", modulusLength: e2, publicExponent: t2.toUint8Array(), hash: { name: "SHA-1" } }, i3 = await yi.generateKey(r3, true, ["sign", "verify"]), n3 = await yi.exportKey("jwk", i3.privateKey);
        return { n: pe(n3.n), e: t2.toUint8Array(), d: pe(n3.d), p: pe(n3.q), q: pe(n3.p), u: pe(n3.qi) };
      }
      if (ce.getNodeCrypto() && bi.generateKeyPair && gi) {
        const r3 = { modulusLength: e2, publicExponent: t2.toNumber(), publicKeyEncoding: { type: "pkcs1", format: "der" }, privateKeyEncoding: { type: "pkcs1", format: "der" } }, i3 = await new Promise((e3, t3) => bi.generateKeyPair("rsa", r3, (r4, i4, n3) => {
          r4 ? t3(r4) : e3(gi.decode(n3, "der"));
        }));
        return { n: i3.modulus.toArrayLike(Uint8Array), e: i3.publicExponent.toArrayLike(Uint8Array), d: i3.privateExponent.toArrayLike(Uint8Array), p: i3.prime2.toArrayLike(Uint8Array), q: i3.prime1.toArrayLike(Uint8Array), u: i3.coefficient.toArrayLike(Uint8Array) };
      }
      let r2, i2, n2;
      do {
        i2 = await oi(e2 - (e2 >> 1), t2, 40), r2 = await oi(e2 >> 1, t2, 40), n2 = r2.mul(i2);
      } while (n2.bitLength() !== e2);
      const a2 = r2.dec().imul(i2.dec());
      return i2.lt(r2) && ([r2, i2] = [i2, r2]), { n: n2.toUint8Array(), e: t2.toUint8Array(), d: t2.modInv(a2).toUint8Array(), p: r2.toUint8Array(), q: i2.toUint8Array(), u: r2.modInv(i2).toUint8Array() };
    }, validateParams: async function(e2, t2, r2, i2, n2, a2) {
      const s2 = await ce.getBigInteger();
      if (e2 = new s2(e2), i2 = new s2(i2), n2 = new s2(n2), !i2.mul(n2).equal(e2))
        return false;
      const o2 = new s2(2);
      if (a2 = new s2(a2), !i2.mul(a2).mod(n2).isOne())
        return false;
      t2 = new s2(t2), r2 = new s2(r2);
      const c2 = new s2(Math.floor(e2.bitLength() / 3)), u2 = await ni(o2, o2.leftShift(c2)), h2 = u2.mul(r2).mul(t2);
      return !(!h2.mod(i2.dec()).equal(u2) || !h2.mod(n2.dec()).equal(u2));
    } });
    var _i = /* @__PURE__ */ Object.freeze({ __proto__: null, encrypt: async function(e2, t2, r2, i2) {
      const n2 = await ce.getBigInteger();
      t2 = new n2(t2), r2 = new n2(r2), i2 = new n2(i2);
      const a2 = new n2(await fi(e2, t2.byteLength())), s2 = await ni(new n2(1), t2.dec());
      return { c1: r2.modExp(s2, t2).toUint8Array(), c2: i2.modExp(s2, t2).imul(a2).imod(t2).toUint8Array() };
    }, decrypt: async function(e2, t2, r2, i2, n2) {
      const a2 = await ce.getBigInteger();
      return e2 = new a2(e2), t2 = new a2(t2), r2 = new a2(r2), i2 = new a2(i2), di(e2.modExp(i2, r2).modInv(r2).imul(t2).imod(r2).toUint8Array("be", r2.byteLength()), n2);
    }, validateParams: async function(e2, t2, r2, i2) {
      const n2 = await ce.getBigInteger();
      e2 = new n2(e2), t2 = new n2(t2), r2 = new n2(r2);
      const a2 = new n2(1);
      if (t2.lte(a2) || t2.gte(e2))
        return false;
      const s2 = new n2(e2.bitLength()), o2 = new n2(1023);
      if (s2.lt(o2))
        return false;
      if (!t2.modExp(e2.dec(), e2).isOne())
        return false;
      let c2 = t2;
      const u2 = new n2(1), h2 = new n2(2).leftShift(new n2(17));
      for (; u2.lt(h2); ) {
        if (c2 = c2.mul(t2).imod(e2), c2.isOne())
          return false;
        u2.iinc();
      }
      i2 = new n2(i2);
      const f2 = new n2(2), d2 = await ni(f2.leftShift(s2.dec()), f2.leftShift(s2)), l2 = e2.dec().imul(d2).iadd(i2);
      return !!r2.equal(t2.modExp(l2, e2));
    } });
    var ki = class {
      constructor(e2) {
        if (e2 instanceof ki)
          this.oid = e2.oid;
        else if (ce.isArray(e2) || ce.isUint8Array(e2)) {
          if (6 === (e2 = new Uint8Array(e2))[0]) {
            if (e2[1] !== e2.length - 2)
              throw Error("Length mismatch in DER encoded oid");
            e2 = e2.subarray(2);
          }
          this.oid = e2;
        } else
          this.oid = "";
      }
      read(e2) {
        if (e2.length >= 1) {
          const t2 = e2[0];
          if (e2.length >= 1 + t2)
            return this.oid = e2.subarray(1, 1 + t2), 1 + this.oid.length;
        }
        throw Error("Invalid oid");
      }
      write() {
        return ce.concatUint8Array([new Uint8Array([this.oid.length]), this.oid]);
      }
      toHex() {
        return ce.uint8ArrayToHex(this.oid);
      }
      getName() {
        const e2 = this.toHex();
        if (me.curve[e2])
          return me.write(me.curve, e2);
        throw Error("Unknown curve object identifier.");
      }
    };
    function Ai(e2, t2) {
      return e2.keyPair({ priv: t2 });
    }
    function Si(e2, t2) {
      const r2 = e2.keyPair({ pub: t2 });
      if (true !== r2.validate().result)
        throw Error("Invalid elliptic public key");
      return r2;
    }
    async function Ei(e2) {
      if (!ge.useIndutnyElliptic)
        throw Error("This curve is only supported in the full build of OpenPGP.js");
      const { default: t2 } = await Promise.resolve().then(function() {
        return Ql;
      });
      return new t2.ec(e2);
    }
    function Pi(e2) {
      let t2, r2 = 0;
      const i2 = e2[0];
      return i2 < 192 ? ([r2] = e2, t2 = 1) : i2 < 255 ? (r2 = (e2[0] - 192 << 8) + e2[1] + 192, t2 = 2) : 255 === i2 && (r2 = ce.readNumber(e2.subarray(1, 5)), t2 = 5), { len: r2, offset: t2 };
    }
    function xi(e2) {
      return e2 < 192 ? new Uint8Array([e2]) : e2 > 191 && e2 < 8384 ? new Uint8Array([192 + (e2 - 192 >> 8), e2 - 192 & 255]) : ce.concatUint8Array([new Uint8Array([255]), ce.writeNumber(e2, 4)]);
    }
    function Mi(e2) {
      if (e2 < 0 || e2 > 30)
        throw Error("Partial Length power must be between 1 and 30");
      return new Uint8Array([224 + e2]);
    }
    function Ci(e2) {
      return new Uint8Array([192 | e2]);
    }
    function Ki(e2, t2) {
      return ce.concatUint8Array([Ci(e2), xi(t2)]);
    }
    function Di(e2) {
      return [me.packet.literalData, me.packet.compressedData, me.packet.symmetricallyEncryptedData, me.packet.symEncryptedIntegrityProtectedData, me.packet.aeadEncryptedData].includes(e2);
    }
    async function Ri(e2, t2) {
      const r2 = H(e2);
      let i2, n2;
      try {
        const a2 = await r2.peekBytes(2);
        if (!a2 || a2.length < 2 || 0 == (128 & a2[0]))
          throw Error("Error during parsing. This message / key probably does not conform to a valid OpenPGP format.");
        const s2 = await r2.readByte();
        let o2, c2, u2 = -1, h2 = -1;
        h2 = 0, 0 != (64 & s2) && (h2 = 1), h2 ? u2 = 63 & s2 : (u2 = (63 & s2) >> 2, c2 = 3 & s2);
        const f2 = Di(u2);
        let d2, l2 = null;
        if (f2) {
          if ("array" === ce.isStream(e2)) {
            const e3 = new v();
            i2 = G(e3), l2 = e3;
          } else {
            const e3 = new O();
            i2 = G(e3.writable), l2 = e3.readable;
          }
          n2 = t2({ tag: u2, packet: l2 });
        } else
          l2 = [];
        do {
          if (h2) {
            const e3 = await r2.readByte();
            if (d2 = false, e3 < 192)
              o2 = e3;
            else if (e3 >= 192 && e3 < 224)
              o2 = (e3 - 192 << 8) + await r2.readByte() + 192;
            else if (e3 > 223 && e3 < 255) {
              if (o2 = 1 << (31 & e3), d2 = true, !f2)
                throw new TypeError("This packet type does not support partial lengths.");
            } else
              o2 = await r2.readByte() << 24 | await r2.readByte() << 16 | await r2.readByte() << 8 | await r2.readByte();
          } else
            switch (c2) {
              case 0:
                o2 = await r2.readByte();
                break;
              case 1:
                o2 = await r2.readByte() << 8 | await r2.readByte();
                break;
              case 2:
                o2 = await r2.readByte() << 24 | await r2.readByte() << 16 | await r2.readByte() << 8 | await r2.readByte();
                break;
              default:
                o2 = 1 / 0;
            }
          if (o2 > 0) {
            let e3 = 0;
            for (; ; ) {
              i2 && await i2.ready;
              const { done: t3, value: n3 } = await r2.read();
              if (t3) {
                if (o2 === 1 / 0)
                  break;
                throw Error("Unexpected end of packet");
              }
              const a3 = o2 === 1 / 0 ? n3 : n3.subarray(0, o2 - e3);
              if (i2 ? await i2.write(a3) : l2.push(a3), e3 += n3.length, e3 >= o2) {
                r2.unshift(n3.subarray(o2 - e3 + n3.length));
                break;
              }
            }
          }
        } while (d2);
        const p2 = await r2.peekBytes(f2 ? 1 / 0 : 2);
        return i2 ? (await i2.ready, await i2.close()) : (l2 = ce.concatUint8Array(l2), await t2({ tag: u2, packet: l2 })), !p2 || !p2.length;
      } catch (e3) {
        if (i2)
          return await i2.abort(e3), true;
        throw e3;
      } finally {
        i2 && await n2, r2.releaseLock();
      }
    }
    var Ui = class extends Error {
      constructor(...e2) {
        super(...e2), Error.captureStackTrace && Error.captureStackTrace(this, Ui), this.name = "UnsupportedError";
      }
    };
    var Ii = class {
      constructor(e2, t2) {
        this.tag = e2, this.rawContent = t2;
      }
      write() {
        return this.rawContent;
      }
    };
    var Bi = ce.getWebCrypto();
    var Ti = ce.getNodeCrypto();
    var zi = { p256: "P-256", p384: "P-384", p521: "P-521" };
    var qi = Ti ? Ti.getCurves() : [];
    var Oi = Ti ? { secp256k1: qi.includes("secp256k1") ? "secp256k1" : void 0, p256: qi.includes("prime256v1") ? "prime256v1" : void 0, p384: qi.includes("secp384r1") ? "secp384r1" : void 0, p521: qi.includes("secp521r1") ? "secp521r1" : void 0, ed25519: qi.includes("ED25519") ? "ED25519" : void 0, curve25519: qi.includes("X25519") ? "X25519" : void 0, brainpoolP256r1: qi.includes("brainpoolP256r1") ? "brainpoolP256r1" : void 0, brainpoolP384r1: qi.includes("brainpoolP384r1") ? "brainpoolP384r1" : void 0, brainpoolP512r1: qi.includes("brainpoolP512r1") ? "brainpoolP512r1" : void 0 } : {};
    var Fi = { p256: { oid: [6, 8, 42, 134, 72, 206, 61, 3, 1, 7], keyType: me.publicKey.ecdsa, hash: me.hash.sha256, cipher: me.symmetric.aes128, node: Oi.p256, web: zi.p256, payloadSize: 32, sharedSize: 256 }, p384: { oid: [6, 5, 43, 129, 4, 0, 34], keyType: me.publicKey.ecdsa, hash: me.hash.sha384, cipher: me.symmetric.aes192, node: Oi.p384, web: zi.p384, payloadSize: 48, sharedSize: 384 }, p521: { oid: [6, 5, 43, 129, 4, 0, 35], keyType: me.publicKey.ecdsa, hash: me.hash.sha512, cipher: me.symmetric.aes256, node: Oi.p521, web: zi.p521, payloadSize: 66, sharedSize: 528 }, secp256k1: { oid: [6, 5, 43, 129, 4, 0, 10], keyType: me.publicKey.ecdsa, hash: me.hash.sha256, cipher: me.symmetric.aes128, node: Oi.secp256k1, payloadSize: 32 }, ed25519: { oid: [6, 9, 43, 6, 1, 4, 1, 218, 71, 15, 1], keyType: me.publicKey.eddsa, hash: me.hash.sha512, node: false, payloadSize: 32 }, curve25519: { oid: [6, 10, 43, 6, 1, 4, 1, 151, 85, 1, 5, 1], keyType: me.publicKey.ecdh, hash: me.hash.sha256, cipher: me.symmetric.aes128, node: false, payloadSize: 32 }, brainpoolP256r1: { oid: [6, 9, 43, 36, 3, 3, 2, 8, 1, 1, 7], keyType: me.publicKey.ecdsa, hash: me.hash.sha256, cipher: me.symmetric.aes128, node: Oi.brainpoolP256r1, payloadSize: 32 }, brainpoolP384r1: { oid: [6, 9, 43, 36, 3, 3, 2, 8, 1, 1, 11], keyType: me.publicKey.ecdsa, hash: me.hash.sha384, cipher: me.symmetric.aes192, node: Oi.brainpoolP384r1, payloadSize: 48 }, brainpoolP512r1: { oid: [6, 9, 43, 36, 3, 3, 2, 8, 1, 1, 13], keyType: me.publicKey.ecdsa, hash: me.hash.sha512, cipher: me.symmetric.aes256, node: Oi.brainpoolP512r1, payloadSize: 64 } };
    var Ni = class {
      constructor(e2, t2) {
        try {
          (ce.isArray(e2) || ce.isUint8Array(e2)) && (e2 = new ki(e2)), e2 instanceof ki && (e2 = e2.getName()), this.name = me.write(me.curve, e2);
        } catch (e3) {
          throw new Ui("Unknown curve");
        }
        t2 = t2 || Fi[this.name], this.keyType = t2.keyType, this.oid = t2.oid, this.hash = t2.hash, this.cipher = t2.cipher, this.node = t2.node && Fi[this.name], this.web = t2.web && Fi[this.name], this.payloadSize = t2.payloadSize, this.web && ce.getWebCrypto() ? this.type = "web" : this.node && ce.getNodeCrypto() ? this.type = "node" : "curve25519" === this.name ? this.type = "curve25519" : "ed25519" === this.name && (this.type = "ed25519");
      }
      async genKeyPair() {
        let e2;
        switch (this.type) {
          case "web":
            try {
              return await async function(e3) {
                const t3 = await Bi.generateKey({ name: "ECDSA", namedCurve: zi[e3] }, true, ["sign", "verify"]), r2 = await Bi.exportKey("jwk", t3.privateKey);
                return { publicKey: Li(await Bi.exportKey("jwk", t3.publicKey)), privateKey: pe(r2.d) };
              }(this.name);
            } catch (e3) {
              ce.printDebugError("Browser did not support generating ec key " + e3.message);
              break;
            }
          case "node":
            return async function(e3) {
              const t3 = Ti.createECDH(Oi[e3]);
              return await t3.generateKeys(), { publicKey: new Uint8Array(t3.getPublicKey()), privateKey: new Uint8Array(t3.getPrivateKey()) };
            }(this.name);
          case "curve25519": {
            const t3 = await ii(32);
            t3[0] = 127 & t3[0] | 64, t3[31] &= 248;
            const r2 = t3.slice().reverse();
            e2 = ti.box.keyPair.fromSecretKey(r2);
            return { publicKey: ce.concatUint8Array([new Uint8Array([64]), e2.publicKey]), privateKey: t3 };
          }
          case "ed25519": {
            const e3 = await ii(32), t3 = ti.sign.keyPair.fromSeed(e3);
            return { publicKey: ce.concatUint8Array([new Uint8Array([64]), t3.publicKey]), privateKey: e3 };
          }
        }
        const t2 = await Ei(this.name);
        return e2 = await t2.genKeyPair({ entropy: ce.uint8ArrayToString(await ii(32)) }), { publicKey: new Uint8Array(e2.getPublic("array", false)), privateKey: e2.getPrivate().toArrayLike(Uint8Array) };
      }
    };
    async function ji(e2, t2, r2, i2) {
      const n2 = { p256: true, p384: true, p521: true, secp256k1: true, curve25519: e2 === me.publicKey.ecdh, brainpoolP256r1: true, brainpoolP384r1: true, brainpoolP512r1: true }, a2 = t2.getName();
      if (!n2[a2])
        return false;
      if ("curve25519" === a2) {
        i2 = i2.slice().reverse();
        const { publicKey: e3 } = ti.box.keyPair.fromSecretKey(i2);
        r2 = new Uint8Array(r2);
        const t3 = new Uint8Array([64, ...e3]);
        return !!ce.equalsUint8Array(t3, r2);
      }
      const s2 = await Ei(a2);
      try {
        r2 = Si(s2, r2).getPublic();
      } catch (e3) {
        return false;
      }
      return !!Ai(s2, i2).getPublic().eq(r2);
    }
    function Li(e2) {
      const t2 = pe(e2.x), r2 = pe(e2.y), i2 = new Uint8Array(t2.length + r2.length + 1);
      return i2[0] = 4, i2.set(t2, 1), i2.set(r2, t2.length + 1), i2;
    }
    function Wi(e2, t2, r2) {
      const i2 = e2, n2 = r2.slice(1, i2 + 1), a2 = r2.slice(i2 + 1, 2 * i2 + 1);
      return { kty: "EC", crv: t2, x: ye(n2, true), y: ye(a2, true), ext: true };
    }
    function Hi(e2, t2, r2, i2) {
      const n2 = Wi(e2, t2, r2);
      return n2.d = ye(i2, true), n2;
    }
    var Gi = ce.getWebCrypto();
    var Vi = ce.getNodeCrypto();
    async function $i(e2, t2, r2, i2, n2, a2) {
      const s2 = new Ni(e2);
      if (r2 && !ce.isStream(r2)) {
        const e3 = { publicKey: i2, privateKey: n2 };
        switch (s2.type) {
          case "web":
            try {
              return await async function(e4, t3, r3, i3) {
                const n3 = e4.payloadSize, a3 = Hi(e4.payloadSize, zi[e4.name], i3.publicKey, i3.privateKey), s3 = await Gi.importKey("jwk", a3, { name: "ECDSA", namedCurve: zi[e4.name], hash: { name: me.read(me.webHash, e4.hash) } }, false, ["sign"]), o2 = new Uint8Array(await Gi.sign({ name: "ECDSA", namedCurve: zi[e4.name], hash: { name: me.read(me.webHash, t3) } }, s3, r3));
                return { r: o2.slice(0, n3), s: o2.slice(n3, n3 << 1) };
              }(s2, t2, r2, e3);
            } catch (e4) {
              if ("p521" !== s2.name && ("DataError" === e4.name || "OperationError" === e4.name))
                throw e4;
              ce.printDebugError("Browser did not support signing: " + e4.message);
            }
            break;
          case "node": {
            const i3 = await async function(e4, t3, r3, i4) {
              const n3 = Vi.createSign(me.read(me.hash, t3));
              n3.write(r3), n3.end();
              const a3 = Qi.encode({ version: 1, parameters: e4.oid, privateKey: Array.from(i4.privateKey), publicKey: { unused: 0, data: Array.from(i4.publicKey) } }, "pem", { label: "EC PRIVATE KEY" });
              return Xi.decode(n3.sign(a3), "der");
            }(s2, t2, r2, e3);
            return { r: i3.r.toArrayLike(Uint8Array), s: i3.s.toArrayLike(Uint8Array) };
          }
        }
      }
      return async function(e3, t3, r3) {
        const i3 = await Ei(e3.name), n3 = Ai(i3, r3).sign(t3);
        return { r: n3.r.toArrayLike(Uint8Array), s: n3.s.toArrayLike(Uint8Array) };
      }(s2, a2, n2);
    }
    async function Zi(e2, t2, r2, i2, n2, a2) {
      const s2 = new Ni(e2);
      if (i2 && !ce.isStream(i2))
        switch (s2.type) {
          case "web":
            try {
              return await async function(e3, t3, { r: r3, s: i3 }, n3, a3) {
                const s3 = Wi(e3.payloadSize, zi[e3.name], a3), o2 = await Gi.importKey("jwk", s3, { name: "ECDSA", namedCurve: zi[e3.name], hash: { name: me.read(me.webHash, e3.hash) } }, false, ["verify"]), c2 = ce.concatUint8Array([r3, i3]).buffer;
                return Gi.verify({ name: "ECDSA", namedCurve: zi[e3.name], hash: { name: me.read(me.webHash, t3) } }, o2, c2, n3);
              }(s2, t2, r2, i2, n2);
            } catch (e3) {
              if ("p521" !== s2.name && ("DataError" === e3.name || "OperationError" === e3.name))
                throw e3;
              ce.printDebugError("Browser did not support verifying: " + e3.message);
            }
            break;
          case "node":
            return async function(e3, t3, { r: r3, s: i3 }, n3, a3) {
              const { default: s3 } = await Promise.resolve().then(function() {
                return Ud;
              }), o2 = Vi.createVerify(me.read(me.hash, t3));
              o2.write(n3), o2.end();
              const c2 = en.encode({ algorithm: { algorithm: [1, 2, 840, 10045, 2, 1], parameters: e3.oid }, subjectPublicKey: { unused: 0, data: Array.from(a3) } }, "pem", { label: "PUBLIC KEY" }), u2 = Xi.encode({ r: new s3(r3), s: new s3(i3) }, "der");
              try {
                return o2.verify(c2, u2);
              } catch (e4) {
                return false;
              }
            }(s2, t2, r2, i2, n2);
        }
      return async function(e3, t3, r3, i3) {
        const n3 = await Ei(e3.name);
        return Si(n3, i3).verify(r3, t3);
      }(s2, r2, void 0 === t2 ? i2 : a2, n2);
    }
    var Yi = Vi ? y.default : void 0;
    var Xi = Vi ? Yi.define("ECDSASignature", function() {
      this.seq().obj(this.key("r").int(), this.key("s").int());
    }) : void 0;
    var Qi = Vi ? Yi.define("ECPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").explicit(0).optional().any(), this.key("publicKey").explicit(1).optional().bitstr());
    }) : void 0;
    var Ji = Vi ? Yi.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional().any());
    }) : void 0;
    var en = Vi ? Yi.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(Ji), this.key("subjectPublicKey").bitstr());
    }) : void 0;
    var tn = /* @__PURE__ */ Object.freeze({ __proto__: null, sign: $i, verify: Zi, validateParams: async function(e2, t2, r2) {
      const i2 = new Ni(e2);
      if (i2.keyType !== me.publicKey.ecdsa)
        return false;
      switch (i2.type) {
        case "web":
        case "node": {
          const i3 = await ii(8), n2 = me.hash.sha256, a2 = await Jr.digest(n2, i3);
          try {
            const s2 = await $i(e2, n2, i3, t2, r2, a2);
            return await Zi(e2, n2, s2, i3, t2, a2);
          } catch (e3) {
            return false;
          }
        }
        default:
          return ji(me.publicKey.ecdsa, e2, t2, r2);
      }
    } });
    ti.hash = (e2) => new Uint8Array(sr().update(e2).digest());
    var rn = /* @__PURE__ */ Object.freeze({ __proto__: null, sign: async function(e2, t2, r2, i2, n2, a2) {
      if (Jr.getHashByteLength(t2) < Jr.getHashByteLength(me.hash.sha256))
        throw Error("Hash algorithm too weak: sha256 or stronger is required for EdDSA.");
      const s2 = ce.concatUint8Array([n2, i2.subarray(1)]), o2 = ti.sign.detached(a2, s2);
      return { r: o2.subarray(0, 32), s: o2.subarray(32) };
    }, verify: async function(e2, t2, { r: r2, s: i2 }, n2, a2, s2) {
      const o2 = ce.concatUint8Array([r2, i2]);
      return ti.sign.detached.verify(s2, o2, a2.subarray(1));
    }, validateParams: async function(e2, t2, r2) {
      if ("ed25519" !== e2.getName())
        return false;
      const { publicKey: i2 } = ti.sign.keyPair.fromSeed(r2), n2 = new Uint8Array([64, ...i2]);
      return ce.equalsUint8Array(t2, n2);
    } });
    function nn(e2, t2) {
      const r2 = new nt["aes" + 8 * e2.length](e2), i2 = new Uint32Array([2795939494, 2795939494]), n2 = sn(t2);
      let a2 = i2;
      const s2 = n2, o2 = n2.length / 2, c2 = new Uint32Array([0, 0]);
      let u2 = new Uint32Array(4);
      for (let e3 = 0; e3 <= 5; ++e3)
        for (let t3 = 0; t3 < o2; ++t3)
          c2[1] = o2 * e3 + (1 + t3), u2[0] = a2[0], u2[1] = a2[1], u2[2] = s2[2 * t3], u2[3] = s2[2 * t3 + 1], u2 = sn(r2.encrypt(on(u2))), a2 = u2.subarray(0, 2), a2[0] ^= c2[0], a2[1] ^= c2[1], s2[2 * t3] = u2[2], s2[2 * t3 + 1] = u2[3];
      return on(a2, s2);
    }
    function an(e2, t2) {
      const r2 = new nt["aes" + 8 * e2.length](e2), i2 = new Uint32Array([2795939494, 2795939494]), n2 = sn(t2);
      let a2 = n2.subarray(0, 2);
      const s2 = n2.subarray(2), o2 = n2.length / 2 - 1, c2 = new Uint32Array([0, 0]);
      let u2 = new Uint32Array(4);
      for (let e3 = 5; e3 >= 0; --e3)
        for (let t3 = o2 - 1; t3 >= 0; --t3)
          c2[1] = o2 * e3 + (t3 + 1), u2[0] = a2[0] ^ c2[0], u2[1] = a2[1] ^ c2[1], u2[2] = s2[2 * t3], u2[3] = s2[2 * t3 + 1], u2 = sn(r2.decrypt(on(u2))), a2 = u2.subarray(0, 2), s2[2 * t3] = u2[2], s2[2 * t3 + 1] = u2[3];
      if (a2[0] === i2[0] && a2[1] === i2[1])
        return on(s2);
      throw Error("Key Data Integrity failed");
    }
    function sn(e2) {
      const { length: t2 } = e2, r2 = function(e3) {
        if (ce.isString(e3)) {
          const { length: t3 } = e3, r3 = new ArrayBuffer(t3), i3 = new Uint8Array(r3);
          for (let r4 = 0; r4 < t3; ++r4)
            i3[r4] = e3.charCodeAt(r4);
          return r3;
        }
        return new Uint8Array(e3).buffer;
      }(e2), i2 = new DataView(r2), n2 = new Uint32Array(t2 / 4);
      for (let e3 = 0; e3 < t2 / 4; ++e3)
        n2[e3] = i2.getUint32(4 * e3);
      return n2;
    }
    function on() {
      let e2 = 0;
      for (let t3 = 0; t3 < arguments.length; ++t3)
        e2 += 4 * arguments[t3].length;
      const t2 = new ArrayBuffer(e2), r2 = new DataView(t2);
      let i2 = 0;
      for (let e3 = 0; e3 < arguments.length; ++e3) {
        for (let t3 = 0; t3 < arguments[e3].length; ++t3)
          r2.setUint32(i2 + 4 * t3, arguments[e3][t3]);
        i2 += 4 * arguments[e3].length;
      }
      return new Uint8Array(t2);
    }
    var cn = /* @__PURE__ */ Object.freeze({ __proto__: null, wrap: nn, unwrap: an });
    function un(e2) {
      const t2 = 8 - e2.length % 8, r2 = new Uint8Array(e2.length + t2).fill(t2);
      return r2.set(e2), r2;
    }
    function hn(e2) {
      const t2 = e2.length;
      if (t2 > 0) {
        const r2 = e2[t2 - 1];
        if (r2 >= 1) {
          const i2 = e2.subarray(t2 - r2), n2 = new Uint8Array(r2).fill(r2);
          if (ce.equalsUint8Array(i2, n2))
            return e2.subarray(0, t2 - r2);
        }
      }
      throw Error("Invalid padding");
    }
    var fn = /* @__PURE__ */ Object.freeze({ __proto__: null, encode: un, decode: hn });
    var dn = ce.getWebCrypto();
    var ln = ce.getNodeCrypto();
    function pn(e2, t2, r2, i2) {
      return ce.concatUint8Array([t2.write(), new Uint8Array([e2]), r2.write(), ce.stringToUint8Array("Anonymous Sender    "), i2.subarray(0, 20)]);
    }
    async function yn(e2, t2, r2, i2, n2 = false, a2 = false) {
      let s2;
      if (n2) {
        for (s2 = 0; s2 < t2.length && 0 === t2[s2]; s2++)
          ;
        t2 = t2.subarray(s2);
      }
      if (a2) {
        for (s2 = t2.length - 1; s2 >= 0 && 0 === t2[s2]; s2--)
          ;
        t2 = t2.subarray(0, s2 + 1);
      }
      return (await Jr.digest(e2, ce.concatUint8Array([new Uint8Array([0, 0, 0, 1]), t2, i2]))).subarray(0, r2);
    }
    async function bn(e2, t2) {
      switch (e2.type) {
        case "curve25519": {
          const r2 = await ii(32), { secretKey: i2, sharedKey: n2 } = await mn(e2, t2, null, r2);
          let { publicKey: a2 } = ti.box.keyPair.fromSecretKey(i2);
          return a2 = ce.concatUint8Array([new Uint8Array([64]), a2]), { publicKey: a2, sharedKey: n2 };
        }
        case "web":
          if (e2.web && ce.getWebCrypto())
            try {
              return await async function(e3, t3) {
                const r2 = Wi(e3.payloadSize, e3.web.web, t3);
                let i2 = dn.generateKey({ name: "ECDH", namedCurve: e3.web.web }, true, ["deriveKey", "deriveBits"]), n2 = dn.importKey("jwk", r2, { name: "ECDH", namedCurve: e3.web.web }, false, []);
                [i2, n2] = await Promise.all([i2, n2]);
                let a2 = dn.deriveBits({ name: "ECDH", namedCurve: e3.web.web, public: n2 }, i2.privateKey, e3.web.sharedSize), s2 = dn.exportKey("jwk", i2.publicKey);
                [a2, s2] = await Promise.all([a2, s2]);
                const o2 = new Uint8Array(a2);
                return { publicKey: new Uint8Array(Li(s2)), sharedKey: o2 };
              }(e2, t2);
            } catch (e3) {
              ce.printDebugError(e3);
            }
          break;
        case "node":
          return async function(e3, t3) {
            const r2 = ln.createECDH(e3.node.node);
            r2.generateKeys();
            const i2 = new Uint8Array(r2.computeSecret(t3));
            return { publicKey: new Uint8Array(r2.getPublicKey()), sharedKey: i2 };
          }(e2, t2);
      }
      return async function(e3, t3) {
        const r2 = await Ei(e3.name), i2 = await e3.genKeyPair();
        t3 = Si(r2, t3);
        const n2 = Ai(r2, i2.privateKey), a2 = i2.publicKey, s2 = n2.derive(t3.getPublic()), o2 = r2.curve.p.byteLength(), c2 = s2.toArrayLike(Uint8Array, "be", o2);
        return { publicKey: a2, sharedKey: c2 };
      }(e2, t2);
    }
    async function mn(e2, t2, r2, i2) {
      if (i2.length !== e2.payloadSize) {
        const t3 = new Uint8Array(e2.payloadSize);
        t3.set(i2, e2.payloadSize - i2.length), i2 = t3;
      }
      switch (e2.type) {
        case "curve25519": {
          const e3 = i2.slice().reverse();
          return { secretKey: e3, sharedKey: ti.scalarMult(e3, t2.subarray(1)) };
        }
        case "web":
          if (e2.web && ce.getWebCrypto())
            try {
              return await async function(e3, t3, r3, i3) {
                const n2 = Hi(e3.payloadSize, e3.web.web, r3, i3);
                let a2 = dn.importKey("jwk", n2, { name: "ECDH", namedCurve: e3.web.web }, true, ["deriveKey", "deriveBits"]);
                const s2 = Wi(e3.payloadSize, e3.web.web, t3);
                let o2 = dn.importKey("jwk", s2, { name: "ECDH", namedCurve: e3.web.web }, true, []);
                [a2, o2] = await Promise.all([a2, o2]);
                let c2 = dn.deriveBits({ name: "ECDH", namedCurve: e3.web.web, public: o2 }, a2, e3.web.sharedSize), u2 = dn.exportKey("jwk", a2);
                [c2, u2] = await Promise.all([c2, u2]);
                const h2 = new Uint8Array(c2);
                return { secretKey: pe(u2.d), sharedKey: h2 };
              }(e2, t2, r2, i2);
            } catch (e3) {
              ce.printDebugError(e3);
            }
          break;
        case "node":
          return async function(e3, t3, r3) {
            const i3 = ln.createECDH(e3.node.node);
            i3.setPrivateKey(r3);
            const n2 = new Uint8Array(i3.computeSecret(t3));
            return { secretKey: new Uint8Array(i3.getPrivateKey()), sharedKey: n2 };
          }(e2, t2, i2);
      }
      return async function(e3, t3, r3) {
        const i3 = await Ei(e3.name);
        t3 = Si(i3, t3), r3 = Ai(i3, r3);
        const n2 = new Uint8Array(r3.getPrivate()), a2 = r3.derive(t3.getPublic()), s2 = i3.curve.p.byteLength(), o2 = a2.toArrayLike(Uint8Array, "be", s2);
        return { secretKey: n2, sharedKey: o2 };
      }(e2, t2, i2);
    }
    var gn = /* @__PURE__ */ Object.freeze({ __proto__: null, validateParams: async function(e2, t2, r2) {
      return ji(me.publicKey.ecdh, e2, t2, r2);
    }, encrypt: async function(e2, t2, r2, i2, n2) {
      const a2 = un(r2), s2 = new Ni(e2), { publicKey: o2, sharedKey: c2 } = await bn(s2, i2), u2 = pn(me.publicKey.ecdh, e2, t2, n2), { keySize: h2 } = kn(t2.cipher);
      return { publicKey: o2, wrappedKey: nn(await yn(t2.hash, c2, h2, u2), a2) };
    }, decrypt: async function(e2, t2, r2, i2, n2, a2, s2) {
      const o2 = new Ni(e2), { sharedKey: c2 } = await mn(o2, r2, n2, a2), u2 = pn(me.publicKey.ecdh, e2, t2, s2), { keySize: h2 } = kn(t2.cipher);
      let f2;
      for (let e3 = 0; e3 < 3; e3++)
        try {
          return hn(an(await yn(t2.hash, c2, h2, u2, 1 === e3, 2 === e3), i2));
        } catch (e4) {
          f2 = e4;
        }
      throw f2;
    } });
    var wn = { rsa: vi, elgamal: _i, elliptic: /* @__PURE__ */ Object.freeze({ __proto__: null, Curve: Ni, ecdh: gn, ecdsa: tn, eddsa: rn, generate: async function(e2) {
      const t2 = await ce.getBigInteger();
      e2 = new Ni(e2);
      const r2 = await e2.genKeyPair(), i2 = new t2(r2.publicKey).toUint8Array(), n2 = new t2(r2.privateKey).toUint8Array("be", e2.payloadSize);
      return { oid: e2.oid, Q: i2, secret: n2, hash: e2.hash, cipher: e2.cipher };
    }, getPreferredHashAlgo: function(e2) {
      return Fi[me.write(me.curve, e2.toHex())].hash;
    } }), dsa: /* @__PURE__ */ Object.freeze({ __proto__: null, sign: async function(e2, t2, r2, i2, n2, a2) {
      const s2 = await ce.getBigInteger(), o2 = new s2(1);
      let c2, u2, h2, f2;
      i2 = new s2(i2), n2 = new s2(n2), r2 = new s2(r2), a2 = new s2(a2), r2 = r2.mod(i2), a2 = a2.mod(n2);
      const d2 = new s2(t2.subarray(0, n2.byteLength())).mod(n2);
      for (; ; ) {
        if (c2 = await ni(o2, n2), u2 = r2.modExp(c2, i2).imod(n2), u2.isZero())
          continue;
        const e3 = a2.mul(u2).imod(n2);
        if (f2 = d2.add(e3).imod(n2), h2 = c2.modInv(n2).imul(f2).imod(n2), !h2.isZero())
          break;
      }
      return { r: u2.toUint8Array("be", n2.byteLength()), s: h2.toUint8Array("be", n2.byteLength()) };
    }, verify: async function(e2, t2, r2, i2, n2, a2, s2, o2) {
      const c2 = await ce.getBigInteger(), u2 = new c2(0);
      if (t2 = new c2(t2), r2 = new c2(r2), a2 = new c2(a2), s2 = new c2(s2), n2 = new c2(n2), o2 = new c2(o2), t2.lte(u2) || t2.gte(s2) || r2.lte(u2) || r2.gte(s2))
        return ce.printDebug("invalid DSA Signature"), false;
      const h2 = new c2(i2.subarray(0, s2.byteLength())).imod(s2), f2 = r2.modInv(s2);
      if (f2.isZero())
        return ce.printDebug("invalid DSA Signature"), false;
      n2 = n2.mod(a2), o2 = o2.mod(a2);
      const d2 = h2.mul(f2).imod(s2), l2 = t2.mul(f2).imod(s2), p2 = n2.modExp(d2, a2), y2 = o2.modExp(l2, a2);
      return p2.mul(y2).imod(a2).imod(s2).equal(t2);
    }, validateParams: async function(e2, t2, r2, i2, n2) {
      const a2 = await ce.getBigInteger();
      e2 = new a2(e2), t2 = new a2(t2), r2 = new a2(r2), i2 = new a2(i2);
      const s2 = new a2(1);
      if (r2.lte(s2) || r2.gte(e2))
        return false;
      if (!e2.dec().mod(t2).isZero())
        return false;
      if (!r2.modExp(t2, e2).isOne())
        return false;
      const o2 = new a2(t2.bitLength()), c2 = new a2(150);
      if (o2.lt(c2) || !await ci(t2, null, 32))
        return false;
      n2 = new a2(n2);
      const u2 = new a2(2), h2 = await ni(u2.leftShift(o2.dec()), u2.leftShift(o2)), f2 = t2.mul(h2).add(n2);
      return !!i2.equal(r2.modExp(f2, e2));
    } }), nacl: ti };
    var vn = class {
      constructor(e2) {
        e2 = void 0 === e2 ? new Uint8Array([]) : ce.isString(e2) ? ce.stringToUint8Array(e2) : new Uint8Array(e2), this.data = e2;
      }
      read(e2) {
        if (e2.length >= 1) {
          const t2 = e2[0];
          if (e2.length >= 1 + t2)
            return this.data = e2.subarray(1, 1 + t2), 1 + this.data.length;
        }
        throw Error("Invalid symmetric key");
      }
      write() {
        return ce.concatUint8Array([new Uint8Array([this.data.length]), this.data]);
      }
    };
    var _n = class {
      constructor(e2) {
        if (e2) {
          const { hash: t2, cipher: r2 } = e2;
          this.hash = t2, this.cipher = r2;
        } else
          this.hash = null, this.cipher = null;
      }
      read(e2) {
        if (e2.length < 4 || 3 !== e2[0] || 1 !== e2[1])
          throw Error("Cannot read KDFParams");
        return this.hash = e2[2], this.cipher = e2[3], 4;
      }
      write() {
        return new Uint8Array([3, 1, this.hash, this.cipher]);
      }
    };
    function kn(e2) {
      const t2 = me.read(me.symmetric, e2);
      return nt[t2];
    }
    function An(e2) {
      try {
        e2.getName();
      } catch (e3) {
        throw new Ui("Unknown curve OID");
      }
    }
    var Sn = /* @__PURE__ */ Object.freeze({ __proto__: null, publicKeyEncrypt: async function(e2, t2, r2, i2) {
      switch (e2) {
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaEncryptSign: {
          const { n: e3, e: i3 } = t2;
          return { c: await wn.rsa.encrypt(r2, e3, i3) };
        }
        case me.publicKey.elgamal: {
          const { p: e3, g: i3, y: n2 } = t2;
          return wn.elgamal.encrypt(r2, e3, i3, n2);
        }
        case me.publicKey.ecdh: {
          const { oid: e3, Q: n2, kdfParams: a2 } = t2, { publicKey: s2, wrappedKey: o2 } = await wn.elliptic.ecdh.encrypt(e3, a2, r2, n2, i2);
          return { V: s2, C: new vn(o2) };
        }
        default:
          return [];
      }
    }, publicKeyDecrypt: async function(e2, t2, r2, i2, n2, a2) {
      switch (e2) {
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaEncrypt: {
          const { c: e3 } = i2, { n: n3, e: s2 } = t2, { d: o2, p: c2, q: u2, u: h2 } = r2;
          return wn.rsa.decrypt(e3, n3, s2, o2, c2, u2, h2, a2);
        }
        case me.publicKey.elgamal: {
          const { c1: e3, c2: n3 } = i2, s2 = t2.p, o2 = r2.x;
          return wn.elgamal.decrypt(e3, n3, s2, o2, a2);
        }
        case me.publicKey.ecdh: {
          const { oid: e3, Q: a3, kdfParams: s2 } = t2, { d: o2 } = r2, { V: c2, C: u2 } = i2;
          return wn.elliptic.ecdh.decrypt(e3, s2, c2, u2.data, a3, o2, n2);
        }
        default:
          throw Error("Unknown public key encryption algorithm.");
      }
    }, parsePublicKeyParams: function(e2, t2) {
      let r2 = 0;
      switch (e2) {
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaSign: {
          const e3 = ce.readMPI(t2.subarray(r2));
          r2 += e3.length + 2;
          const i2 = ce.readMPI(t2.subarray(r2));
          return r2 += i2.length + 2, { read: r2, publicParams: { n: e3, e: i2 } };
        }
        case me.publicKey.dsa: {
          const e3 = ce.readMPI(t2.subarray(r2));
          r2 += e3.length + 2;
          const i2 = ce.readMPI(t2.subarray(r2));
          r2 += i2.length + 2;
          const n2 = ce.readMPI(t2.subarray(r2));
          r2 += n2.length + 2;
          const a2 = ce.readMPI(t2.subarray(r2));
          return r2 += a2.length + 2, { read: r2, publicParams: { p: e3, q: i2, g: n2, y: a2 } };
        }
        case me.publicKey.elgamal: {
          const e3 = ce.readMPI(t2.subarray(r2));
          r2 += e3.length + 2;
          const i2 = ce.readMPI(t2.subarray(r2));
          r2 += i2.length + 2;
          const n2 = ce.readMPI(t2.subarray(r2));
          return r2 += n2.length + 2, { read: r2, publicParams: { p: e3, g: i2, y: n2 } };
        }
        case me.publicKey.ecdsa: {
          const e3 = new ki();
          r2 += e3.read(t2), An(e3);
          const i2 = ce.readMPI(t2.subarray(r2));
          return r2 += i2.length + 2, { read: r2, publicParams: { oid: e3, Q: i2 } };
        }
        case me.publicKey.eddsa: {
          const e3 = new ki();
          r2 += e3.read(t2), An(e3);
          let i2 = ce.readMPI(t2.subarray(r2));
          return r2 += i2.length + 2, i2 = ce.leftPad(i2, 33), { read: r2, publicParams: { oid: e3, Q: i2 } };
        }
        case me.publicKey.ecdh: {
          const e3 = new ki();
          r2 += e3.read(t2), An(e3);
          const i2 = ce.readMPI(t2.subarray(r2));
          r2 += i2.length + 2;
          const n2 = new _n();
          return r2 += n2.read(t2.subarray(r2)), { read: r2, publicParams: { oid: e3, Q: i2, kdfParams: n2 } };
        }
        default:
          throw new Ui("Unknown public key encryption algorithm.");
      }
    }, parsePrivateKeyParams: function(e2, t2, r2) {
      let i2 = 0;
      switch (e2) {
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaSign: {
          const e3 = ce.readMPI(t2.subarray(i2));
          i2 += e3.length + 2;
          const r3 = ce.readMPI(t2.subarray(i2));
          i2 += r3.length + 2;
          const n2 = ce.readMPI(t2.subarray(i2));
          i2 += n2.length + 2;
          const a2 = ce.readMPI(t2.subarray(i2));
          return i2 += a2.length + 2, { read: i2, privateParams: { d: e3, p: r3, q: n2, u: a2 } };
        }
        case me.publicKey.dsa:
        case me.publicKey.elgamal: {
          const e3 = ce.readMPI(t2.subarray(i2));
          return i2 += e3.length + 2, { read: i2, privateParams: { x: e3 } };
        }
        case me.publicKey.ecdsa:
        case me.publicKey.ecdh: {
          const e3 = new Ni(r2.oid);
          let n2 = ce.readMPI(t2.subarray(i2));
          return i2 += n2.length + 2, n2 = ce.leftPad(n2, e3.payloadSize), { read: i2, privateParams: { d: n2 } };
        }
        case me.publicKey.eddsa: {
          const e3 = new Ni(r2.oid);
          let n2 = ce.readMPI(t2.subarray(i2));
          return i2 += n2.length + 2, n2 = ce.leftPad(n2, e3.payloadSize), { read: i2, privateParams: { seed: n2 } };
        }
        default:
          throw new Ui("Unknown public key encryption algorithm.");
      }
    }, parseEncSessionKeyParams: function(e2, t2) {
      let r2 = 0;
      switch (e2) {
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaEncryptSign:
          return { c: ce.readMPI(t2.subarray(r2)) };
        case me.publicKey.elgamal: {
          const e3 = ce.readMPI(t2.subarray(r2));
          r2 += e3.length + 2;
          return { c1: e3, c2: ce.readMPI(t2.subarray(r2)) };
        }
        case me.publicKey.ecdh: {
          const e3 = ce.readMPI(t2.subarray(r2));
          r2 += e3.length + 2;
          const i2 = new vn();
          return i2.read(t2.subarray(r2)), { V: e3, C: i2 };
        }
        default:
          throw new Ui("Unknown public key encryption algorithm.");
      }
    }, serializeParams: function(e2, t2) {
      const r2 = Object.keys(t2).map((e3) => {
        const r3 = t2[e3];
        return ce.isUint8Array(r3) ? ce.uint8ArrayToMPI(r3) : r3.write();
      });
      return ce.concatUint8Array(r2);
    }, generateParams: function(e2, t2, r2) {
      switch (e2) {
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaSign:
          return wn.rsa.generate(t2, 65537).then(({ n: e3, e: t3, d: r3, p: i2, q: n2, u: a2 }) => ({ privateParams: { d: r3, p: i2, q: n2, u: a2 }, publicParams: { n: e3, e: t3 } }));
        case me.publicKey.ecdsa:
          return wn.elliptic.generate(r2).then(({ oid: e3, Q: t3, secret: r3 }) => ({ privateParams: { d: r3 }, publicParams: { oid: new ki(e3), Q: t3 } }));
        case me.publicKey.eddsa:
          return wn.elliptic.generate(r2).then(({ oid: e3, Q: t3, secret: r3 }) => ({ privateParams: { seed: r3 }, publicParams: { oid: new ki(e3), Q: t3 } }));
        case me.publicKey.ecdh:
          return wn.elliptic.generate(r2).then(({ oid: e3, Q: t3, secret: r3, hash: i2, cipher: n2 }) => ({ privateParams: { d: r3 }, publicParams: { oid: new ki(e3), Q: t3, kdfParams: new _n({ hash: i2, cipher: n2 }) } }));
        case me.publicKey.dsa:
        case me.publicKey.elgamal:
          throw Error("Unsupported algorithm for key generation.");
        default:
          throw Error("Unknown public key algorithm.");
      }
    }, validateParams: async function(e2, t2, r2) {
      if (!t2 || !r2)
        throw Error("Missing key parameters");
      switch (e2) {
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaSign: {
          const { n: e3, e: i2 } = t2, { d: n2, p: a2, q: s2, u: o2 } = r2;
          return wn.rsa.validateParams(e3, i2, n2, a2, s2, o2);
        }
        case me.publicKey.dsa: {
          const { p: e3, q: i2, g: n2, y: a2 } = t2, { x: s2 } = r2;
          return wn.dsa.validateParams(e3, i2, n2, a2, s2);
        }
        case me.publicKey.elgamal: {
          const { p: e3, g: i2, y: n2 } = t2, { x: a2 } = r2;
          return wn.elgamal.validateParams(e3, i2, n2, a2);
        }
        case me.publicKey.ecdsa:
        case me.publicKey.ecdh: {
          const i2 = wn.elliptic[me.read(me.publicKey, e2)], { oid: n2, Q: a2 } = t2, { d: s2 } = r2;
          return i2.validateParams(n2, a2, s2);
        }
        case me.publicKey.eddsa: {
          const { oid: e3, Q: i2 } = t2, { seed: n2 } = r2;
          return wn.elliptic.eddsa.validateParams(e3, i2, n2);
        }
        default:
          throw Error("Unknown public key algorithm.");
      }
    }, getPrefixRandom: async function(e2) {
      const { blockSize: t2 } = kn(e2), r2 = await ii(t2), i2 = new Uint8Array([r2[r2.length - 2], r2[r2.length - 1]]);
      return ce.concat([r2, i2]);
    }, generateSessionKey: function(e2) {
      const { keySize: t2 } = kn(e2);
      return ii(t2);
    }, getAEADMode: function(e2) {
      const t2 = me.read(me.aead, e2);
      return ia[t2];
    }, getCipher: kn });
    var En = ce.getWebCrypto();
    var Pn = ce.getNodeCrypto();
    var xn = Pn ? Pn.getCiphers() : [];
    var Mn = { idea: xn.includes("idea-cfb") ? "idea-cfb" : void 0, tripledes: xn.includes("des-ede3-cfb") ? "des-ede3-cfb" : void 0, cast5: xn.includes("cast5-cfb") ? "cast5-cfb" : void 0, blowfish: xn.includes("bf-cfb") ? "bf-cfb" : void 0, aes128: xn.includes("aes-128-cfb") ? "aes-128-cfb" : void 0, aes192: xn.includes("aes-192-cfb") ? "aes-192-cfb" : void 0, aes256: xn.includes("aes-256-cfb") ? "aes-256-cfb" : void 0 };
    var Cn = /* @__PURE__ */ Object.freeze({ __proto__: null, encrypt: async function(e2, t2, r2, i2, n2) {
      const a2 = me.read(me.symmetric, e2);
      if (ce.getNodeCrypto() && Mn[a2])
        return function(e3, t3, r3, i3) {
          const n3 = me.read(me.symmetric, e3), a3 = new Pn.createCipheriv(Mn[n3], t3, i3);
          return Y(r3, (e4) => new Uint8Array(a3.update(e4)));
        }(e2, t2, r2, i2);
      if ("aes" === a2.substr(0, 3))
        return function(e3, t3, r3, i3, n3) {
          if (ce.getWebCrypto() && 24 !== t3.length && !ce.isStream(r3) && r3.length >= 3e3 * n3.minBytesForWebCrypto)
            return async function(e4, t4, r4, i4) {
              const n4 = "AES-CBC", a4 = await En.importKey("raw", t4, { name: n4 }, false, ["encrypt"]), { blockSize: s3 } = kn(e4), o3 = ce.concatUint8Array([new Uint8Array(s3), r4]), c3 = new Uint8Array(await En.encrypt({ name: n4, iv: i4 }, a4, o3)).subarray(0, r4.length);
              return function(e5, t5) {
                for (let r5 = 0; r5 < e5.length; r5++)
                  e5[r5] = e5[r5] ^ t5[r5];
              }(c3, r4), c3;
            }(e3, t3, r3, i3);
          const a3 = new ei(t3, i3);
          return Y(r3, (e4) => a3.aes.AES_Encrypt_process(e4), () => a3.aes.AES_Encrypt_finish());
        }(e2, t2, r2, i2, n2);
      const s2 = new nt[a2](t2), o2 = s2.blockSize, c2 = i2.slice();
      let u2 = new Uint8Array();
      const h2 = (e3) => {
        e3 && (u2 = ce.concatUint8Array([u2, e3]));
        const t3 = new Uint8Array(u2.length);
        let r3, i3 = 0;
        for (; e3 ? u2.length >= o2 : u2.length; ) {
          const e4 = s2.encrypt(c2);
          for (r3 = 0; r3 < o2; r3++)
            c2[r3] = u2[r3] ^ e4[r3], t3[i3++] = c2[r3];
          u2 = u2.subarray(o2);
        }
        return t3.subarray(0, i3);
      };
      return Y(r2, h2, h2);
    }, decrypt: async function(e2, t2, r2, i2) {
      const n2 = me.read(me.symmetric, e2);
      if (ce.getNodeCrypto() && Mn[n2])
        return function(e3, t3, r3, i3) {
          const n3 = me.read(me.symmetric, e3), a3 = new Pn.createDecipheriv(Mn[n3], t3, i3);
          return Y(r3, (e4) => new Uint8Array(a3.update(e4)));
        }(e2, t2, r2, i2);
      if ("aes" === n2.substr(0, 3))
        return function(e3, t3, r3, i3) {
          if (ce.isStream(r3)) {
            const e4 = new ei(t3, i3);
            return Y(r3, (t4) => e4.aes.AES_Decrypt_process(t4), () => e4.aes.AES_Decrypt_finish());
          }
          return ei.decrypt(r3, t3, i3);
        }(0, t2, r2, i2);
      const a2 = new nt[n2](t2), s2 = a2.blockSize;
      let o2 = i2, c2 = new Uint8Array();
      const u2 = (e3) => {
        e3 && (c2 = ce.concatUint8Array([c2, e3]));
        const t3 = new Uint8Array(c2.length);
        let r3, i3 = 0;
        for (; e3 ? c2.length >= s2 : c2.length; ) {
          const e4 = a2.encrypt(o2);
          for (o2 = c2, r3 = 0; r3 < s2; r3++)
            t3[i3++] = o2[r3] ^ e4[r3];
          c2 = c2.subarray(s2);
        }
        return t3.subarray(0, i3);
      };
      return Y(r2, u2, u2);
    } });
    var Kn = class {
      static encrypt(e2, t2, r2) {
        return new Kn(t2, r2).encrypt(e2);
      }
      static decrypt(e2, t2, r2) {
        return new Kn(t2, r2).encrypt(e2);
      }
      constructor(e2, t2, r2) {
        this.aes = r2 || new Oe(e2, void 0, false, "CTR"), delete this.aes.padding, this.AES_CTR_set_options(t2);
      }
      encrypt(e2) {
        return Ue(this.aes.AES_Encrypt_process(e2), this.aes.AES_Encrypt_finish());
      }
      decrypt(e2) {
        return Ue(this.aes.AES_Encrypt_process(e2), this.aes.AES_Encrypt_finish());
      }
      AES_CTR_set_options(e2, t2, r2) {
        let { asm: i2 } = this.aes.acquire_asm();
        if (void 0 !== r2) {
          if (r2 < 8 || r2 > 48)
            throw new Be("illegal counter size");
          let e3 = Math.pow(2, r2) - 1;
          i2.set_mask(0, 0, e3 / 4294967296 | 0, 0 | e3);
        } else
          r2 = 48, i2.set_mask(0, 0, 65535, 4294967295);
        if (void 0 === e2)
          throw Error("nonce is required");
        {
          let t3 = e2.length;
          if (!t3 || t3 > 16)
            throw new Be("illegal nonce size");
          let r3 = new DataView(new ArrayBuffer(16));
          new Uint8Array(r3.buffer).set(e2), i2.set_nonce(r3.getUint32(0), r3.getUint32(4), r3.getUint32(8), r3.getUint32(12));
        }
        if (void 0 !== t2) {
          if (t2 < 0 || t2 >= Math.pow(2, r2))
            throw new Be("illegal counter value");
          i2.set_counter(0, 0, t2 / 4294967296 | 0, 0 | t2);
        }
      }
    };
    var Dn = class {
      static encrypt(e2, t2, r2 = true, i2) {
        return new Dn(t2, i2, r2).encrypt(e2);
      }
      static decrypt(e2, t2, r2 = true, i2) {
        return new Dn(t2, i2, r2).decrypt(e2);
      }
      constructor(e2, t2, r2 = true, i2) {
        this.aes = i2 || new Oe(e2, t2, r2, "CBC");
      }
      encrypt(e2) {
        return Ue(this.aes.AES_Encrypt_process(e2), this.aes.AES_Encrypt_finish());
      }
      decrypt(e2) {
        return Ue(this.aes.AES_Decrypt_process(e2), this.aes.AES_Decrypt_finish());
      }
    };
    var Rn = ce.getWebCrypto();
    var Un = ce.getNodeCrypto();
    function In(e2, t2) {
      const r2 = e2.length - 16;
      for (let i2 = 0; i2 < 16; i2++)
        e2[i2 + r2] ^= t2[i2];
      return e2;
    }
    var Bn = new Uint8Array(16);
    async function Tn(e2) {
      const t2 = await async function(e3) {
        if (ce.getWebCrypto() && 24 !== e3.length)
          return e3 = await Rn.importKey("raw", e3, { name: "AES-CBC", length: 8 * e3.length }, false, ["encrypt"]), async function(t3) {
            const r3 = await Rn.encrypt({ name: "AES-CBC", iv: Bn, length: 128 }, e3, t3);
            return new Uint8Array(r3).subarray(0, r3.byteLength - 16);
          };
        if (ce.getNodeCrypto())
          return async function(t3) {
            const r3 = new Un.createCipheriv("aes-" + 8 * e3.length + "-cbc", e3, Bn).update(t3);
            return new Uint8Array(r3);
          };
        return async function(t3) {
          return Dn.encrypt(t3, e3, false, Bn);
        };
      }(e2), r2 = ce.double(await t2(Bn)), i2 = ce.double(r2);
      return async function(e3) {
        return (await t2(function(e4, t3, r3) {
          if (e4.length && e4.length % 16 == 0)
            return In(e4, t3);
          const i3 = new Uint8Array(e4.length + (16 - e4.length % 16));
          return i3.set(e4), i3[e4.length] = 128, In(i3, r3);
        }(e3, r2, i2))).subarray(-16);
      };
    }
    var zn = ce.getWebCrypto();
    var qn = ce.getNodeCrypto();
    var On = ce.getNodeBuffer();
    var Fn = new Uint8Array(16);
    var Nn = new Uint8Array(16);
    Nn[15] = 1;
    var jn = new Uint8Array(16);
    async function Ln(e2) {
      const t2 = await Tn(e2);
      return function(e3, r2) {
        return t2(ce.concatUint8Array([e3, r2]));
      };
    }
    async function Wn(e2) {
      return ce.getWebCrypto() && 24 !== e2.length ? (e2 = await zn.importKey("raw", e2, { name: "AES-CTR", length: 8 * e2.length }, false, ["encrypt"]), async function(t2, r2) {
        const i2 = await zn.encrypt({ name: "AES-CTR", counter: r2, length: 128 }, e2, t2);
        return new Uint8Array(i2);
      }) : ce.getNodeCrypto() ? async function(t2, r2) {
        const i2 = new qn.createCipheriv("aes-" + 8 * e2.length + "-ctr", e2, r2), n2 = On.concat([i2.update(t2), i2.final()]);
        return new Uint8Array(n2);
      } : async function(t2, r2) {
        return Kn.encrypt(t2, e2, r2);
      };
    }
    async function Hn(e2, t2) {
      if (e2 !== me.symmetric.aes128 && e2 !== me.symmetric.aes192 && e2 !== me.symmetric.aes256)
        throw Error("EAX mode supports only AES cipher");
      const [r2, i2] = await Promise.all([Ln(t2), Wn(t2)]);
      return { encrypt: async function(e3, t3, n2) {
        const [a2, s2] = await Promise.all([r2(Fn, t3), r2(Nn, n2)]), o2 = await i2(e3, a2), c2 = await r2(jn, o2);
        for (let e4 = 0; e4 < 16; e4++)
          c2[e4] ^= s2[e4] ^ a2[e4];
        return ce.concatUint8Array([o2, c2]);
      }, decrypt: async function(e3, t3, n2) {
        if (e3.length < 16)
          throw Error("Invalid EAX ciphertext");
        const a2 = e3.subarray(0, -16), s2 = e3.subarray(-16), [o2, c2, u2] = await Promise.all([r2(Fn, t3), r2(Nn, n2), r2(jn, a2)]), h2 = u2;
        for (let e4 = 0; e4 < 16; e4++)
          h2[e4] ^= c2[e4] ^ o2[e4];
        if (!ce.equalsUint8Array(s2, h2))
          throw Error("Authentication tag mismatch");
        return await i2(a2, o2);
      } };
    }
    jn[15] = 2, Hn.getNonce = function(e2, t2) {
      const r2 = e2.slice();
      for (let e3 = 0; e3 < t2.length; e3++)
        r2[8 + e3] ^= t2[e3];
      return r2;
    }, Hn.blockLength = 16, Hn.ivLength = 16, Hn.tagLength = 16;
    function Gn(e2) {
      let t2 = 0;
      for (let r2 = 1; 0 == (e2 & r2); r2 <<= 1)
        t2++;
      return t2;
    }
    function Vn(e2, t2) {
      for (let r2 = 0; r2 < e2.length; r2++)
        e2[r2] ^= t2[r2];
      return e2;
    }
    function $n(e2, t2) {
      return Vn(e2.slice(), t2);
    }
    var Zn = new Uint8Array(16);
    var Yn = new Uint8Array([1]);
    async function Xn(e2, t2) {
      let r2, i2, n2, a2 = 0;
      function s2(e3, t3, i3, s3) {
        const o2 = t3.length / 16 | 0;
        !function(e4, t4) {
          const r3 = ce.nbits(Math.max(e4.length, t4.length) / 16 | 0) - 1;
          for (let e5 = a2 + 1; e5 <= r3; e5++)
            n2[e5] = ce.double(n2[e5 - 1]);
          a2 = r3;
        }(t3, s3);
        const c2 = ce.concatUint8Array([Zn.subarray(0, 15 - i3.length), Yn, i3]), u2 = 63 & c2[15];
        c2[15] &= 192;
        const h2 = r2(c2), f2 = ce.concatUint8Array([h2, $n(h2.subarray(0, 8), h2.subarray(1, 9))]), d2 = ce.shiftRight(f2.subarray(0 + (u2 >> 3), 17 + (u2 >> 3)), 8 - (7 & u2)).subarray(1), l2 = new Uint8Array(16), p2 = new Uint8Array(t3.length + 16);
        let y2, b2 = 0;
        for (y2 = 0; y2 < o2; y2++)
          Vn(d2, n2[Gn(y2 + 1)]), p2.set(Vn(e3($n(d2, t3)), d2), b2), Vn(l2, e3 === r2 ? t3 : p2.subarray(b2)), t3 = t3.subarray(16), b2 += 16;
        if (t3.length) {
          Vn(d2, n2.x);
          const i4 = r2(d2);
          p2.set($n(t3, i4), b2);
          const a3 = new Uint8Array(16);
          a3.set(e3 === r2 ? t3 : p2.subarray(b2, -16), 0), a3[t3.length] = 128, Vn(l2, a3), b2 += t3.length;
        }
        const m2 = Vn(r2(Vn(Vn(l2, d2), n2.$)), function(e4) {
          if (!e4.length)
            return Zn;
          const t4 = e4.length / 16 | 0, i4 = new Uint8Array(16), a3 = new Uint8Array(16);
          for (let s4 = 0; s4 < t4; s4++)
            Vn(i4, n2[Gn(s4 + 1)]), Vn(a3, r2($n(i4, e4))), e4 = e4.subarray(16);
          if (e4.length) {
            Vn(i4, n2.x);
            const t5 = new Uint8Array(16);
            t5.set(e4, 0), t5[e4.length] = 128, Vn(t5, i4), Vn(a3, r2(t5));
          }
          return a3;
        }(s3));
        return p2.set(m2, b2), p2;
      }
      return function(e3, t3) {
        const a3 = me.read(me.symmetric, e3), s3 = new nt[a3](t3);
        r2 = s3.encrypt.bind(s3), i2 = s3.decrypt.bind(s3);
        const o2 = r2(Zn), c2 = ce.double(o2);
        n2 = [], n2[0] = ce.double(c2), n2.x = o2, n2.$ = c2;
      }(e2, t2), { encrypt: async function(e3, t3, i3) {
        return s2(r2, e3, t3, i3);
      }, decrypt: async function(e3, t3, r3) {
        if (e3.length < 16)
          throw Error("Invalid OCB ciphertext");
        const n3 = e3.subarray(-16);
        e3 = e3.subarray(0, -16);
        const a3 = s2(i2, e3, t3, r3);
        if (ce.equalsUint8Array(n3, a3.subarray(-16)))
          return a3.subarray(0, -16);
        throw Error("Authentication tag mismatch");
      } };
    }
    Xn.getNonce = function(e2, t2) {
      const r2 = e2.slice();
      for (let e3 = 0; e3 < t2.length; e3++)
        r2[7 + e3] ^= t2[e3];
      return r2;
    }, Xn.blockLength = 16, Xn.ivLength = 15, Xn.tagLength = 16;
    var Qn = class {
      constructor(e2, t2, r2, i2 = 16, n2) {
        this.tagSize = i2, this.gamma0 = 0, this.counter = 1, this.aes = n2 || new Oe(e2, void 0, false, "CTR");
        let { asm: a2, heap: s2 } = this.aes.acquire_asm();
        if (a2.gcm_init(), this.tagSize < 4 || this.tagSize > 16)
          throw new Be("illegal tagSize value");
        const o2 = t2.length || 0, c2 = new Uint8Array(16);
        12 !== o2 ? (this._gcm_mac_process(t2), s2[0] = 0, s2[1] = 0, s2[2] = 0, s2[3] = 0, s2[4] = 0, s2[5] = 0, s2[6] = 0, s2[7] = 0, s2[8] = 0, s2[9] = 0, s2[10] = 0, s2[11] = o2 >>> 29, s2[12] = o2 >>> 21 & 255, s2[13] = o2 >>> 13 & 255, s2[14] = o2 >>> 5 & 255, s2[15] = o2 << 3 & 255, a2.mac(Ce.MAC.GCM, Ce.HEAP_DATA, 16), a2.get_iv(Ce.HEAP_DATA), a2.set_iv(0, 0, 0, 0), c2.set(s2.subarray(0, 16))) : (c2.set(t2), c2[15] = 1);
        const u2 = new DataView(c2.buffer);
        if (this.gamma0 = u2.getUint32(12), a2.set_nonce(u2.getUint32(0), u2.getUint32(4), u2.getUint32(8), 0), a2.set_mask(0, 0, 0, 4294967295), void 0 !== r2) {
          if (r2.length > 68719476704)
            throw new Be("illegal adata length");
          r2.length ? (this.adata = r2, this._gcm_mac_process(r2)) : this.adata = void 0;
        } else
          this.adata = void 0;
        if (this.counter < 1 || this.counter > 4294967295)
          throw new RangeError("counter must be a positive 32-bit integer");
        a2.set_counter(0, 0, 0, this.gamma0 + this.counter | 0);
      }
      static encrypt(e2, t2, r2, i2, n2) {
        return new Qn(t2, r2, i2, n2).encrypt(e2);
      }
      static decrypt(e2, t2, r2, i2, n2) {
        return new Qn(t2, r2, i2, n2).decrypt(e2);
      }
      encrypt(e2) {
        return this.AES_GCM_encrypt(e2);
      }
      decrypt(e2) {
        return this.AES_GCM_decrypt(e2);
      }
      AES_GCM_Encrypt_process(e2) {
        let t2 = 0, r2 = e2.length || 0, { asm: i2, heap: n2 } = this.aes.acquire_asm(), a2 = this.counter, s2 = this.aes.pos, o2 = this.aes.len, c2 = 0, u2 = o2 + r2 & -16, h2 = 0;
        if ((a2 - 1 << 4) + o2 + r2 > 68719476704)
          throw new RangeError("counter overflow");
        const f2 = new Uint8Array(u2);
        for (; r2 > 0; )
          h2 = Re(n2, s2 + o2, e2, t2, r2), o2 += h2, t2 += h2, r2 -= h2, h2 = i2.cipher(Ce.ENC.CTR, Ce.HEAP_DATA + s2, o2), h2 = i2.mac(Ce.MAC.GCM, Ce.HEAP_DATA + s2, h2), h2 && f2.set(n2.subarray(s2, s2 + h2), c2), a2 += h2 >>> 4, c2 += h2, h2 < o2 ? (s2 += h2, o2 -= h2) : (s2 = 0, o2 = 0);
        return this.counter = a2, this.aes.pos = s2, this.aes.len = o2, f2;
      }
      AES_GCM_Encrypt_finish() {
        let { asm: e2, heap: t2 } = this.aes.acquire_asm(), r2 = this.counter, i2 = this.tagSize, n2 = this.adata, a2 = this.aes.pos, s2 = this.aes.len;
        const o2 = new Uint8Array(s2 + i2);
        e2.cipher(Ce.ENC.CTR, Ce.HEAP_DATA + a2, s2 + 15 & -16), s2 && o2.set(t2.subarray(a2, a2 + s2));
        let c2 = s2;
        for (; 15 & c2; c2++)
          t2[a2 + c2] = 0;
        e2.mac(Ce.MAC.GCM, Ce.HEAP_DATA + a2, c2);
        const u2 = void 0 !== n2 ? n2.length : 0, h2 = (r2 - 1 << 4) + s2;
        return t2[0] = 0, t2[1] = 0, t2[2] = 0, t2[3] = u2 >>> 29, t2[4] = u2 >>> 21, t2[5] = u2 >>> 13 & 255, t2[6] = u2 >>> 5 & 255, t2[7] = u2 << 3 & 255, t2[8] = t2[9] = t2[10] = 0, t2[11] = h2 >>> 29, t2[12] = h2 >>> 21 & 255, t2[13] = h2 >>> 13 & 255, t2[14] = h2 >>> 5 & 255, t2[15] = h2 << 3 & 255, e2.mac(Ce.MAC.GCM, Ce.HEAP_DATA, 16), e2.get_iv(Ce.HEAP_DATA), e2.set_counter(0, 0, 0, this.gamma0), e2.cipher(Ce.ENC.CTR, Ce.HEAP_DATA, 16), o2.set(t2.subarray(0, i2), s2), this.counter = 1, this.aes.pos = 0, this.aes.len = 0, o2;
      }
      AES_GCM_Decrypt_process(e2) {
        let t2 = 0, r2 = e2.length || 0, { asm: i2, heap: n2 } = this.aes.acquire_asm(), a2 = this.counter, s2 = this.tagSize, o2 = this.aes.pos, c2 = this.aes.len, u2 = 0, h2 = c2 + r2 > s2 ? c2 + r2 - s2 & -16 : 0, f2 = c2 + r2 - h2, d2 = 0;
        if ((a2 - 1 << 4) + c2 + r2 > 68719476704)
          throw new RangeError("counter overflow");
        const l2 = new Uint8Array(h2);
        for (; r2 > f2; )
          d2 = Re(n2, o2 + c2, e2, t2, r2 - f2), c2 += d2, t2 += d2, r2 -= d2, d2 = i2.mac(Ce.MAC.GCM, Ce.HEAP_DATA + o2, d2), d2 = i2.cipher(Ce.DEC.CTR, Ce.HEAP_DATA + o2, d2), d2 && l2.set(n2.subarray(o2, o2 + d2), u2), a2 += d2 >>> 4, u2 += d2, o2 = 0, c2 = 0;
        return r2 > 0 && (c2 += Re(n2, 0, e2, t2, r2)), this.counter = a2, this.aes.pos = o2, this.aes.len = c2, l2;
      }
      AES_GCM_Decrypt_finish() {
        let { asm: e2, heap: t2 } = this.aes.acquire_asm(), r2 = this.tagSize, i2 = this.adata, n2 = this.counter, a2 = this.aes.pos, s2 = this.aes.len, o2 = s2 - r2;
        if (s2 < r2)
          throw new Ie("authentication tag not found");
        const c2 = new Uint8Array(o2), u2 = new Uint8Array(t2.subarray(a2 + o2, a2 + s2));
        let h2 = o2;
        for (; 15 & h2; h2++)
          t2[a2 + h2] = 0;
        e2.mac(Ce.MAC.GCM, Ce.HEAP_DATA + a2, h2), e2.cipher(Ce.DEC.CTR, Ce.HEAP_DATA + a2, h2), o2 && c2.set(t2.subarray(a2, a2 + o2));
        const f2 = void 0 !== i2 ? i2.length : 0, d2 = (n2 - 1 << 4) + s2 - r2;
        t2[0] = 0, t2[1] = 0, t2[2] = 0, t2[3] = f2 >>> 29, t2[4] = f2 >>> 21, t2[5] = f2 >>> 13 & 255, t2[6] = f2 >>> 5 & 255, t2[7] = f2 << 3 & 255, t2[8] = t2[9] = t2[10] = 0, t2[11] = d2 >>> 29, t2[12] = d2 >>> 21 & 255, t2[13] = d2 >>> 13 & 255, t2[14] = d2 >>> 5 & 255, t2[15] = d2 << 3 & 255, e2.mac(Ce.MAC.GCM, Ce.HEAP_DATA, 16), e2.get_iv(Ce.HEAP_DATA), e2.set_counter(0, 0, 0, this.gamma0), e2.cipher(Ce.ENC.CTR, Ce.HEAP_DATA, 16);
        let l2 = 0;
        for (let e3 = 0; e3 < r2; ++e3)
          l2 |= u2[e3] ^ t2[e3];
        if (l2)
          throw new Te("data integrity check failed");
        return this.counter = 1, this.aes.pos = 0, this.aes.len = 0, c2;
      }
      AES_GCM_decrypt(e2) {
        const t2 = this.AES_GCM_Decrypt_process(e2), r2 = this.AES_GCM_Decrypt_finish(), i2 = new Uint8Array(t2.length + r2.length);
        return t2.length && i2.set(t2), r2.length && i2.set(r2, t2.length), i2;
      }
      AES_GCM_encrypt(e2) {
        const t2 = this.AES_GCM_Encrypt_process(e2), r2 = this.AES_GCM_Encrypt_finish(), i2 = new Uint8Array(t2.length + r2.length);
        return t2.length && i2.set(t2), r2.length && i2.set(r2, t2.length), i2;
      }
      _gcm_mac_process(e2) {
        let { asm: t2, heap: r2 } = this.aes.acquire_asm(), i2 = 0, n2 = e2.length || 0, a2 = 0;
        for (; n2 > 0; ) {
          for (a2 = Re(r2, 0, e2, i2, n2), i2 += a2, n2 -= a2; 15 & a2; )
            r2[a2++] = 0;
          t2.mac(Ce.MAC.GCM, Ce.HEAP_DATA, a2);
        }
      }
    };
    var Jn = ce.getWebCrypto();
    var ea = ce.getNodeCrypto();
    var ta = ce.getNodeBuffer();
    async function ra(e2, t2) {
      if (e2 !== me.symmetric.aes128 && e2 !== me.symmetric.aes192 && e2 !== me.symmetric.aes256)
        throw Error("GCM mode supports only AES cipher");
      if (ce.getWebCrypto() && 24 !== t2.length) {
        const e3 = await Jn.importKey("raw", t2, { name: "AES-GCM" }, false, ["encrypt", "decrypt"]);
        return { encrypt: async function(r2, i2, n2 = new Uint8Array()) {
          if (!r2.length)
            return Qn.encrypt(r2, t2, i2, n2);
          const a2 = await Jn.encrypt({ name: "AES-GCM", iv: i2, additionalData: n2, tagLength: 128 }, e3, r2);
          return new Uint8Array(a2);
        }, decrypt: async function(r2, i2, n2 = new Uint8Array()) {
          if (16 === r2.length)
            return Qn.decrypt(r2, t2, i2, n2);
          const a2 = await Jn.decrypt({ name: "AES-GCM", iv: i2, additionalData: n2, tagLength: 128 }, e3, r2);
          return new Uint8Array(a2);
        } };
      }
      return ce.getNodeCrypto() ? { encrypt: async function(e3, r2, i2 = new Uint8Array()) {
        const n2 = new ea.createCipheriv("aes-" + 8 * t2.length + "-gcm", t2, r2);
        n2.setAAD(i2);
        const a2 = ta.concat([n2.update(e3), n2.final(), n2.getAuthTag()]);
        return new Uint8Array(a2);
      }, decrypt: async function(e3, r2, i2 = new Uint8Array()) {
        const n2 = new ea.createDecipheriv("aes-" + 8 * t2.length + "-gcm", t2, r2);
        n2.setAAD(i2), n2.setAuthTag(e3.slice(e3.length - 16, e3.length));
        const a2 = ta.concat([n2.update(e3.slice(0, e3.length - 16)), n2.final()]);
        return new Uint8Array(a2);
      } } : { encrypt: async function(e3, r2, i2) {
        return Qn.encrypt(e3, t2, r2, i2);
      }, decrypt: async function(e3, r2, i2) {
        return Qn.decrypt(e3, t2, r2, i2);
      } };
    }
    ra.getNonce = function(e2, t2) {
      const r2 = e2.slice();
      for (let e3 = 0; e3 < t2.length; e3++)
        r2[4 + e3] ^= t2[e3];
      return r2;
    }, ra.blockLength = 16, ra.ivLength = 12, ra.tagLength = 16;
    var ia = { cfb: Cn, gcm: ra, experimentalGCM: ra, eax: Hn, ocb: Xn };
    var na = /* @__PURE__ */ Object.freeze({ __proto__: null, parseSignatureParams: function(e2, t2) {
      let r2 = 0;
      switch (e2) {
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaSign:
          return { s: ce.readMPI(t2.subarray(r2)) };
        case me.publicKey.dsa:
        case me.publicKey.ecdsa: {
          const e3 = ce.readMPI(t2.subarray(r2));
          r2 += e3.length + 2;
          return { r: e3, s: ce.readMPI(t2.subarray(r2)) };
        }
        case me.publicKey.eddsa: {
          let e3 = ce.readMPI(t2.subarray(r2));
          r2 += e3.length + 2, e3 = ce.leftPad(e3, 32);
          let i2 = ce.readMPI(t2.subarray(r2));
          return i2 = ce.leftPad(i2, 32), { r: e3, s: i2 };
        }
        default:
          throw new Ui("Unknown signature algorithm.");
      }
    }, verify: async function(e2, t2, r2, i2, n2, a2) {
      switch (e2) {
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaSign: {
          const { n: e3, e: s2 } = i2, o2 = ce.leftPad(r2.s, e3.length);
          return wn.rsa.verify(t2, n2, o2, e3, s2, a2);
        }
        case me.publicKey.dsa: {
          const { g: e3, p: n3, q: s2, y: o2 } = i2, { r: c2, s: u2 } = r2;
          return wn.dsa.verify(t2, c2, u2, a2, e3, n3, s2, o2);
        }
        case me.publicKey.ecdsa: {
          const { oid: e3, Q: s2 } = i2, o2 = new wn.elliptic.Curve(e3).payloadSize, c2 = ce.leftPad(r2.r, o2), u2 = ce.leftPad(r2.s, o2);
          return wn.elliptic.ecdsa.verify(e3, t2, { r: c2, s: u2 }, n2, s2, a2);
        }
        case me.publicKey.eddsa: {
          const { oid: e3, Q: s2 } = i2;
          return wn.elliptic.eddsa.verify(e3, t2, r2, n2, s2, a2);
        }
        default:
          throw Error("Unknown signature algorithm.");
      }
    }, sign: async function(e2, t2, r2, i2, n2, a2) {
      if (!r2 || !i2)
        throw Error("Missing key parameters");
      switch (e2) {
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaEncrypt:
        case me.publicKey.rsaSign: {
          const { n: e3, e: s2 } = r2, { d: o2, p: c2, q: u2, u: h2 } = i2;
          return { s: await wn.rsa.sign(t2, n2, e3, s2, o2, c2, u2, h2, a2) };
        }
        case me.publicKey.dsa: {
          const { g: e3, p: n3, q: s2 } = r2, { x: o2 } = i2;
          return wn.dsa.sign(t2, a2, e3, n3, s2, o2);
        }
        case me.publicKey.elgamal:
          throw Error("Signing with Elgamal is not defined in the OpenPGP standard.");
        case me.publicKey.ecdsa: {
          const { oid: e3, Q: s2 } = r2, { d: o2 } = i2;
          return wn.elliptic.ecdsa.sign(e3, t2, n2, s2, o2, a2);
        }
        case me.publicKey.eddsa: {
          const { oid: e3, Q: s2 } = r2, { seed: o2 } = i2;
          return wn.elliptic.eddsa.sign(e3, t2, n2, s2, o2, a2);
        }
        default:
          throw Error("Unknown signature algorithm.");
      }
    } });
    var aa = { cipher: nt, hash: Jr, mode: ia, publicKey: wn, signature: na, random: si, pkcs1: pi, pkcs5: fn, aesKW: cn };
    Object.assign(aa, Sn);
    var sa = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
    function oa(e2, t2) {
      return e2.length === t2 ? e2 : e2.subarray ? e2.subarray(0, t2) : (e2.length = t2, e2);
    }
    var ca = { arraySet: function(e2, t2, r2, i2, n2) {
      if (t2.subarray && e2.subarray)
        e2.set(t2.subarray(r2, r2 + i2), n2);
      else
        for (let a2 = 0; a2 < i2; a2++)
          e2[n2 + a2] = t2[r2 + a2];
    }, flattenChunks: function(e2) {
      let t2, r2, i2, n2, a2;
      for (i2 = 0, t2 = 0, r2 = e2.length; t2 < r2; t2++)
        i2 += e2[t2].length;
      const s2 = new Uint8Array(i2);
      for (n2 = 0, t2 = 0, r2 = e2.length; t2 < r2; t2++)
        a2 = e2[t2], s2.set(a2, n2), n2 += a2.length;
      return s2;
    } };
    var ua = { arraySet: function(e2, t2, r2, i2, n2) {
      for (let a2 = 0; a2 < i2; a2++)
        e2[n2 + a2] = t2[r2 + a2];
    }, flattenChunks: function(e2) {
      return [].concat.apply([], e2);
    } };
    var ha = sa ? Uint8Array : Array;
    var fa = sa ? Uint16Array : Array;
    var da = sa ? Int32Array : Array;
    var la = sa ? ca.flattenChunks : ua.flattenChunks;
    var pa = sa ? ca.arraySet : ua.arraySet;
    function ya(e2) {
      let t2 = e2.length;
      for (; --t2 >= 0; )
        e2[t2] = 0;
    }
    var ba = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
    var ma = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
    var ga = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
    var wa = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    var va = Array(576);
    ya(va);
    var _a = Array(60);
    ya(_a);
    var ka = Array(512);
    ya(ka);
    var Aa = Array(256);
    ya(Aa);
    var Sa = Array(29);
    ya(Sa);
    var Ea = Array(30);
    function Pa(e2, t2, r2, i2, n2) {
      this.static_tree = e2, this.extra_bits = t2, this.extra_base = r2, this.elems = i2, this.max_length = n2, this.has_stree = e2 && e2.length;
    }
    var xa;
    var Ma;
    var Ca;
    function Ka(e2, t2) {
      this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;
    }
    function Da(e2) {
      return e2 < 256 ? ka[e2] : ka[256 + (e2 >>> 7)];
    }
    function Ra(e2, t2) {
      e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;
    }
    function Ua(e2, t2, r2) {
      e2.bi_valid > 16 - r2 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, Ra(e2, e2.bi_buf), e2.bi_buf = t2 >> 16 - e2.bi_valid, e2.bi_valid += r2 - 16) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += r2);
    }
    function Ia(e2, t2, r2) {
      Ua(e2, r2[2 * t2], r2[2 * t2 + 1]);
    }
    function Ba(e2, t2) {
      let r2 = 0;
      do {
        r2 |= 1 & e2, e2 >>>= 1, r2 <<= 1;
      } while (--t2 > 0);
      return r2 >>> 1;
    }
    function Ta(e2, t2, r2) {
      const i2 = Array(16);
      let n2, a2, s2 = 0;
      for (n2 = 1; n2 <= 15; n2++)
        i2[n2] = s2 = s2 + r2[n2 - 1] << 1;
      for (a2 = 0; a2 <= t2; a2++) {
        const t3 = e2[2 * a2 + 1];
        0 !== t3 && (e2[2 * a2] = Ba(i2[t3]++, t3));
      }
    }
    function za(e2) {
      let t2;
      for (t2 = 0; t2 < 286; t2++)
        e2.dyn_ltree[2 * t2] = 0;
      for (t2 = 0; t2 < 30; t2++)
        e2.dyn_dtree[2 * t2] = 0;
      for (t2 = 0; t2 < 19; t2++)
        e2.bl_tree[2 * t2] = 0;
      e2.dyn_ltree[512] = 1, e2.opt_len = e2.static_len = 0, e2.last_lit = e2.matches = 0;
    }
    function qa(e2) {
      e2.bi_valid > 8 ? Ra(e2, e2.bi_buf) : e2.bi_valid > 0 && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;
    }
    function Oa(e2, t2, r2, i2) {
      const n2 = 2 * t2, a2 = 2 * r2;
      return e2[n2] < e2[a2] || e2[n2] === e2[a2] && i2[t2] <= i2[r2];
    }
    function Fa(e2, t2, r2) {
      const i2 = e2.heap[r2];
      let n2 = r2 << 1;
      for (; n2 <= e2.heap_len && (n2 < e2.heap_len && Oa(t2, e2.heap[n2 + 1], e2.heap[n2], e2.depth) && n2++, !Oa(t2, i2, e2.heap[n2], e2.depth)); )
        e2.heap[r2] = e2.heap[n2], r2 = n2, n2 <<= 1;
      e2.heap[r2] = i2;
    }
    function Na(e2, t2, r2) {
      let i2, n2, a2, s2, o2 = 0;
      if (0 !== e2.last_lit)
        do {
          i2 = e2.pending_buf[e2.d_buf + 2 * o2] << 8 | e2.pending_buf[e2.d_buf + 2 * o2 + 1], n2 = e2.pending_buf[e2.l_buf + o2], o2++, 0 === i2 ? Ia(e2, n2, t2) : (a2 = Aa[n2], Ia(e2, a2 + 256 + 1, t2), s2 = ba[a2], 0 !== s2 && (n2 -= Sa[a2], Ua(e2, n2, s2)), i2--, a2 = Da(i2), Ia(e2, a2, r2), s2 = ma[a2], 0 !== s2 && (i2 -= Ea[a2], Ua(e2, i2, s2)));
        } while (o2 < e2.last_lit);
      Ia(e2, 256, t2);
    }
    function ja(e2, t2) {
      const r2 = t2.dyn_tree, i2 = t2.stat_desc.static_tree, n2 = t2.stat_desc.has_stree, a2 = t2.stat_desc.elems;
      let s2, o2, c2, u2 = -1;
      for (e2.heap_len = 0, e2.heap_max = 573, s2 = 0; s2 < a2; s2++)
        0 !== r2[2 * s2] ? (e2.heap[++e2.heap_len] = u2 = s2, e2.depth[s2] = 0) : r2[2 * s2 + 1] = 0;
      for (; e2.heap_len < 2; )
        c2 = e2.heap[++e2.heap_len] = u2 < 2 ? ++u2 : 0, r2[2 * c2] = 1, e2.depth[c2] = 0, e2.opt_len--, n2 && (e2.static_len -= i2[2 * c2 + 1]);
      for (t2.max_code = u2, s2 = e2.heap_len >> 1; s2 >= 1; s2--)
        Fa(e2, r2, s2);
      c2 = a2;
      do {
        s2 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], Fa(e2, r2, 1), o2 = e2.heap[1], e2.heap[--e2.heap_max] = s2, e2.heap[--e2.heap_max] = o2, r2[2 * c2] = r2[2 * s2] + r2[2 * o2], e2.depth[c2] = (e2.depth[s2] >= e2.depth[o2] ? e2.depth[s2] : e2.depth[o2]) + 1, r2[2 * s2 + 1] = r2[2 * o2 + 1] = c2, e2.heap[1] = c2++, Fa(e2, r2, 1);
      } while (e2.heap_len >= 2);
      e2.heap[--e2.heap_max] = e2.heap[1], function(e3, t3) {
        const r3 = t3.dyn_tree, i3 = t3.max_code, n3 = t3.stat_desc.static_tree, a3 = t3.stat_desc.has_stree, s3 = t3.stat_desc.extra_bits, o3 = t3.stat_desc.extra_base, c3 = t3.stat_desc.max_length;
        let u3, h2, f2, d2, l2, p2, y2 = 0;
        for (d2 = 0; d2 <= 15; d2++)
          e3.bl_count[d2] = 0;
        for (r3[2 * e3.heap[e3.heap_max] + 1] = 0, u3 = e3.heap_max + 1; u3 < 573; u3++)
          h2 = e3.heap[u3], d2 = r3[2 * r3[2 * h2 + 1] + 1] + 1, d2 > c3 && (d2 = c3, y2++), r3[2 * h2 + 1] = d2, h2 > i3 || (e3.bl_count[d2]++, l2 = 0, h2 >= o3 && (l2 = s3[h2 - o3]), p2 = r3[2 * h2], e3.opt_len += p2 * (d2 + l2), a3 && (e3.static_len += p2 * (n3[2 * h2 + 1] + l2)));
        if (0 !== y2) {
          do {
            for (d2 = c3 - 1; 0 === e3.bl_count[d2]; )
              d2--;
            e3.bl_count[d2]--, e3.bl_count[d2 + 1] += 2, e3.bl_count[c3]--, y2 -= 2;
          } while (y2 > 0);
          for (d2 = c3; 0 !== d2; d2--)
            for (h2 = e3.bl_count[d2]; 0 !== h2; )
              f2 = e3.heap[--u3], f2 > i3 || (r3[2 * f2 + 1] !== d2 && (e3.opt_len += (d2 - r3[2 * f2 + 1]) * r3[2 * f2], r3[2 * f2 + 1] = d2), h2--);
        }
      }(e2, t2), Ta(r2, u2, e2.bl_count);
    }
    function La(e2, t2, r2) {
      let i2, n2, a2 = -1, s2 = t2[1], o2 = 0, c2 = 7, u2 = 4;
      for (0 === s2 && (c2 = 138, u2 = 3), t2[2 * (r2 + 1) + 1] = 65535, i2 = 0; i2 <= r2; i2++)
        n2 = s2, s2 = t2[2 * (i2 + 1) + 1], ++o2 < c2 && n2 === s2 || (o2 < u2 ? e2.bl_tree[2 * n2] += o2 : 0 !== n2 ? (n2 !== a2 && e2.bl_tree[2 * n2]++, e2.bl_tree[32]++) : o2 <= 10 ? e2.bl_tree[34]++ : e2.bl_tree[36]++, o2 = 0, a2 = n2, 0 === s2 ? (c2 = 138, u2 = 3) : n2 === s2 ? (c2 = 6, u2 = 3) : (c2 = 7, u2 = 4));
    }
    function Wa(e2, t2, r2) {
      let i2, n2, a2 = -1, s2 = t2[1], o2 = 0, c2 = 7, u2 = 4;
      for (0 === s2 && (c2 = 138, u2 = 3), i2 = 0; i2 <= r2; i2++)
        if (n2 = s2, s2 = t2[2 * (i2 + 1) + 1], !(++o2 < c2 && n2 === s2)) {
          if (o2 < u2)
            do {
              Ia(e2, n2, e2.bl_tree);
            } while (0 != --o2);
          else
            0 !== n2 ? (n2 !== a2 && (Ia(e2, n2, e2.bl_tree), o2--), Ia(e2, 16, e2.bl_tree), Ua(e2, o2 - 3, 2)) : o2 <= 10 ? (Ia(e2, 17, e2.bl_tree), Ua(e2, o2 - 3, 3)) : (Ia(e2, 18, e2.bl_tree), Ua(e2, o2 - 11, 7));
          o2 = 0, a2 = n2, 0 === s2 ? (c2 = 138, u2 = 3) : n2 === s2 ? (c2 = 6, u2 = 3) : (c2 = 7, u2 = 4);
        }
    }
    ya(Ea);
    var Ha = false;
    function Ga(e2) {
      Ha || (!function() {
        let e3, t2, r2, i2, n2;
        const a2 = Array(16);
        for (r2 = 0, i2 = 0; i2 < 28; i2++)
          for (Sa[i2] = r2, e3 = 0; e3 < 1 << ba[i2]; e3++)
            Aa[r2++] = i2;
        for (Aa[r2 - 1] = i2, n2 = 0, i2 = 0; i2 < 16; i2++)
          for (Ea[i2] = n2, e3 = 0; e3 < 1 << ma[i2]; e3++)
            ka[n2++] = i2;
        for (n2 >>= 7; i2 < 30; i2++)
          for (Ea[i2] = n2 << 7, e3 = 0; e3 < 1 << ma[i2] - 7; e3++)
            ka[256 + n2++] = i2;
        for (t2 = 0; t2 <= 15; t2++)
          a2[t2] = 0;
        for (e3 = 0; e3 <= 143; )
          va[2 * e3 + 1] = 8, e3++, a2[8]++;
        for (; e3 <= 255; )
          va[2 * e3 + 1] = 9, e3++, a2[9]++;
        for (; e3 <= 279; )
          va[2 * e3 + 1] = 7, e3++, a2[7]++;
        for (; e3 <= 287; )
          va[2 * e3 + 1] = 8, e3++, a2[8]++;
        for (Ta(va, 287, a2), e3 = 0; e3 < 30; e3++)
          _a[2 * e3 + 1] = 5, _a[2 * e3] = Ba(e3, 5);
        xa = new Pa(va, ba, 257, 286, 15), Ma = new Pa(_a, ma, 0, 30, 15), Ca = new Pa([], ga, 0, 19, 7);
      }(), Ha = true), e2.l_desc = new Ka(e2.dyn_ltree, xa), e2.d_desc = new Ka(e2.dyn_dtree, Ma), e2.bl_desc = new Ka(e2.bl_tree, Ca), e2.bi_buf = 0, e2.bi_valid = 0, za(e2);
    }
    function Va(e2, t2, r2, i2) {
      Ua(e2, 0 + (i2 ? 1 : 0), 3), function(e3, t3, r3, i3) {
        qa(e3), i3 && (Ra(e3, r3), Ra(e3, ~r3)), pa(e3.pending_buf, e3.window, t3, r3, e3.pending), e3.pending += r3;
      }(e2, t2, r2, true);
    }
    function $a(e2) {
      Ua(e2, 2, 3), Ia(e2, 256, va), function(e3) {
        16 === e3.bi_valid ? (Ra(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : e3.bi_valid >= 8 && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);
      }(e2);
    }
    function Za(e2, t2, r2, i2) {
      let n2, a2, s2 = 0;
      e2.level > 0 ? (2 === e2.strm.data_type && (e2.strm.data_type = function(e3) {
        let t3, r3 = 4093624447;
        for (t3 = 0; t3 <= 31; t3++, r3 >>>= 1)
          if (1 & r3 && 0 !== e3.dyn_ltree[2 * t3])
            return 0;
        if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26])
          return 1;
        for (t3 = 32; t3 < 256; t3++)
          if (0 !== e3.dyn_ltree[2 * t3])
            return 1;
        return 0;
      }(e2)), ja(e2, e2.l_desc), ja(e2, e2.d_desc), s2 = function(e3) {
        let t3;
        for (La(e3, e3.dyn_ltree, e3.l_desc.max_code), La(e3, e3.dyn_dtree, e3.d_desc.max_code), ja(e3, e3.bl_desc), t3 = 18; t3 >= 3 && 0 === e3.bl_tree[2 * wa[t3] + 1]; t3--)
          ;
        return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;
      }(e2), n2 = e2.opt_len + 3 + 7 >>> 3, a2 = e2.static_len + 3 + 7 >>> 3, a2 <= n2 && (n2 = a2)) : n2 = a2 = r2 + 5, r2 + 4 <= n2 && -1 !== t2 ? Va(e2, t2, r2, i2) : 4 === e2.strategy || a2 === n2 ? (Ua(e2, 2 + (i2 ? 1 : 0), 3), Na(e2, va, _a)) : (Ua(e2, 4 + (i2 ? 1 : 0), 3), function(e3, t3, r3, i3) {
        let n3;
        for (Ua(e3, t3 - 257, 5), Ua(e3, r3 - 1, 5), Ua(e3, i3 - 4, 4), n3 = 0; n3 < i3; n3++)
          Ua(e3, e3.bl_tree[2 * wa[n3] + 1], 3);
        Wa(e3, e3.dyn_ltree, t3 - 1), Wa(e3, e3.dyn_dtree, r3 - 1);
      }(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, s2 + 1), Na(e2, e2.dyn_ltree, e2.dyn_dtree)), za(e2), i2 && qa(e2);
    }
    function Ya(e2, t2, r2) {
      return e2.pending_buf[e2.d_buf + 2 * e2.last_lit] = t2 >>> 8 & 255, e2.pending_buf[e2.d_buf + 2 * e2.last_lit + 1] = 255 & t2, e2.pending_buf[e2.l_buf + e2.last_lit] = 255 & r2, e2.last_lit++, 0 === t2 ? e2.dyn_ltree[2 * r2]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (Aa[r2] + 256 + 1)]++, e2.dyn_dtree[2 * Da(t2)]++), e2.last_lit === e2.lit_bufsize - 1;
    }
    function Xa(e2, t2, r2, i2) {
      let n2 = 65535 & e2 | 0, a2 = e2 >>> 16 & 65535 | 0, s2 = 0;
      for (; 0 !== r2; ) {
        s2 = r2 > 2e3 ? 2e3 : r2, r2 -= s2;
        do {
          n2 = n2 + t2[i2++] | 0, a2 = a2 + n2 | 0;
        } while (--s2);
        n2 %= 65521, a2 %= 65521;
      }
      return n2 | a2 << 16 | 0;
    }
    var Qa = function() {
      let e2;
      const t2 = [];
      for (let r2 = 0; r2 < 256; r2++) {
        e2 = r2;
        for (let t3 = 0; t3 < 8; t3++)
          e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;
        t2[r2] = e2;
      }
      return t2;
    }();
    function Ja(e2, t2, r2, i2) {
      const n2 = Qa, a2 = i2 + r2;
      e2 ^= -1;
      for (let r3 = i2; r3 < a2; r3++)
        e2 = e2 >>> 8 ^ n2[255 & (e2 ^ t2[r3])];
      return -1 ^ e2;
    }
    var es = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
    function ts(e2, t2) {
      return e2.msg = es[t2], t2;
    }
    function rs(e2) {
      return (e2 << 1) - (e2 > 4 ? 9 : 0);
    }
    function is(e2) {
      let t2 = e2.length;
      for (; --t2 >= 0; )
        e2[t2] = 0;
    }
    function ns(e2) {
      const t2 = e2.state;
      let r2 = t2.pending;
      r2 > e2.avail_out && (r2 = e2.avail_out), 0 !== r2 && (pa(e2.output, t2.pending_buf, t2.pending_out, r2, e2.next_out), e2.next_out += r2, t2.pending_out += r2, e2.total_out += r2, e2.avail_out -= r2, t2.pending -= r2, 0 === t2.pending && (t2.pending_out = 0));
    }
    function as(e2, t2) {
      Za(e2, e2.block_start >= 0 ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, ns(e2.strm);
    }
    function ss(e2, t2) {
      e2.pending_buf[e2.pending++] = t2;
    }
    function os(e2, t2) {
      e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;
    }
    function cs(e2, t2, r2, i2) {
      let n2 = e2.avail_in;
      return n2 > i2 && (n2 = i2), 0 === n2 ? 0 : (e2.avail_in -= n2, pa(t2, e2.input, e2.next_in, n2, r2), 1 === e2.state.wrap ? e2.adler = Xa(e2.adler, t2, n2, r2) : 2 === e2.state.wrap && (e2.adler = Ja(e2.adler, t2, n2, r2)), e2.next_in += n2, e2.total_in += n2, n2);
    }
    function us(e2, t2) {
      let r2, i2, n2 = e2.max_chain_length, a2 = e2.strstart, s2 = e2.prev_length, o2 = e2.nice_match;
      const c2 = e2.strstart > e2.w_size - 262 ? e2.strstart - (e2.w_size - 262) : 0, u2 = e2.window, h2 = e2.w_mask, f2 = e2.prev, d2 = e2.strstart + 258;
      let l2 = u2[a2 + s2 - 1], p2 = u2[a2 + s2];
      e2.prev_length >= e2.good_match && (n2 >>= 2), o2 > e2.lookahead && (o2 = e2.lookahead);
      do {
        if (r2 = t2, u2[r2 + s2] === p2 && u2[r2 + s2 - 1] === l2 && u2[r2] === u2[a2] && u2[++r2] === u2[a2 + 1]) {
          a2 += 2, r2++;
          do {
          } while (u2[++a2] === u2[++r2] && u2[++a2] === u2[++r2] && u2[++a2] === u2[++r2] && u2[++a2] === u2[++r2] && u2[++a2] === u2[++r2] && u2[++a2] === u2[++r2] && u2[++a2] === u2[++r2] && u2[++a2] === u2[++r2] && a2 < d2);
          if (i2 = 258 - (d2 - a2), a2 = d2 - 258, i2 > s2) {
            if (e2.match_start = t2, s2 = i2, i2 >= o2)
              break;
            l2 = u2[a2 + s2 - 1], p2 = u2[a2 + s2];
          }
        }
      } while ((t2 = f2[t2 & h2]) > c2 && 0 != --n2);
      return s2 <= e2.lookahead ? s2 : e2.lookahead;
    }
    function hs(e2) {
      const t2 = e2.w_size;
      let r2, i2, n2, a2, s2;
      do {
        if (a2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= t2 + (t2 - 262)) {
          pa(e2.window, e2.window, t2, t2, 0), e2.match_start -= t2, e2.strstart -= t2, e2.block_start -= t2, i2 = e2.hash_size, r2 = i2;
          do {
            n2 = e2.head[--r2], e2.head[r2] = n2 >= t2 ? n2 - t2 : 0;
          } while (--i2);
          i2 = t2, r2 = i2;
          do {
            n2 = e2.prev[--r2], e2.prev[r2] = n2 >= t2 ? n2 - t2 : 0;
          } while (--i2);
          a2 += t2;
        }
        if (0 === e2.strm.avail_in)
          break;
        if (i2 = cs(e2.strm, e2.window, e2.strstart + e2.lookahead, a2), e2.lookahead += i2, e2.lookahead + e2.insert >= 3)
          for (s2 = e2.strstart - e2.insert, e2.ins_h = e2.window[s2], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + 1]) & e2.hash_mask; e2.insert && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + 3 - 1]) & e2.hash_mask, e2.prev[s2 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = s2, s2++, e2.insert--, !(e2.lookahead + e2.insert < 3)); )
            ;
      } while (e2.lookahead < 262 && 0 !== e2.strm.avail_in);
    }
    function fs(e2, t2) {
      let r2, i2;
      for (; ; ) {
        if (e2.lookahead < 262) {
          if (hs(e2), e2.lookahead < 262 && 0 === t2)
            return 1;
          if (0 === e2.lookahead)
            break;
        }
        if (r2 = 0, e2.lookahead >= 3 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 3 - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== r2 && e2.strstart - r2 <= e2.w_size - 262 && (e2.match_length = us(e2, r2)), e2.match_length >= 3)
          if (i2 = Ya(e2, e2.strstart - e2.match_start, e2.match_length - 3), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= 3) {
            e2.match_length--;
            do {
              e2.strstart++, e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 3 - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart;
            } while (0 != --e2.match_length);
            e2.strstart++;
          } else
            e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 1]) & e2.hash_mask;
        else
          i2 = Ya(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;
        if (i2 && (as(e2, false), 0 === e2.strm.avail_out))
          return 1;
      }
      return e2.insert = e2.strstart < 2 ? e2.strstart : 2, 4 === t2 ? (as(e2, true), 0 === e2.strm.avail_out ? 3 : 4) : e2.last_lit && (as(e2, false), 0 === e2.strm.avail_out) ? 1 : 2;
    }
    function ds(e2, t2) {
      let r2, i2, n2;
      for (; ; ) {
        if (e2.lookahead < 262) {
          if (hs(e2), e2.lookahead < 262 && 0 === t2)
            return 1;
          if (0 === e2.lookahead)
            break;
        }
        if (r2 = 0, e2.lookahead >= 3 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 3 - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = 2, 0 !== r2 && e2.prev_length < e2.max_lazy_match && e2.strstart - r2 <= e2.w_size - 262 && (e2.match_length = us(e2, r2), e2.match_length <= 5 && (1 === e2.strategy || 3 === e2.match_length && e2.strstart - e2.match_start > 4096) && (e2.match_length = 2)), e2.prev_length >= 3 && e2.match_length <= e2.prev_length) {
          n2 = e2.strstart + e2.lookahead - 3, i2 = Ya(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - 3), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2;
          do {
            ++e2.strstart <= n2 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 3 - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart);
          } while (0 != --e2.prev_length);
          if (e2.match_available = 0, e2.match_length = 2, e2.strstart++, i2 && (as(e2, false), 0 === e2.strm.avail_out))
            return 1;
        } else if (e2.match_available) {
          if (i2 = Ya(e2, 0, e2.window[e2.strstart - 1]), i2 && as(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out)
            return 1;
        } else
          e2.match_available = 1, e2.strstart++, e2.lookahead--;
      }
      return e2.match_available && (i2 = Ya(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < 2 ? e2.strstart : 2, 4 === t2 ? (as(e2, true), 0 === e2.strm.avail_out ? 3 : 4) : e2.last_lit && (as(e2, false), 0 === e2.strm.avail_out) ? 1 : 2;
    }
    var ls = class {
      constructor(e2, t2, r2, i2, n2) {
        this.good_length = e2, this.max_lazy = t2, this.nice_length = r2, this.max_chain = i2, this.func = n2;
      }
    };
    var ps = [new ls(0, 0, 0, 0, function(e2, t2) {
      let r2 = 65535;
      for (r2 > e2.pending_buf_size - 5 && (r2 = e2.pending_buf_size - 5); ; ) {
        if (e2.lookahead <= 1) {
          if (hs(e2), 0 === e2.lookahead && 0 === t2)
            return 1;
          if (0 === e2.lookahead)
            break;
        }
        e2.strstart += e2.lookahead, e2.lookahead = 0;
        const i2 = e2.block_start + r2;
        if ((0 === e2.strstart || e2.strstart >= i2) && (e2.lookahead = e2.strstart - i2, e2.strstart = i2, as(e2, false), 0 === e2.strm.avail_out))
          return 1;
        if (e2.strstart - e2.block_start >= e2.w_size - 262 && (as(e2, false), 0 === e2.strm.avail_out))
          return 1;
      }
      return e2.insert = 0, 4 === t2 ? (as(e2, true), 0 === e2.strm.avail_out ? 3 : 4) : (e2.strstart > e2.block_start && (as(e2, false), e2.strm.avail_out), 1);
    }), new ls(4, 4, 8, 4, fs), new ls(4, 5, 16, 8, fs), new ls(4, 6, 32, 32, fs), new ls(4, 4, 16, 16, ds), new ls(8, 16, 32, 32, ds), new ls(8, 16, 128, 128, ds), new ls(8, 32, 128, 256, ds), new ls(32, 128, 258, 1024, ds), new ls(32, 258, 258, 4096, ds)];
    var ys = class {
      constructor() {
        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = 8, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new fa(1146), this.dyn_dtree = new fa(122), this.bl_tree = new fa(78), is(this.dyn_ltree), is(this.dyn_dtree), is(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new fa(16), this.heap = new fa(573), is(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new fa(573), is(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
      }
    };
    function bs(e2) {
      const t2 = function(e3) {
        let t3;
        return e3 && e3.state ? (e3.total_in = e3.total_out = 0, e3.data_type = 2, t3 = e3.state, t3.pending = 0, t3.pending_out = 0, t3.wrap < 0 && (t3.wrap = -t3.wrap), t3.status = t3.wrap ? 42 : 113, e3.adler = 2 === t3.wrap ? 0 : 1, t3.last_flush = 0, Ga(t3), 0) : ts(e3, -2);
      }(e2);
      return 0 === t2 && function(e3) {
        e3.window_size = 2 * e3.w_size, is(e3.head), e3.max_lazy_match = ps[e3.level].max_lazy, e3.good_match = ps[e3.level].good_length, e3.nice_match = ps[e3.level].nice_length, e3.max_chain_length = ps[e3.level].max_chain, e3.strstart = 0, e3.block_start = 0, e3.lookahead = 0, e3.insert = 0, e3.match_length = e3.prev_length = 2, e3.match_available = 0, e3.ins_h = 0;
      }(e2.state), t2;
    }
    function ms(e2, t2) {
      let r2, i2, n2, a2;
      if (!e2 || !e2.state || t2 > 5 || t2 < 0)
        return e2 ? ts(e2, -2) : -2;
      if (i2 = e2.state, !e2.output || !e2.input && 0 !== e2.avail_in || 666 === i2.status && 4 !== t2)
        return ts(e2, 0 === e2.avail_out ? -5 : -2);
      if (i2.strm = e2, r2 = i2.last_flush, i2.last_flush = t2, 42 === i2.status)
        if (2 === i2.wrap)
          e2.adler = 0, ss(i2, 31), ss(i2, 139), ss(i2, 8), i2.gzhead ? (ss(i2, (i2.gzhead.text ? 1 : 0) + (i2.gzhead.hcrc ? 2 : 0) + (i2.gzhead.extra ? 4 : 0) + (i2.gzhead.name ? 8 : 0) + (i2.gzhead.comment ? 16 : 0)), ss(i2, 255 & i2.gzhead.time), ss(i2, i2.gzhead.time >> 8 & 255), ss(i2, i2.gzhead.time >> 16 & 255), ss(i2, i2.gzhead.time >> 24 & 255), ss(i2, 9 === i2.level ? 2 : i2.strategy >= 2 || i2.level < 2 ? 4 : 0), ss(i2, 255 & i2.gzhead.os), i2.gzhead.extra && i2.gzhead.extra.length && (ss(i2, 255 & i2.gzhead.extra.length), ss(i2, i2.gzhead.extra.length >> 8 & 255)), i2.gzhead.hcrc && (e2.adler = Ja(e2.adler, i2.pending_buf, i2.pending, 0)), i2.gzindex = 0, i2.status = 69) : (ss(i2, 0), ss(i2, 0), ss(i2, 0), ss(i2, 0), ss(i2, 0), ss(i2, 9 === i2.level ? 2 : i2.strategy >= 2 || i2.level < 2 ? 4 : 0), ss(i2, 3), i2.status = 113);
        else {
          let t3 = 8 + (i2.w_bits - 8 << 4) << 8, r3 = -1;
          r3 = i2.strategy >= 2 || i2.level < 2 ? 0 : i2.level < 6 ? 1 : 6 === i2.level ? 2 : 3, t3 |= r3 << 6, 0 !== i2.strstart && (t3 |= 32), t3 += 31 - t3 % 31, i2.status = 113, os(i2, t3), 0 !== i2.strstart && (os(i2, e2.adler >>> 16), os(i2, 65535 & e2.adler)), e2.adler = 1;
        }
      if (69 === i2.status)
        if (i2.gzhead.extra) {
          for (n2 = i2.pending; i2.gzindex < (65535 & i2.gzhead.extra.length) && (i2.pending !== i2.pending_buf_size || (i2.gzhead.hcrc && i2.pending > n2 && (e2.adler = Ja(e2.adler, i2.pending_buf, i2.pending - n2, n2)), ns(e2), n2 = i2.pending, i2.pending !== i2.pending_buf_size)); )
            ss(i2, 255 & i2.gzhead.extra[i2.gzindex]), i2.gzindex++;
          i2.gzhead.hcrc && i2.pending > n2 && (e2.adler = Ja(e2.adler, i2.pending_buf, i2.pending - n2, n2)), i2.gzindex === i2.gzhead.extra.length && (i2.gzindex = 0, i2.status = 73);
        } else
          i2.status = 73;
      if (73 === i2.status)
        if (i2.gzhead.name) {
          n2 = i2.pending;
          do {
            if (i2.pending === i2.pending_buf_size && (i2.gzhead.hcrc && i2.pending > n2 && (e2.adler = Ja(e2.adler, i2.pending_buf, i2.pending - n2, n2)), ns(e2), n2 = i2.pending, i2.pending === i2.pending_buf_size)) {
              a2 = 1;
              break;
            }
            a2 = i2.gzindex < i2.gzhead.name.length ? 255 & i2.gzhead.name.charCodeAt(i2.gzindex++) : 0, ss(i2, a2);
          } while (0 !== a2);
          i2.gzhead.hcrc && i2.pending > n2 && (e2.adler = Ja(e2.adler, i2.pending_buf, i2.pending - n2, n2)), 0 === a2 && (i2.gzindex = 0, i2.status = 91);
        } else
          i2.status = 91;
      if (91 === i2.status)
        if (i2.gzhead.comment) {
          n2 = i2.pending;
          do {
            if (i2.pending === i2.pending_buf_size && (i2.gzhead.hcrc && i2.pending > n2 && (e2.adler = Ja(e2.adler, i2.pending_buf, i2.pending - n2, n2)), ns(e2), n2 = i2.pending, i2.pending === i2.pending_buf_size)) {
              a2 = 1;
              break;
            }
            a2 = i2.gzindex < i2.gzhead.comment.length ? 255 & i2.gzhead.comment.charCodeAt(i2.gzindex++) : 0, ss(i2, a2);
          } while (0 !== a2);
          i2.gzhead.hcrc && i2.pending > n2 && (e2.adler = Ja(e2.adler, i2.pending_buf, i2.pending - n2, n2)), 0 === a2 && (i2.status = 103);
        } else
          i2.status = 103;
      if (103 === i2.status && (i2.gzhead.hcrc ? (i2.pending + 2 > i2.pending_buf_size && ns(e2), i2.pending + 2 <= i2.pending_buf_size && (ss(i2, 255 & e2.adler), ss(i2, e2.adler >> 8 & 255), e2.adler = 0, i2.status = 113)) : i2.status = 113), 0 !== i2.pending) {
        if (ns(e2), 0 === e2.avail_out)
          return i2.last_flush = -1, 0;
      } else if (0 === e2.avail_in && rs(t2) <= rs(r2) && 4 !== t2)
        return ts(e2, -5);
      if (666 === i2.status && 0 !== e2.avail_in)
        return ts(e2, -5);
      if (0 !== e2.avail_in || 0 !== i2.lookahead || 0 !== t2 && 666 !== i2.status) {
        var s2 = 2 === i2.strategy ? function(e3, t3) {
          let r3;
          for (; ; ) {
            if (0 === e3.lookahead && (hs(e3), 0 === e3.lookahead)) {
              if (0 === t3)
                return 1;
              break;
            }
            if (e3.match_length = 0, r3 = Ya(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, r3 && (as(e3, false), 0 === e3.strm.avail_out))
              return 1;
          }
          return e3.insert = 0, 4 === t3 ? (as(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.last_lit && (as(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
        }(i2, t2) : 3 === i2.strategy ? function(e3, t3) {
          let r3, i3, n3, a3;
          const s3 = e3.window;
          for (; ; ) {
            if (e3.lookahead <= 258) {
              if (hs(e3), e3.lookahead <= 258 && 0 === t3)
                return 1;
              if (0 === e3.lookahead)
                break;
            }
            if (e3.match_length = 0, e3.lookahead >= 3 && e3.strstart > 0 && (n3 = e3.strstart - 1, i3 = s3[n3], i3 === s3[++n3] && i3 === s3[++n3] && i3 === s3[++n3])) {
              a3 = e3.strstart + 258;
              do {
              } while (i3 === s3[++n3] && i3 === s3[++n3] && i3 === s3[++n3] && i3 === s3[++n3] && i3 === s3[++n3] && i3 === s3[++n3] && i3 === s3[++n3] && i3 === s3[++n3] && n3 < a3);
              e3.match_length = 258 - (a3 - n3), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);
            }
            if (e3.match_length >= 3 ? (r3 = Ya(e3, 1, e3.match_length - 3), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (r3 = Ya(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), r3 && (as(e3, false), 0 === e3.strm.avail_out))
              return 1;
          }
          return e3.insert = 0, 4 === t3 ? (as(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.last_lit && (as(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
        }(i2, t2) : ps[i2.level].func(i2, t2);
        if (3 !== s2 && 4 !== s2 || (i2.status = 666), 1 === s2 || 3 === s2)
          return 0 === e2.avail_out && (i2.last_flush = -1), 0;
        if (2 === s2 && (1 === t2 ? $a(i2) : 5 !== t2 && (Va(i2, 0, 0, false), 3 === t2 && (is(i2.head), 0 === i2.lookahead && (i2.strstart = 0, i2.block_start = 0, i2.insert = 0))), ns(e2), 0 === e2.avail_out))
          return i2.last_flush = -1, 0;
      }
      return 4 !== t2 ? 0 : i2.wrap <= 0 ? 1 : (2 === i2.wrap ? (ss(i2, 255 & e2.adler), ss(i2, e2.adler >> 8 & 255), ss(i2, e2.adler >> 16 & 255), ss(i2, e2.adler >> 24 & 255), ss(i2, 255 & e2.total_in), ss(i2, e2.total_in >> 8 & 255), ss(i2, e2.total_in >> 16 & 255), ss(i2, e2.total_in >> 24 & 255)) : (os(i2, e2.adler >>> 16), os(i2, 65535 & e2.adler)), ns(e2), i2.wrap > 0 && (i2.wrap = -i2.wrap), 0 !== i2.pending ? 0 : 1);
    }
    try {
      String.fromCharCode.call(null, 0);
    } catch (e2) {
    }
    try {
      String.fromCharCode.apply(null, new Uint8Array(1));
    } catch (e2) {
    }
    var gs = new ha(256);
    for (let e2 = 0; e2 < 256; e2++)
      gs[e2] = e2 >= 252 ? 6 : e2 >= 248 ? 5 : e2 >= 240 ? 4 : e2 >= 224 ? 3 : e2 >= 192 ? 2 : 1;
    function ws(e2) {
      let t2, r2, i2, n2, a2 = 0;
      const s2 = e2.length;
      for (i2 = 0; i2 < s2; i2++)
        t2 = e2.charCodeAt(i2), 55296 == (64512 & t2) && i2 + 1 < s2 && (r2 = e2.charCodeAt(i2 + 1), 56320 == (64512 & r2) && (t2 = 65536 + (t2 - 55296 << 10) + (r2 - 56320), i2++)), a2 += t2 < 128 ? 1 : t2 < 2048 ? 2 : t2 < 65536 ? 3 : 4;
      const o2 = new ha(a2);
      for (n2 = 0, i2 = 0; n2 < a2; i2++)
        t2 = e2.charCodeAt(i2), 55296 == (64512 & t2) && i2 + 1 < s2 && (r2 = e2.charCodeAt(i2 + 1), 56320 == (64512 & r2) && (t2 = 65536 + (t2 - 55296 << 10) + (r2 - 56320), i2++)), t2 < 128 ? o2[n2++] = t2 : t2 < 2048 ? (o2[n2++] = 192 | t2 >>> 6, o2[n2++] = 128 | 63 & t2) : t2 < 65536 ? (o2[n2++] = 224 | t2 >>> 12, o2[n2++] = 128 | t2 >>> 6 & 63, o2[n2++] = 128 | 63 & t2) : (o2[n2++] = 240 | t2 >>> 18, o2[n2++] = 128 | t2 >>> 12 & 63, o2[n2++] = 128 | t2 >>> 6 & 63, o2[n2++] = 128 | 63 & t2);
      return o2;
    }
    gs[254] = gs[254] = 1;
    var vs = class {
      constructor() {
        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
      }
    };
    var _s = class {
      constructor(e2) {
        this.options = { level: -1, method: 8, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: 0, ...e2 || {} };
        const t2 = this.options;
        t2.raw && t2.windowBits > 0 ? t2.windowBits = -t2.windowBits : t2.gzip && t2.windowBits > 0 && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new vs(), this.strm.avail_out = 0;
        var r2, i2, n2 = function(e3, t3, r3, i3, n3, a2) {
          if (!e3)
            return -2;
          let s2 = 1;
          if (-1 === t3 && (t3 = 6), i3 < 0 ? (s2 = 0, i3 = -i3) : i3 > 15 && (s2 = 2, i3 -= 16), n3 < 1 || n3 > 9 || 8 !== r3 || i3 < 8 || i3 > 15 || t3 < 0 || t3 > 9 || a2 < 0 || a2 > 4)
            return ts(e3, -2);
          8 === i3 && (i3 = 9);
          const o2 = new ys();
          return e3.state = o2, o2.strm = e3, o2.wrap = s2, o2.gzhead = null, o2.w_bits = i3, o2.w_size = 1 << o2.w_bits, o2.w_mask = o2.w_size - 1, o2.hash_bits = n3 + 7, o2.hash_size = 1 << o2.hash_bits, o2.hash_mask = o2.hash_size - 1, o2.hash_shift = ~~((o2.hash_bits + 3 - 1) / 3), o2.window = new ha(2 * o2.w_size), o2.head = new fa(o2.hash_size), o2.prev = new fa(o2.w_size), o2.lit_bufsize = 1 << n3 + 6, o2.pending_buf_size = 4 * o2.lit_bufsize, o2.pending_buf = new ha(o2.pending_buf_size), o2.d_buf = 1 * o2.lit_bufsize, o2.l_buf = 3 * o2.lit_bufsize, o2.level = t3, o2.strategy = a2, o2.method = r3, bs(e3);
        }(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);
        if (0 !== n2)
          throw Error(es[n2]);
        if (t2.header && (r2 = this.strm, i2 = t2.header, r2 && r2.state && (2 !== r2.state.wrap || (r2.state.gzhead = i2))), t2.dictionary) {
          let e3;
          if (e3 = "string" == typeof t2.dictionary ? ws(t2.dictionary) : t2.dictionary instanceof ArrayBuffer ? new Uint8Array(t2.dictionary) : t2.dictionary, 0 !== (n2 = function(e4, t3) {
            let r3, i3, n3, a2, s2, o2, c2, u2, h2 = t3.length;
            if (!e4 || !e4.state)
              return -2;
            if (r3 = e4.state, a2 = r3.wrap, 2 === a2 || 1 === a2 && 42 !== r3.status || r3.lookahead)
              return -2;
            for (1 === a2 && (e4.adler = Xa(e4.adler, t3, h2, 0)), r3.wrap = 0, h2 >= r3.w_size && (0 === a2 && (is(r3.head), r3.strstart = 0, r3.block_start = 0, r3.insert = 0), u2 = new ha(r3.w_size), pa(u2, t3, h2 - r3.w_size, r3.w_size, 0), t3 = u2, h2 = r3.w_size), s2 = e4.avail_in, o2 = e4.next_in, c2 = e4.input, e4.avail_in = h2, e4.next_in = 0, e4.input = t3, hs(r3); r3.lookahead >= 3; ) {
              i3 = r3.strstart, n3 = r3.lookahead - 2;
              do {
                r3.ins_h = (r3.ins_h << r3.hash_shift ^ r3.window[i3 + 3 - 1]) & r3.hash_mask, r3.prev[i3 & r3.w_mask] = r3.head[r3.ins_h], r3.head[r3.ins_h] = i3, i3++;
              } while (--n3);
              r3.strstart = i3, r3.lookahead = 2, hs(r3);
            }
            return r3.strstart += r3.lookahead, r3.block_start = r3.strstart, r3.insert = r3.lookahead, r3.lookahead = 0, r3.match_length = r3.prev_length = 2, r3.match_available = 0, e4.next_in = o2, e4.input = c2, e4.avail_in = s2, r3.wrap = a2, 0;
          }(this.strm, e3)))
            throw Error(es[n2]);
          this._dict_set = true;
        }
      }
      push(e2, t2) {
        const { strm: r2, options: { chunkSize: i2 } } = this;
        var n2, a2;
        if (this.ended)
          return false;
        a2 = t2 === ~~t2 ? t2 : true === t2 ? 4 : 0, "string" == typeof e2 ? r2.input = ws(e2) : e2 instanceof ArrayBuffer ? r2.input = new Uint8Array(e2) : r2.input = e2, r2.next_in = 0, r2.avail_in = r2.input.length;
        do {
          if (0 === r2.avail_out && (r2.output = new ha(i2), r2.next_out = 0, r2.avail_out = i2), 1 !== (n2 = ms(r2, a2)) && 0 !== n2)
            return this.onEnd(n2), this.ended = true, false;
          0 !== r2.avail_out && (0 !== r2.avail_in || 4 !== a2 && 2 !== a2) || this.onData(oa(r2.output, r2.next_out));
        } while ((r2.avail_in > 0 || 0 === r2.avail_out) && 1 !== n2);
        return 4 === a2 ? (n2 = function(e3) {
          let t3;
          return e3 && e3.state ? (t3 = e3.state.status, 42 !== t3 && 69 !== t3 && 73 !== t3 && 91 !== t3 && 103 !== t3 && 113 !== t3 && 666 !== t3 ? ts(e3, -2) : (e3.state = null, 113 === t3 ? ts(e3, -3) : 0)) : -2;
        }(this.strm), this.onEnd(n2), this.ended = true, 0 === n2) : 2 !== a2 || (this.onEnd(0), r2.avail_out = 0, true);
      }
      onData(e2) {
        this.chunks.push(e2);
      }
      onEnd(e2) {
        0 === e2 && (this.result = la(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
      }
    };
    function ks(e2, t2) {
      let r2, i2, n2, a2, s2, o2, c2, u2, h2, f2;
      const d2 = e2.state;
      r2 = e2.next_in;
      const l2 = e2.input, p2 = r2 + (e2.avail_in - 5);
      i2 = e2.next_out;
      const y2 = e2.output, b2 = i2 - (t2 - e2.avail_out), m2 = i2 + (e2.avail_out - 257), g2 = d2.dmax, w2 = d2.wsize, v2 = d2.whave, _2 = d2.wnext, k2 = d2.window;
      n2 = d2.hold, a2 = d2.bits;
      const A2 = d2.lencode, S2 = d2.distcode, E2 = (1 << d2.lenbits) - 1, P2 = (1 << d2.distbits) - 1;
      e:
        do {
          a2 < 15 && (n2 += l2[r2++] << a2, a2 += 8, n2 += l2[r2++] << a2, a2 += 8), s2 = A2[n2 & E2];
          t:
            for (; ; ) {
              if (o2 = s2 >>> 24, n2 >>>= o2, a2 -= o2, o2 = s2 >>> 16 & 255, 0 === o2)
                y2[i2++] = 65535 & s2;
              else {
                if (!(16 & o2)) {
                  if (0 == (64 & o2)) {
                    s2 = A2[(65535 & s2) + (n2 & (1 << o2) - 1)];
                    continue t;
                  }
                  if (32 & o2) {
                    d2.mode = 12;
                    break e;
                  }
                  e2.msg = "invalid literal/length code", d2.mode = 30;
                  break e;
                }
                c2 = 65535 & s2, o2 &= 15, o2 && (a2 < o2 && (n2 += l2[r2++] << a2, a2 += 8), c2 += n2 & (1 << o2) - 1, n2 >>>= o2, a2 -= o2), a2 < 15 && (n2 += l2[r2++] << a2, a2 += 8, n2 += l2[r2++] << a2, a2 += 8), s2 = S2[n2 & P2];
                r:
                  for (; ; ) {
                    if (o2 = s2 >>> 24, n2 >>>= o2, a2 -= o2, o2 = s2 >>> 16 & 255, !(16 & o2)) {
                      if (0 == (64 & o2)) {
                        s2 = S2[(65535 & s2) + (n2 & (1 << o2) - 1)];
                        continue r;
                      }
                      e2.msg = "invalid distance code", d2.mode = 30;
                      break e;
                    }
                    if (u2 = 65535 & s2, o2 &= 15, a2 < o2 && (n2 += l2[r2++] << a2, a2 += 8, a2 < o2 && (n2 += l2[r2++] << a2, a2 += 8)), u2 += n2 & (1 << o2) - 1, u2 > g2) {
                      e2.msg = "invalid distance too far back", d2.mode = 30;
                      break e;
                    }
                    if (n2 >>>= o2, a2 -= o2, o2 = i2 - b2, u2 > o2) {
                      if (o2 = u2 - o2, o2 > v2 && d2.sane) {
                        e2.msg = "invalid distance too far back", d2.mode = 30;
                        break e;
                      }
                      if (h2 = 0, f2 = k2, 0 === _2) {
                        if (h2 += w2 - o2, o2 < c2) {
                          c2 -= o2;
                          do {
                            y2[i2++] = k2[h2++];
                          } while (--o2);
                          h2 = i2 - u2, f2 = y2;
                        }
                      } else if (_2 < o2) {
                        if (h2 += w2 + _2 - o2, o2 -= _2, o2 < c2) {
                          c2 -= o2;
                          do {
                            y2[i2++] = k2[h2++];
                          } while (--o2);
                          if (h2 = 0, _2 < c2) {
                            o2 = _2, c2 -= o2;
                            do {
                              y2[i2++] = k2[h2++];
                            } while (--o2);
                            h2 = i2 - u2, f2 = y2;
                          }
                        }
                      } else if (h2 += _2 - o2, o2 < c2) {
                        c2 -= o2;
                        do {
                          y2[i2++] = k2[h2++];
                        } while (--o2);
                        h2 = i2 - u2, f2 = y2;
                      }
                      for (; c2 > 2; )
                        y2[i2++] = f2[h2++], y2[i2++] = f2[h2++], y2[i2++] = f2[h2++], c2 -= 3;
                      c2 && (y2[i2++] = f2[h2++], c2 > 1 && (y2[i2++] = f2[h2++]));
                    } else {
                      h2 = i2 - u2;
                      do {
                        y2[i2++] = y2[h2++], y2[i2++] = y2[h2++], y2[i2++] = y2[h2++], c2 -= 3;
                      } while (c2 > 2);
                      c2 && (y2[i2++] = y2[h2++], c2 > 1 && (y2[i2++] = y2[h2++]));
                    }
                    break;
                  }
              }
              break;
            }
        } while (r2 < p2 && i2 < m2);
      c2 = a2 >> 3, r2 -= c2, a2 -= c2 << 3, n2 &= (1 << a2) - 1, e2.next_in = r2, e2.next_out = i2, e2.avail_in = r2 < p2 ? p2 - r2 + 5 : 5 - (r2 - p2), e2.avail_out = i2 < m2 ? m2 - i2 + 257 : 257 - (i2 - m2), d2.hold = n2, d2.bits = a2;
    }
    var As = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
    var Ss = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
    var Es = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
    var Ps = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
    function xs(e2, t2, r2, i2, n2, a2, s2, o2) {
      const c2 = o2.bits;
      let u2, h2, f2, d2, l2, p2 = 0, y2 = 0, b2 = 0, m2 = 0, g2 = 0, w2 = 0, v2 = 0, _2 = 0, k2 = 0, A2 = 0, S2 = null, E2 = 0;
      const P2 = new fa(16), x2 = new fa(16);
      let M2, C2, K2, D2 = null, R2 = 0;
      for (p2 = 0; p2 <= 15; p2++)
        P2[p2] = 0;
      for (y2 = 0; y2 < i2; y2++)
        P2[t2[r2 + y2]]++;
      for (g2 = c2, m2 = 15; m2 >= 1 && 0 === P2[m2]; m2--)
        ;
      if (g2 > m2 && (g2 = m2), 0 === m2)
        return n2[a2++] = 20971520, n2[a2++] = 20971520, o2.bits = 1, 0;
      for (b2 = 1; b2 < m2 && 0 === P2[b2]; b2++)
        ;
      for (g2 < b2 && (g2 = b2), _2 = 1, p2 = 1; p2 <= 15; p2++)
        if (_2 <<= 1, _2 -= P2[p2], _2 < 0)
          return -1;
      if (_2 > 0 && (0 === e2 || 1 !== m2))
        return -1;
      for (x2[1] = 0, p2 = 1; p2 < 15; p2++)
        x2[p2 + 1] = x2[p2] + P2[p2];
      for (y2 = 0; y2 < i2; y2++)
        0 !== t2[r2 + y2] && (s2[x2[t2[r2 + y2]]++] = y2);
      0 === e2 ? (S2 = D2 = s2, l2 = 19) : 1 === e2 ? (S2 = As, E2 -= 257, D2 = Ss, R2 -= 257, l2 = 256) : (S2 = Es, D2 = Ps, l2 = -1), A2 = 0, y2 = 0, p2 = b2, d2 = a2, w2 = g2, v2 = 0, f2 = -1, k2 = 1 << g2;
      const U2 = k2 - 1;
      if (1 === e2 && k2 > 852 || 2 === e2 && k2 > 592)
        return 1;
      for (; ; ) {
        M2 = p2 - v2, s2[y2] < l2 ? (C2 = 0, K2 = s2[y2]) : s2[y2] > l2 ? (C2 = D2[R2 + s2[y2]], K2 = S2[E2 + s2[y2]]) : (C2 = 96, K2 = 0), u2 = 1 << p2 - v2, h2 = 1 << w2, b2 = h2;
        do {
          h2 -= u2, n2[d2 + (A2 >> v2) + h2] = M2 << 24 | C2 << 16 | K2 | 0;
        } while (0 !== h2);
        for (u2 = 1 << p2 - 1; A2 & u2; )
          u2 >>= 1;
        if (0 !== u2 ? (A2 &= u2 - 1, A2 += u2) : A2 = 0, y2++, 0 == --P2[p2]) {
          if (p2 === m2)
            break;
          p2 = t2[r2 + s2[y2]];
        }
        if (p2 > g2 && (A2 & U2) !== f2) {
          for (0 === v2 && (v2 = g2), d2 += b2, w2 = p2 - v2, _2 = 1 << w2; w2 + v2 < m2 && (_2 -= P2[w2 + v2], !(_2 <= 0)); )
            w2++, _2 <<= 1;
          if (k2 += 1 << w2, 1 === e2 && k2 > 852 || 2 === e2 && k2 > 592)
            return 1;
          f2 = A2 & U2, n2[f2] = g2 << 24 | w2 << 16 | d2 - a2 | 0;
        }
      }
      return 0 !== A2 && (n2[d2 + A2] = p2 - v2 << 24 | 64 << 16 | 0), o2.bits = g2, 0;
    }
    function Ms(e2) {
      return (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);
    }
    var Cs = class {
      constructor() {
        this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new fa(320), this.work = new fa(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
      }
    };
    function Ks(e2) {
      let t2;
      return e2 && e2.state ? (t2 = e2.state, t2.wsize = 0, t2.whave = 0, t2.wnext = 0, function(e3) {
        let t3;
        return e3 && e3.state ? (t3 = e3.state, e3.total_in = e3.total_out = t3.total = 0, e3.msg = "", t3.wrap && (e3.adler = 1 & t3.wrap), t3.mode = 1, t3.last = 0, t3.havedict = 0, t3.dmax = 32768, t3.head = null, t3.hold = 0, t3.bits = 0, t3.lencode = t3.lendyn = new da(852), t3.distcode = t3.distdyn = new da(592), t3.sane = 1, t3.back = -1, 0) : -2;
      }(e2)) : -2;
    }
    function Ds(e2, t2) {
      let r2, i2;
      return e2 ? (i2 = new Cs(), e2.state = i2, i2.window = null, r2 = function(e3, t3) {
        let r3, i3;
        return e3 && e3.state ? (i3 = e3.state, t3 < 0 ? (r3 = 0, t3 = -t3) : (r3 = 1 + (t3 >> 4), t3 < 48 && (t3 &= 15)), t3 && (t3 < 8 || t3 > 15) ? -2 : (null !== i3.window && i3.wbits !== t3 && (i3.window = null), i3.wrap = r3, i3.wbits = t3, Ks(e3))) : -2;
      }(e2, t2), 0 !== r2 && (e2.state = null), r2) : -2;
    }
    var Rs;
    var Us;
    var Is = true;
    function Bs(e2) {
      if (Is) {
        let t2;
        for (Rs = new da(512), Us = new da(32), t2 = 0; t2 < 144; )
          e2.lens[t2++] = 8;
        for (; t2 < 256; )
          e2.lens[t2++] = 9;
        for (; t2 < 280; )
          e2.lens[t2++] = 7;
        for (; t2 < 288; )
          e2.lens[t2++] = 8;
        for (xs(1, e2.lens, 0, 288, Rs, 0, e2.work, { bits: 9 }), t2 = 0; t2 < 32; )
          e2.lens[t2++] = 5;
        xs(2, e2.lens, 0, 32, Us, 0, e2.work, { bits: 5 }), Is = false;
      }
      e2.lencode = Rs, e2.lenbits = 9, e2.distcode = Us, e2.distbits = 5;
    }
    function Ts(e2, t2, r2, i2) {
      let n2;
      const a2 = e2.state;
      return null === a2.window && (a2.wsize = 1 << a2.wbits, a2.wnext = 0, a2.whave = 0, a2.window = new ha(a2.wsize)), i2 >= a2.wsize ? (pa(a2.window, t2, r2 - a2.wsize, a2.wsize, 0), a2.wnext = 0, a2.whave = a2.wsize) : (n2 = a2.wsize - a2.wnext, n2 > i2 && (n2 = i2), pa(a2.window, t2, r2 - i2, n2, a2.wnext), (i2 -= n2) ? (pa(a2.window, t2, r2 - i2, i2, 0), a2.wnext = i2, a2.whave = a2.wsize) : (a2.wnext += n2, a2.wnext === a2.wsize && (a2.wnext = 0), a2.whave < a2.wsize && (a2.whave += n2))), 0;
    }
    function zs(e2, t2) {
      let r2, i2, n2, a2, s2, o2, c2, u2, h2, f2, d2, l2, p2, y2, b2, m2, g2, w2, v2, _2, k2, A2, S2, E2, P2 = 0, x2 = new ha(4);
      const M2 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      if (!e2 || !e2.state || !e2.output || !e2.input && 0 !== e2.avail_in)
        return -2;
      r2 = e2.state, 12 === r2.mode && (r2.mode = 13), s2 = e2.next_out, n2 = e2.output, c2 = e2.avail_out, a2 = e2.next_in, i2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, h2 = r2.bits, f2 = o2, d2 = c2, A2 = 0;
      e:
        for (; ; )
          switch (r2.mode) {
            case 1:
              if (0 === r2.wrap) {
                r2.mode = 13;
                break;
              }
              for (; h2 < 16; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              if (2 & r2.wrap && 35615 === u2) {
                r2.check = 0, x2[0] = 255 & u2, x2[1] = u2 >>> 8 & 255, r2.check = Ja(r2.check, x2, 2, 0), u2 = 0, h2 = 0, r2.mode = 2;
                break;
              }
              if (r2.flags = 0, r2.head && (r2.head.done = false), !(1 & r2.wrap) || (((255 & u2) << 8) + (u2 >> 8)) % 31) {
                e2.msg = "incorrect header check", r2.mode = 30;
                break;
              }
              if (8 != (15 & u2)) {
                e2.msg = "unknown compression method", r2.mode = 30;
                break;
              }
              if (u2 >>>= 4, h2 -= 4, k2 = 8 + (15 & u2), 0 === r2.wbits)
                r2.wbits = k2;
              else if (k2 > r2.wbits) {
                e2.msg = "invalid window size", r2.mode = 30;
                break;
              }
              r2.dmax = 1 << k2, e2.adler = r2.check = 1, r2.mode = 512 & u2 ? 10 : 12, u2 = 0, h2 = 0;
              break;
            case 2:
              for (; h2 < 16; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              if (r2.flags = u2, 8 != (255 & r2.flags)) {
                e2.msg = "unknown compression method", r2.mode = 30;
                break;
              }
              if (57344 & r2.flags) {
                e2.msg = "unknown header flags set", r2.mode = 30;
                break;
              }
              r2.head && (r2.head.text = u2 >> 8 & 1), 512 & r2.flags && (x2[0] = 255 & u2, x2[1] = u2 >>> 8 & 255, r2.check = Ja(r2.check, x2, 2, 0)), u2 = 0, h2 = 0, r2.mode = 3;
            case 3:
              for (; h2 < 32; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              r2.head && (r2.head.time = u2), 512 & r2.flags && (x2[0] = 255 & u2, x2[1] = u2 >>> 8 & 255, x2[2] = u2 >>> 16 & 255, x2[3] = u2 >>> 24 & 255, r2.check = Ja(r2.check, x2, 4, 0)), u2 = 0, h2 = 0, r2.mode = 4;
            case 4:
              for (; h2 < 16; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              r2.head && (r2.head.xflags = 255 & u2, r2.head.os = u2 >> 8), 512 & r2.flags && (x2[0] = 255 & u2, x2[1] = u2 >>> 8 & 255, r2.check = Ja(r2.check, x2, 2, 0)), u2 = 0, h2 = 0, r2.mode = 5;
            case 5:
              if (1024 & r2.flags) {
                for (; h2 < 16; ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                r2.length = u2, r2.head && (r2.head.extra_len = u2), 512 & r2.flags && (x2[0] = 255 & u2, x2[1] = u2 >>> 8 & 255, r2.check = Ja(r2.check, x2, 2, 0)), u2 = 0, h2 = 0;
              } else
                r2.head && (r2.head.extra = null);
              r2.mode = 6;
            case 6:
              if (1024 & r2.flags && (l2 = r2.length, l2 > o2 && (l2 = o2), l2 && (r2.head && (k2 = r2.head.extra_len - r2.length, r2.head.extra || (r2.head.extra = Array(r2.head.extra_len)), pa(r2.head.extra, i2, a2, l2, k2)), 512 & r2.flags && (r2.check = Ja(r2.check, i2, l2, a2)), o2 -= l2, a2 += l2, r2.length -= l2), r2.length))
                break e;
              r2.length = 0, r2.mode = 7;
            case 7:
              if (2048 & r2.flags) {
                if (0 === o2)
                  break e;
                l2 = 0;
                do {
                  k2 = i2[a2 + l2++], r2.head && k2 && r2.length < 65536 && (r2.head.name += String.fromCharCode(k2));
                } while (k2 && l2 < o2);
                if (512 & r2.flags && (r2.check = Ja(r2.check, i2, l2, a2)), o2 -= l2, a2 += l2, k2)
                  break e;
              } else
                r2.head && (r2.head.name = null);
              r2.length = 0, r2.mode = 8;
            case 8:
              if (4096 & r2.flags) {
                if (0 === o2)
                  break e;
                l2 = 0;
                do {
                  k2 = i2[a2 + l2++], r2.head && k2 && r2.length < 65536 && (r2.head.comment += String.fromCharCode(k2));
                } while (k2 && l2 < o2);
                if (512 & r2.flags && (r2.check = Ja(r2.check, i2, l2, a2)), o2 -= l2, a2 += l2, k2)
                  break e;
              } else
                r2.head && (r2.head.comment = null);
              r2.mode = 9;
            case 9:
              if (512 & r2.flags) {
                for (; h2 < 16; ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                if (u2 !== (65535 & r2.check)) {
                  e2.msg = "header crc mismatch", r2.mode = 30;
                  break;
                }
                u2 = 0, h2 = 0;
              }
              r2.head && (r2.head.hcrc = r2.flags >> 9 & 1, r2.head.done = true), e2.adler = r2.check = 0, r2.mode = 12;
              break;
            case 10:
              for (; h2 < 32; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              e2.adler = r2.check = Ms(u2), u2 = 0, h2 = 0, r2.mode = 11;
            case 11:
              if (0 === r2.havedict)
                return e2.next_out = s2, e2.avail_out = c2, e2.next_in = a2, e2.avail_in = o2, r2.hold = u2, r2.bits = h2, 2;
              e2.adler = r2.check = 1, r2.mode = 12;
            case 12:
              if (5 === t2 || 6 === t2)
                break e;
            case 13:
              if (r2.last) {
                u2 >>>= 7 & h2, h2 -= 7 & h2, r2.mode = 27;
                break;
              }
              for (; h2 < 3; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              switch (r2.last = 1 & u2, u2 >>>= 1, h2 -= 1, 3 & u2) {
                case 0:
                  r2.mode = 14;
                  break;
                case 1:
                  if (Bs(r2), r2.mode = 20, 6 === t2) {
                    u2 >>>= 2, h2 -= 2;
                    break e;
                  }
                  break;
                case 2:
                  r2.mode = 17;
                  break;
                case 3:
                  e2.msg = "invalid block type", r2.mode = 30;
              }
              u2 >>>= 2, h2 -= 2;
              break;
            case 14:
              for (u2 >>>= 7 & h2, h2 -= 7 & h2; h2 < 32; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              if ((65535 & u2) != (u2 >>> 16 ^ 65535)) {
                e2.msg = "invalid stored block lengths", r2.mode = 30;
                break;
              }
              if (r2.length = 65535 & u2, u2 = 0, h2 = 0, r2.mode = 15, 6 === t2)
                break e;
            case 15:
              r2.mode = 16;
            case 16:
              if (l2 = r2.length, l2) {
                if (l2 > o2 && (l2 = o2), l2 > c2 && (l2 = c2), 0 === l2)
                  break e;
                pa(n2, i2, a2, l2, s2), o2 -= l2, a2 += l2, c2 -= l2, s2 += l2, r2.length -= l2;
                break;
              }
              r2.mode = 12;
              break;
            case 17:
              for (; h2 < 14; ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              if (r2.nlen = 257 + (31 & u2), u2 >>>= 5, h2 -= 5, r2.ndist = 1 + (31 & u2), u2 >>>= 5, h2 -= 5, r2.ncode = 4 + (15 & u2), u2 >>>= 4, h2 -= 4, r2.nlen > 286 || r2.ndist > 30) {
                e2.msg = "too many length or distance symbols", r2.mode = 30;
                break;
              }
              r2.have = 0, r2.mode = 18;
            case 18:
              for (; r2.have < r2.ncode; ) {
                for (; h2 < 3; ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                r2.lens[M2[r2.have++]] = 7 & u2, u2 >>>= 3, h2 -= 3;
              }
              for (; r2.have < 19; )
                r2.lens[M2[r2.have++]] = 0;
              if (r2.lencode = r2.lendyn, r2.lenbits = 7, S2 = { bits: r2.lenbits }, A2 = xs(0, r2.lens, 0, 19, r2.lencode, 0, r2.work, S2), r2.lenbits = S2.bits, A2) {
                e2.msg = "invalid code lengths set", r2.mode = 30;
                break;
              }
              r2.have = 0, r2.mode = 19;
            case 19:
              for (; r2.have < r2.nlen + r2.ndist; ) {
                for (; P2 = r2.lencode[u2 & (1 << r2.lenbits) - 1], b2 = P2 >>> 24, m2 = P2 >>> 16 & 255, g2 = 65535 & P2, !(b2 <= h2); ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                if (g2 < 16)
                  u2 >>>= b2, h2 -= b2, r2.lens[r2.have++] = g2;
                else {
                  if (16 === g2) {
                    for (E2 = b2 + 2; h2 < E2; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += i2[a2++] << h2, h2 += 8;
                    }
                    if (u2 >>>= b2, h2 -= b2, 0 === r2.have) {
                      e2.msg = "invalid bit length repeat", r2.mode = 30;
                      break;
                    }
                    k2 = r2.lens[r2.have - 1], l2 = 3 + (3 & u2), u2 >>>= 2, h2 -= 2;
                  } else if (17 === g2) {
                    for (E2 = b2 + 3; h2 < E2; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += i2[a2++] << h2, h2 += 8;
                    }
                    u2 >>>= b2, h2 -= b2, k2 = 0, l2 = 3 + (7 & u2), u2 >>>= 3, h2 -= 3;
                  } else {
                    for (E2 = b2 + 7; h2 < E2; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += i2[a2++] << h2, h2 += 8;
                    }
                    u2 >>>= b2, h2 -= b2, k2 = 0, l2 = 11 + (127 & u2), u2 >>>= 7, h2 -= 7;
                  }
                  if (r2.have + l2 > r2.nlen + r2.ndist) {
                    e2.msg = "invalid bit length repeat", r2.mode = 30;
                    break;
                  }
                  for (; l2--; )
                    r2.lens[r2.have++] = k2;
                }
              }
              if (30 === r2.mode)
                break;
              if (0 === r2.lens[256]) {
                e2.msg = "invalid code -- missing end-of-block", r2.mode = 30;
                break;
              }
              if (r2.lenbits = 9, S2 = { bits: r2.lenbits }, A2 = xs(1, r2.lens, 0, r2.nlen, r2.lencode, 0, r2.work, S2), r2.lenbits = S2.bits, A2) {
                e2.msg = "invalid literal/lengths set", r2.mode = 30;
                break;
              }
              if (r2.distbits = 6, r2.distcode = r2.distdyn, S2 = { bits: r2.distbits }, A2 = xs(2, r2.lens, r2.nlen, r2.ndist, r2.distcode, 0, r2.work, S2), r2.distbits = S2.bits, A2) {
                e2.msg = "invalid distances set", r2.mode = 30;
                break;
              }
              if (r2.mode = 20, 6 === t2)
                break e;
            case 20:
              r2.mode = 21;
            case 21:
              if (o2 >= 6 && c2 >= 258) {
                e2.next_out = s2, e2.avail_out = c2, e2.next_in = a2, e2.avail_in = o2, r2.hold = u2, r2.bits = h2, ks(e2, d2), s2 = e2.next_out, n2 = e2.output, c2 = e2.avail_out, a2 = e2.next_in, i2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, h2 = r2.bits, 12 === r2.mode && (r2.back = -1);
                break;
              }
              for (r2.back = 0; P2 = r2.lencode[u2 & (1 << r2.lenbits) - 1], b2 = P2 >>> 24, m2 = P2 >>> 16 & 255, g2 = 65535 & P2, !(b2 <= h2); ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              if (m2 && 0 == (240 & m2)) {
                for (w2 = b2, v2 = m2, _2 = g2; P2 = r2.lencode[_2 + ((u2 & (1 << w2 + v2) - 1) >> w2)], b2 = P2 >>> 24, m2 = P2 >>> 16 & 255, g2 = 65535 & P2, !(w2 + b2 <= h2); ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                u2 >>>= w2, h2 -= w2, r2.back += w2;
              }
              if (u2 >>>= b2, h2 -= b2, r2.back += b2, r2.length = g2, 0 === m2) {
                r2.mode = 26;
                break;
              }
              if (32 & m2) {
                r2.back = -1, r2.mode = 12;
                break;
              }
              if (64 & m2) {
                e2.msg = "invalid literal/length code", r2.mode = 30;
                break;
              }
              r2.extra = 15 & m2, r2.mode = 22;
            case 22:
              if (r2.extra) {
                for (E2 = r2.extra; h2 < E2; ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                r2.length += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, h2 -= r2.extra, r2.back += r2.extra;
              }
              r2.was = r2.length, r2.mode = 23;
            case 23:
              for (; P2 = r2.distcode[u2 & (1 << r2.distbits) - 1], b2 = P2 >>> 24, m2 = P2 >>> 16 & 255, g2 = 65535 & P2, !(b2 <= h2); ) {
                if (0 === o2)
                  break e;
                o2--, u2 += i2[a2++] << h2, h2 += 8;
              }
              if (0 == (240 & m2)) {
                for (w2 = b2, v2 = m2, _2 = g2; P2 = r2.distcode[_2 + ((u2 & (1 << w2 + v2) - 1) >> w2)], b2 = P2 >>> 24, m2 = P2 >>> 16 & 255, g2 = 65535 & P2, !(w2 + b2 <= h2); ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                u2 >>>= w2, h2 -= w2, r2.back += w2;
              }
              if (u2 >>>= b2, h2 -= b2, r2.back += b2, 64 & m2) {
                e2.msg = "invalid distance code", r2.mode = 30;
                break;
              }
              r2.offset = g2, r2.extra = 15 & m2, r2.mode = 24;
            case 24:
              if (r2.extra) {
                for (E2 = r2.extra; h2 < E2; ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                r2.offset += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, h2 -= r2.extra, r2.back += r2.extra;
              }
              if (r2.offset > r2.dmax) {
                e2.msg = "invalid distance too far back", r2.mode = 30;
                break;
              }
              r2.mode = 25;
            case 25:
              if (0 === c2)
                break e;
              if (l2 = d2 - c2, r2.offset > l2) {
                if (l2 = r2.offset - l2, l2 > r2.whave && r2.sane) {
                  e2.msg = "invalid distance too far back", r2.mode = 30;
                  break;
                }
                l2 > r2.wnext ? (l2 -= r2.wnext, p2 = r2.wsize - l2) : p2 = r2.wnext - l2, l2 > r2.length && (l2 = r2.length), y2 = r2.window;
              } else
                y2 = n2, p2 = s2 - r2.offset, l2 = r2.length;
              l2 > c2 && (l2 = c2), c2 -= l2, r2.length -= l2;
              do {
                n2[s2++] = y2[p2++];
              } while (--l2);
              0 === r2.length && (r2.mode = 21);
              break;
            case 26:
              if (0 === c2)
                break e;
              n2[s2++] = r2.length, c2--, r2.mode = 21;
              break;
            case 27:
              if (r2.wrap) {
                for (; h2 < 32; ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 |= i2[a2++] << h2, h2 += 8;
                }
                if (d2 -= c2, e2.total_out += d2, r2.total += d2, d2 && (e2.adler = r2.check = r2.flags ? Ja(r2.check, n2, d2, s2 - d2) : Xa(r2.check, n2, d2, s2 - d2)), d2 = c2, (r2.flags ? u2 : Ms(u2)) !== r2.check) {
                  e2.msg = "incorrect data check", r2.mode = 30;
                  break;
                }
                u2 = 0, h2 = 0;
              }
              r2.mode = 28;
            case 28:
              if (r2.wrap && r2.flags) {
                for (; h2 < 32; ) {
                  if (0 === o2)
                    break e;
                  o2--, u2 += i2[a2++] << h2, h2 += 8;
                }
                if (u2 !== (4294967295 & r2.total)) {
                  e2.msg = "incorrect length check", r2.mode = 30;
                  break;
                }
                u2 = 0, h2 = 0;
              }
              r2.mode = 29;
            case 29:
              A2 = 1;
              break e;
            case 30:
              A2 = -3;
              break e;
            case 32:
            default:
              return -2;
          }
      return e2.next_out = s2, e2.avail_out = c2, e2.next_in = a2, e2.avail_in = o2, r2.hold = u2, r2.bits = h2, (r2.wsize || d2 !== e2.avail_out && r2.mode < 30 && (r2.mode < 27 || 4 !== t2)) && Ts(e2, e2.output, e2.next_out, d2 - e2.avail_out), f2 -= e2.avail_in, d2 -= e2.avail_out, e2.total_in += f2, e2.total_out += d2, r2.total += d2, r2.wrap && d2 && (e2.adler = r2.check = r2.flags ? Ja(r2.check, n2, d2, e2.next_out - d2) : Xa(r2.check, n2, d2, e2.next_out - d2)), e2.data_type = r2.bits + (r2.last ? 64 : 0) + (12 === r2.mode ? 128 : 0) + (20 === r2.mode || 15 === r2.mode ? 256 : 0), (0 === f2 && 0 === d2 || 4 === t2) && 0 === A2 && (A2 = -5), A2;
    }
    function qs(e2, t2) {
      const r2 = t2.length;
      let i2, n2;
      return e2 && e2.state ? (i2 = e2.state, 0 !== i2.wrap && 11 !== i2.mode ? -2 : 11 === i2.mode && (n2 = 1, n2 = Xa(n2, t2, r2, 0), n2 !== i2.check) ? -3 : (Ts(e2, t2, r2, r2), i2.havedict = 1, 0)) : -2;
    }
    var Os = class {
      constructor() {
        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
      }
    };
    var Fs = class {
      constructor(e2) {
        this.options = { chunkSize: 16384, windowBits: 0, ...e2 || {} };
        const t2 = this.options;
        t2.raw && t2.windowBits >= 0 && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(t2.windowBits >= 0 && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), t2.windowBits > 15 && t2.windowBits < 48 && 0 == (15 & t2.windowBits) && (t2.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new vs(), this.strm.avail_out = 0;
        let r2 = Ds(this.strm, t2.windowBits);
        if (0 !== r2)
          throw Error(es[r2]);
        if (this.header = new Os(), function(e3, t3) {
          let r3;
          e3 && e3.state && (r3 = e3.state, 0 == (2 & r3.wrap) || (r3.head = t3, t3.done = false));
        }(this.strm, this.header), t2.dictionary && ("string" == typeof t2.dictionary ? t2.dictionary = ws(t2.dictionary) : t2.dictionary instanceof ArrayBuffer && (t2.dictionary = new Uint8Array(t2.dictionary)), t2.raw && (r2 = qs(this.strm, t2.dictionary), 0 !== r2)))
          throw Error(es[r2]);
      }
      push(e2, t2) {
        const { strm: r2, options: { chunkSize: i2, dictionary: n2 } } = this;
        let a2, s2, o2 = false;
        if (this.ended)
          return false;
        s2 = t2 === ~~t2 ? t2 : true === t2 ? 4 : 0, "string" == typeof e2 ? r2.input = function(e3) {
          const t3 = new ha(e3.length);
          for (let r3 = 0, i3 = t3.length; r3 < i3; r3++)
            t3[r3] = e3.charCodeAt(r3);
          return t3;
        }(e2) : e2 instanceof ArrayBuffer ? r2.input = new Uint8Array(e2) : r2.input = e2, r2.next_in = 0, r2.avail_in = r2.input.length;
        do {
          if (0 === r2.avail_out && (r2.output = new ha(i2), r2.next_out = 0, r2.avail_out = i2), a2 = zs(r2, 0), 2 === a2 && n2 && (a2 = qs(this.strm, n2)), -5 === a2 && true === o2 && (a2 = 0, o2 = false), 1 !== a2 && 0 !== a2)
            return this.onEnd(a2), this.ended = true, false;
          r2.next_out && (0 !== r2.avail_out && 1 !== a2 && (0 !== r2.avail_in || 4 !== s2 && 2 !== s2) || this.onData(oa(r2.output, r2.next_out))), 0 === r2.avail_in && 0 === r2.avail_out && (o2 = true);
        } while ((r2.avail_in > 0 || 0 === r2.avail_out) && 1 !== a2);
        return 1 === a2 && (s2 = 4), 4 === s2 ? (a2 = function(e3) {
          if (!e3 || !e3.state)
            return -2;
          const t3 = e3.state;
          return t3.window && (t3.window = null), e3.state = null, 0;
        }(this.strm), this.onEnd(a2), this.ended = true, 0 === a2) : 2 !== s2 || (this.onEnd(0), r2.avail_out = 0, true);
      }
      onData(e2) {
        this.chunks.push(e2);
      }
      onEnd(e2) {
        0 === e2 && (this.result = la(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
      }
    };
    var Ns = [0, 1, 3, 7, 15, 31, 63, 127, 255];
    var js = function(e2) {
      this.stream = e2, this.bitOffset = 0, this.curByte = 0, this.hasByte = false;
    };
    js.prototype._ensureByte = function() {
      this.hasByte || (this.curByte = this.stream.readByte(), this.hasByte = true);
    }, js.prototype.read = function(e2) {
      for (var t2 = 0; e2 > 0; ) {
        this._ensureByte();
        var r2 = 8 - this.bitOffset;
        if (e2 >= r2)
          t2 <<= r2, t2 |= Ns[r2] & this.curByte, this.hasByte = false, this.bitOffset = 0, e2 -= r2;
        else {
          t2 <<= e2;
          var i2 = r2 - e2;
          t2 |= (this.curByte & Ns[e2] << i2) >> i2, this.bitOffset += e2, e2 = 0;
        }
      }
      return t2;
    }, js.prototype.seek = function(e2) {
      var t2 = e2 % 8, r2 = (e2 - t2) / 8;
      this.bitOffset = t2, this.stream.seek(r2), this.hasByte = false;
    }, js.prototype.pi = function() {
      var e2, t2 = new Uint8Array(6);
      for (e2 = 0; e2 < t2.length; e2++)
        t2[e2] = this.read(8);
      return function(e3) {
        return Array.prototype.map.call(e3, (e4) => ("00" + e4.toString(16)).slice(-2)).join("");
      }(t2);
    };
    var Ls = js;
    var Ws = function() {
    };
    Ws.prototype.readByte = function() {
      throw Error("abstract method readByte() not implemented");
    }, Ws.prototype.read = function(e2, t2, r2) {
      for (var i2 = 0; i2 < r2; ) {
        var n2 = this.readByte();
        if (n2 < 0)
          return 0 === i2 ? -1 : i2;
        e2[t2++] = n2, i2++;
      }
      return i2;
    }, Ws.prototype.seek = function(e2) {
      throw Error("abstract method seek() not implemented");
    }, Ws.prototype.writeByte = function(e2) {
      throw Error("abstract method readByte() not implemented");
    }, Ws.prototype.write = function(e2, t2, r2) {
      var i2;
      for (i2 = 0; i2 < r2; i2++)
        this.writeByte(e2[t2++]);
      return r2;
    }, Ws.prototype.flush = function() {
    };
    var Hs;
    var Gs = Ws;
    var Vs = (Hs = new Uint32Array([0, 79764919, 159529838, 222504665, 319059676, 398814059, 445009330, 507990021, 638119352, 583659535, 797628118, 726387553, 890018660, 835552979, 1015980042, 944750013, 1276238704, 1221641927, 1167319070, 1095957929, 1595256236, 1540665371, 1452775106, 1381403509, 1780037320, 1859660671, 1671105958, 1733955601, 2031960084, 2111593891, 1889500026, 1952343757, 2552477408, 2632100695, 2443283854, 2506133561, 2334638140, 2414271883, 2191915858, 2254759653, 3190512472, 3135915759, 3081330742, 3009969537, 2905550212, 2850959411, 2762807018, 2691435357, 3560074640, 3505614887, 3719321342, 3648080713, 3342211916, 3287746299, 3467911202, 3396681109, 4063920168, 4143685023, 4223187782, 4286162673, 3779000052, 3858754371, 3904687514, 3967668269, 881225847, 809987520, 1023691545, 969234094, 662832811, 591600412, 771767749, 717299826, 311336399, 374308984, 453813921, 533576470, 25881363, 88864420, 134795389, 214552010, 2023205639, 2086057648, 1897238633, 1976864222, 1804852699, 1867694188, 1645340341, 1724971778, 1587496639, 1516133128, 1461550545, 1406951526, 1302016099, 1230646740, 1142491917, 1087903418, 2896545431, 2825181984, 2770861561, 2716262478, 3215044683, 3143675388, 3055782693, 3001194130, 2326604591, 2389456536, 2200899649, 2280525302, 2578013683, 2640855108, 2418763421, 2498394922, 3769900519, 3832873040, 3912640137, 3992402750, 4088425275, 4151408268, 4197601365, 4277358050, 3334271071, 3263032808, 3476998961, 3422541446, 3585640067, 3514407732, 3694837229, 3640369242, 1762451694, 1842216281, 1619975040, 1682949687, 2047383090, 2127137669, 1938468188, 2001449195, 1325665622, 1271206113, 1183200824, 1111960463, 1543535498, 1489069629, 1434599652, 1363369299, 622672798, 568075817, 748617968, 677256519, 907627842, 853037301, 1067152940, 995781531, 51762726, 131386257, 177728840, 240578815, 269590778, 349224269, 429104020, 491947555, 4046411278, 4126034873, 4172115296, 4234965207, 3794477266, 3874110821, 3953728444, 4016571915, 3609705398, 3555108353, 3735388376, 3664026991, 3290680682, 3236090077, 3449943556, 3378572211, 3174993278, 3120533705, 3032266256, 2961025959, 2923101090, 2868635157, 2813903052, 2742672763, 2604032198, 2683796849, 2461293480, 2524268063, 2284983834, 2364738477, 2175806836, 2238787779, 1569362073, 1498123566, 1409854455, 1355396672, 1317987909, 1246755826, 1192025387, 1137557660, 2072149281, 2135122070, 1912620623, 1992383480, 1753615357, 1816598090, 1627664531, 1707420964, 295390185, 358241886, 404320391, 483945776, 43990325, 106832002, 186451547, 266083308, 932423249, 861060070, 1041341759, 986742920, 613929101, 542559546, 756411363, 701822548, 3316196985, 3244833742, 3425377559, 3370778784, 3601682597, 3530312978, 3744426955, 3689838204, 3819031489, 3881883254, 3928223919, 4007849240, 4037393693, 4100235434, 4180117107, 4259748804, 2310601993, 2373574846, 2151335527, 2231098320, 2596047829, 2659030626, 2470359227, 2550115596, 2947551409, 2876312838, 2788305887, 2733848168, 3165939309, 3094707162, 3040238851, 2985771188]), function() {
      var e2 = 4294967295;
      this.getCRC = function() {
        return ~e2 >>> 0;
      }, this.updateCRC = function(t2) {
        e2 = e2 << 8 ^ Hs[255 & (e2 >>> 24 ^ t2)];
      }, this.updateCRCRun = function(t2, r2) {
        for (; r2-- > 0; )
          e2 = e2 << 8 ^ Hs[255 & (e2 >>> 24 ^ t2)];
      };
    });
    var $s = function(e2, t2) {
      var r2, i2 = e2[t2];
      for (r2 = t2; r2 > 0; r2--)
        e2[r2] = e2[r2 - 1];
      return e2[0] = i2, i2;
    };
    var Zs = { OK: 0, LAST_BLOCK: -1, NOT_BZIP_DATA: -2, UNEXPECTED_INPUT_EOF: -3, UNEXPECTED_OUTPUT_EOF: -4, DATA_ERROR: -5, OUT_OF_MEMORY: -6, OBSOLETE_INPUT: -7, END_OF_BLOCK: -8 };
    var Ys = {};
    Ys[Zs.LAST_BLOCK] = "Bad file checksum", Ys[Zs.NOT_BZIP_DATA] = "Not bzip data", Ys[Zs.UNEXPECTED_INPUT_EOF] = "Unexpected input EOF", Ys[Zs.UNEXPECTED_OUTPUT_EOF] = "Unexpected output EOF", Ys[Zs.DATA_ERROR] = "Data error", Ys[Zs.OUT_OF_MEMORY] = "Out of memory", Ys[Zs.OBSOLETE_INPUT] = "Obsolete (pre 0.9.5) bzip format not supported.";
    var Xs = function(e2, t2) {
      var r2 = Ys[e2] || "unknown error";
      t2 && (r2 += ": " + t2);
      var i2 = new TypeError(r2);
      throw i2.errorCode = e2, i2;
    };
    var Qs = function(e2, t2) {
      this.writePos = this.writeCurrent = this.writeCount = 0, this._start_bunzip(e2, t2);
    };
    Qs.prototype._init_block = function() {
      return this._get_next_block() ? (this.blockCRC = new Vs(), true) : (this.writeCount = -1, false);
    }, Qs.prototype._start_bunzip = function(e2, t2) {
      var r2 = new Uint8Array(4);
      4 === e2.read(r2, 0, 4) && "BZh" === String.fromCharCode(r2[0], r2[1], r2[2]) || Xs(Zs.NOT_BZIP_DATA, "bad magic");
      var i2 = r2[3] - 48;
      (i2 < 1 || i2 > 9) && Xs(Zs.NOT_BZIP_DATA, "level out of range"), this.reader = new Ls(e2), this.dbufSize = 1e5 * i2, this.nextoutput = 0, this.outputStream = t2, this.streamCRC = 0;
    }, Qs.prototype._get_next_block = function() {
      var e2, t2, r2, i2 = this.reader, n2 = i2.pi();
      if ("177245385090" === n2)
        return false;
      "314159265359" !== n2 && Xs(Zs.NOT_BZIP_DATA), this.targetBlockCRC = i2.read(32) >>> 0, this.streamCRC = (this.targetBlockCRC ^ (this.streamCRC << 1 | this.streamCRC >>> 31)) >>> 0, i2.read(1) && Xs(Zs.OBSOLETE_INPUT);
      var a2 = i2.read(24);
      a2 > this.dbufSize && Xs(Zs.DATA_ERROR, "initial position out of bounds");
      var s2 = i2.read(16), o2 = new Uint8Array(256), c2 = 0;
      for (e2 = 0; e2 < 16; e2++)
        if (s2 & 1 << 15 - e2) {
          var u2 = 16 * e2;
          for (r2 = i2.read(16), t2 = 0; t2 < 16; t2++)
            r2 & 1 << 15 - t2 && (o2[c2++] = u2 + t2);
        }
      var h2 = i2.read(3);
      (h2 < 2 || h2 > 6) && Xs(Zs.DATA_ERROR);
      var f2 = i2.read(15);
      0 === f2 && Xs(Zs.DATA_ERROR);
      var d2 = new Uint8Array(256);
      for (e2 = 0; e2 < h2; e2++)
        d2[e2] = e2;
      var l2 = new Uint8Array(f2);
      for (e2 = 0; e2 < f2; e2++) {
        for (t2 = 0; i2.read(1); t2++)
          t2 >= h2 && Xs(Zs.DATA_ERROR);
        l2[e2] = $s(d2, t2);
      }
      var p2, y2 = c2 + 2, b2 = [];
      for (t2 = 0; t2 < h2; t2++) {
        var m2, g2, w2 = new Uint8Array(y2), v2 = new Uint16Array(21);
        for (s2 = i2.read(5), e2 = 0; e2 < y2; e2++) {
          for (; (s2 < 1 || s2 > 20) && Xs(Zs.DATA_ERROR), i2.read(1); )
            i2.read(1) ? s2-- : s2++;
          w2[e2] = s2;
        }
        for (m2 = g2 = w2[0], e2 = 1; e2 < y2; e2++)
          w2[e2] > g2 ? g2 = w2[e2] : w2[e2] < m2 && (m2 = w2[e2]);
        p2 = {}, b2.push(p2), p2.permute = new Uint16Array(258), p2.limit = new Uint32Array(22), p2.base = new Uint32Array(21), p2.minLen = m2, p2.maxLen = g2;
        var _2 = 0;
        for (e2 = m2; e2 <= g2; e2++)
          for (v2[e2] = p2.limit[e2] = 0, s2 = 0; s2 < y2; s2++)
            w2[s2] === e2 && (p2.permute[_2++] = s2);
        for (e2 = 0; e2 < y2; e2++)
          v2[w2[e2]]++;
        for (_2 = s2 = 0, e2 = m2; e2 < g2; e2++)
          _2 += v2[e2], p2.limit[e2] = _2 - 1, _2 <<= 1, s2 += v2[e2], p2.base[e2 + 1] = _2 - s2;
        p2.limit[g2 + 1] = Number.MAX_VALUE, p2.limit[g2] = _2 + v2[g2] - 1, p2.base[m2] = 0;
      }
      var k2 = new Uint32Array(256);
      for (e2 = 0; e2 < 256; e2++)
        d2[e2] = e2;
      var A2, S2 = 0, E2 = 0, P2 = 0, x2 = this.dbuf = new Uint32Array(this.dbufSize);
      for (y2 = 0; ; ) {
        for (y2-- || (y2 = 49, P2 >= f2 && Xs(Zs.DATA_ERROR), p2 = b2[l2[P2++]]), e2 = p2.minLen, t2 = i2.read(e2); e2 > p2.maxLen && Xs(Zs.DATA_ERROR), !(t2 <= p2.limit[e2]); e2++)
          t2 = t2 << 1 | i2.read(1);
        ((t2 -= p2.base[e2]) < 0 || t2 >= 258) && Xs(Zs.DATA_ERROR);
        var M2 = p2.permute[t2];
        if (0 !== M2 && 1 !== M2) {
          if (S2)
            for (S2 = 0, E2 + s2 > this.dbufSize && Xs(Zs.DATA_ERROR), k2[A2 = o2[d2[0]]] += s2; s2--; )
              x2[E2++] = A2;
          if (M2 > c2)
            break;
          E2 >= this.dbufSize && Xs(Zs.DATA_ERROR), k2[A2 = o2[A2 = $s(d2, e2 = M2 - 1)]]++, x2[E2++] = A2;
        } else
          S2 || (S2 = 1, s2 = 0), s2 += 0 === M2 ? S2 : 2 * S2, S2 <<= 1;
      }
      for ((a2 < 0 || a2 >= E2) && Xs(Zs.DATA_ERROR), t2 = 0, e2 = 0; e2 < 256; e2++)
        r2 = t2 + k2[e2], k2[e2] = t2, t2 = r2;
      for (e2 = 0; e2 < E2; e2++)
        x2[k2[A2 = 255 & x2[e2]]] |= e2 << 8, k2[A2]++;
      var C2 = 0, K2 = 0, D2 = 0;
      return E2 && (K2 = 255 & (C2 = x2[a2]), C2 >>= 8, D2 = -1), this.writePos = C2, this.writeCurrent = K2, this.writeCount = E2, this.writeRun = D2, true;
    }, Qs.prototype._read_bunzip = function(e2, t2) {
      var r2, i2, n2;
      if (this.writeCount < 0)
        return 0;
      var a2 = this.dbuf, s2 = this.writePos, o2 = this.writeCurrent, c2 = this.writeCount;
      this.outputsize;
      for (var u2 = this.writeRun; c2; ) {
        for (c2--, i2 = o2, o2 = 255 & (s2 = a2[s2]), s2 >>= 8, 3 == u2++ ? (r2 = o2, n2 = i2, o2 = -1) : (r2 = 1, n2 = o2), this.blockCRC.updateCRCRun(n2, r2); r2--; )
          this.outputStream.writeByte(n2), this.nextoutput++;
        o2 != i2 && (u2 = 0);
      }
      return this.writeCount = c2, this.blockCRC.getCRC() !== this.targetBlockCRC && Xs(Zs.DATA_ERROR, "Bad block CRC (got " + this.blockCRC.getCRC().toString(16) + " expected " + this.targetBlockCRC.toString(16) + ")"), this.nextoutput;
    };
    var Js = function(e2) {
      if ("readByte" in e2)
        return e2;
      var t2 = new Gs();
      return t2.pos = 0, t2.readByte = function() {
        return e2[this.pos++];
      }, t2.seek = function(e3) {
        this.pos = e3;
      }, t2.eof = function() {
        return this.pos >= e2.length;
      }, t2;
    };
    var eo = function(e2) {
      var t2 = new Gs(), r2 = true;
      if (e2)
        if ("number" == typeof e2)
          t2.buffer = new Uint8Array(e2), r2 = false;
        else {
          if ("writeByte" in e2)
            return e2;
          t2.buffer = e2, r2 = false;
        }
      else
        t2.buffer = new Uint8Array(16384);
      return t2.pos = 0, t2.writeByte = function(e3) {
        if (r2 && this.pos >= this.buffer.length) {
          var t3 = new Uint8Array(2 * this.buffer.length);
          t3.set(this.buffer), this.buffer = t3;
        }
        this.buffer[this.pos++] = e3;
      }, t2.getBuffer = function() {
        if (this.pos !== this.buffer.length) {
          if (!r2)
            throw new TypeError("outputsize does not match decoded input");
          var e3 = new Uint8Array(this.pos);
          e3.set(this.buffer.subarray(0, this.pos)), this.buffer = e3;
        }
        return this.buffer;
      }, t2._coerced = true, t2;
    };
    var to = function(e2, t2, r2) {
      for (var i2 = Js(e2), n2 = eo(t2), a2 = new Qs(i2, n2); !("eof" in i2) || !i2.eof(); )
        if (a2._init_block())
          a2._read_bunzip();
        else {
          var s2 = a2.reader.read(32) >>> 0;
          if (s2 !== a2.streamCRC && Xs(Zs.DATA_ERROR, "Bad stream CRC (got " + a2.streamCRC.toString(16) + " expected " + s2.toString(16) + ")"), !r2 || !("eof" in i2) || i2.eof())
            break;
          a2._start_bunzip(i2, n2);
        }
      if ("getBuffer" in n2)
        return n2.getBuffer();
    };
    var ro = class {
      static get tag() {
        return me.packet.literalData;
      }
      constructor(e2 = new Date()) {
        this.format = me.literal.utf8, this.date = ce.normalizeDate(e2), this.text = null, this.data = null, this.filename = "";
      }
      setText(e2, t2 = me.literal.utf8) {
        this.format = t2, this.text = e2, this.data = null;
      }
      getText(e2 = false) {
        return (null === this.text || ce.isStream(this.text)) && (this.text = ce.decodeUTF8(ce.nativeEOL(this.getBytes(e2)))), this.text;
      }
      setBytes(e2, t2) {
        this.format = t2, this.data = e2, this.text = null;
      }
      getBytes(e2 = false) {
        return null === this.data && (this.data = ce.canonicalizeEOL(ce.encodeUTF8(this.text))), e2 ? ee(this.data) : this.data;
      }
      setFilename(e2) {
        this.filename = e2;
      }
      getFilename() {
        return this.filename;
      }
      async read(e2) {
        await Q(e2, async (e3) => {
          const t2 = await e3.readByte(), r2 = await e3.readByte();
          this.filename = ce.decodeUTF8(await e3.readBytes(r2)), this.date = ce.readDate(await e3.readBytes(4));
          let i2 = e3.remainder();
          _(i2) && (i2 = await ie(i2)), this.setBytes(i2, t2);
        });
      }
      writeHeader() {
        const e2 = ce.encodeUTF8(this.filename), t2 = new Uint8Array([e2.length]), r2 = new Uint8Array([this.format]), i2 = ce.writeDate(this.date);
        return ce.concatUint8Array([r2, t2, e2, i2]);
      }
      write() {
        const e2 = this.writeHeader(), t2 = this.getBytes();
        return ce.concat([e2, t2]);
      }
    };
    var io = Symbol("verified");
    var no = /* @__PURE__ */ new Set([me.signatureSubpacket.issuer, me.signatureSubpacket.issuerFingerprint, me.signatureSubpacket.embeddedSignature]);
    var ao = class {
      static get tag() {
        return me.packet.signature;
      }
      constructor() {
        this.version = null, this.signatureType = null, this.hashAlgorithm = null, this.publicKeyAlgorithm = null, this.signatureData = null, this.unhashedSubpackets = [], this.signedHashValue = null, this.created = null, this.signatureExpirationTime = null, this.signatureNeverExpires = true, this.exportable = null, this.trustLevel = null, this.trustAmount = null, this.regularExpression = null, this.revocable = null, this.keyExpirationTime = null, this.keyNeverExpires = null, this.preferredSymmetricAlgorithms = null, this.revocationKeyClass = null, this.revocationKeyAlgorithm = null, this.revocationKeyFingerprint = null, this.issuerKeyID = new Me(), this.rawNotations = [], this.notations = {}, this.preferredHashAlgorithms = null, this.preferredCompressionAlgorithms = null, this.keyServerPreferences = null, this.preferredKeyServer = null, this.isPrimaryUserID = null, this.policyURI = null, this.keyFlags = null, this.signersUserID = null, this.reasonForRevocationFlag = null, this.reasonForRevocationString = null, this.features = null, this.signatureTargetPublicKeyAlgorithm = null, this.signatureTargetHashAlgorithm = null, this.signatureTargetHash = null, this.embeddedSignature = null, this.issuerKeyVersion = null, this.issuerFingerprint = null, this.preferredAEADAlgorithms = null, this.revoked = null, this[io] = null;
      }
      read(e2) {
        let t2 = 0;
        if (this.version = e2[t2++], 4 !== this.version && 5 !== this.version)
          throw new Ui(`Version ${this.version} of the signature packet is unsupported.`);
        if (this.signatureType = e2[t2++], this.publicKeyAlgorithm = e2[t2++], this.hashAlgorithm = e2[t2++], t2 += this.readSubPackets(e2.subarray(t2, e2.length), true), !this.created)
          throw Error("Missing signature creation time subpacket.");
        this.signatureData = e2.subarray(0, t2), t2 += this.readSubPackets(e2.subarray(t2, e2.length), false), this.signedHashValue = e2.subarray(t2, t2 + 2), t2 += 2, this.params = aa.signature.parseSignatureParams(this.publicKeyAlgorithm, e2.subarray(t2, e2.length));
      }
      writeParams() {
        return this.params instanceof Promise ? ae(async () => aa.serializeParams(this.publicKeyAlgorithm, await this.params)) : aa.serializeParams(this.publicKeyAlgorithm, this.params);
      }
      write() {
        const e2 = [];
        return e2.push(this.signatureData), e2.push(this.writeUnhashedSubPackets()), e2.push(this.signedHashValue), e2.push(this.writeParams()), ce.concat(e2);
      }
      async sign(e2, t2, r2 = new Date(), i2 = false) {
        5 === e2.version ? this.version = 5 : this.version = 4;
        const n2 = [new Uint8Array([this.version, this.signatureType, this.publicKeyAlgorithm, this.hashAlgorithm])];
        this.created = ce.normalizeDate(r2), this.issuerKeyVersion = e2.version, this.issuerFingerprint = e2.getFingerprintBytes(), this.issuerKeyID = e2.getKeyID(), n2.push(this.writeHashedSubPackets()), this.unhashedSubpackets = [], this.signatureData = ce.concat(n2);
        const a2 = this.toHash(this.signatureType, t2, i2), s2 = await this.hash(this.signatureType, t2, a2, i2);
        this.signedHashValue = re(J(s2), 0, 2);
        const o2 = async () => aa.signature.sign(this.publicKeyAlgorithm, this.hashAlgorithm, e2.publicParams, e2.privateParams, a2, await ie(s2));
        ce.isStream(s2) ? this.params = o2() : (this.params = await o2(), this[io] = true);
      }
      writeHashedSubPackets() {
        const e2 = me.signatureSubpacket, t2 = [];
        let r2;
        if (null === this.created)
          throw Error("Missing signature creation time");
        t2.push(so(e2.signatureCreationTime, ce.writeDate(this.created))), null !== this.signatureExpirationTime && t2.push(so(e2.signatureExpirationTime, ce.writeNumber(this.signatureExpirationTime, 4))), null !== this.exportable && t2.push(so(e2.exportableCertification, new Uint8Array([this.exportable ? 1 : 0]))), null !== this.trustLevel && (r2 = new Uint8Array([this.trustLevel, this.trustAmount]), t2.push(so(e2.trustSignature, r2))), null !== this.regularExpression && t2.push(so(e2.regularExpression, this.regularExpression)), null !== this.revocable && t2.push(so(e2.revocable, new Uint8Array([this.revocable ? 1 : 0]))), null !== this.keyExpirationTime && t2.push(so(e2.keyExpirationTime, ce.writeNumber(this.keyExpirationTime, 4))), null !== this.preferredSymmetricAlgorithms && (r2 = ce.stringToUint8Array(ce.uint8ArrayToString(this.preferredSymmetricAlgorithms)), t2.push(so(e2.preferredSymmetricAlgorithms, r2))), null !== this.revocationKeyClass && (r2 = new Uint8Array([this.revocationKeyClass, this.revocationKeyAlgorithm]), r2 = ce.concat([r2, this.revocationKeyFingerprint]), t2.push(so(e2.revocationKey, r2))), this.issuerKeyID.isNull() || 5 === this.issuerKeyVersion || t2.push(so(e2.issuer, this.issuerKeyID.write())), this.rawNotations.forEach(([{ name: i3, value: n3, humanReadable: a2 }]) => {
          r2 = [new Uint8Array([a2 ? 128 : 0, 0, 0, 0])], r2.push(ce.writeNumber(i3.length, 2)), r2.push(ce.writeNumber(n3.length, 2)), r2.push(ce.stringToUint8Array(i3)), r2.push(n3), r2 = ce.concat(r2), t2.push(so(e2.notationData, r2));
        }), null !== this.preferredHashAlgorithms && (r2 = ce.stringToUint8Array(ce.uint8ArrayToString(this.preferredHashAlgorithms)), t2.push(so(e2.preferredHashAlgorithms, r2))), null !== this.preferredCompressionAlgorithms && (r2 = ce.stringToUint8Array(ce.uint8ArrayToString(this.preferredCompressionAlgorithms)), t2.push(so(e2.preferredCompressionAlgorithms, r2))), null !== this.keyServerPreferences && (r2 = ce.stringToUint8Array(ce.uint8ArrayToString(this.keyServerPreferences)), t2.push(so(e2.keyServerPreferences, r2))), null !== this.preferredKeyServer && t2.push(so(e2.preferredKeyServer, ce.stringToUint8Array(this.preferredKeyServer))), null !== this.isPrimaryUserID && t2.push(so(e2.primaryUserID, new Uint8Array([this.isPrimaryUserID ? 1 : 0]))), null !== this.policyURI && t2.push(so(e2.policyURI, ce.stringToUint8Array(this.policyURI))), null !== this.keyFlags && (r2 = ce.stringToUint8Array(ce.uint8ArrayToString(this.keyFlags)), t2.push(so(e2.keyFlags, r2))), null !== this.signersUserID && t2.push(so(e2.signersUserID, ce.stringToUint8Array(this.signersUserID))), null !== this.reasonForRevocationFlag && (r2 = ce.stringToUint8Array(String.fromCharCode(this.reasonForRevocationFlag) + this.reasonForRevocationString), t2.push(so(e2.reasonForRevocation, r2))), null !== this.features && (r2 = ce.stringToUint8Array(ce.uint8ArrayToString(this.features)), t2.push(so(e2.features, r2))), null !== this.signatureTargetPublicKeyAlgorithm && (r2 = [new Uint8Array([this.signatureTargetPublicKeyAlgorithm, this.signatureTargetHashAlgorithm])], r2.push(ce.stringToUint8Array(this.signatureTargetHash)), r2 = ce.concat(r2), t2.push(so(e2.signatureTarget, r2))), null !== this.embeddedSignature && t2.push(so(e2.embeddedSignature, this.embeddedSignature.write())), null !== this.issuerFingerprint && (r2 = [new Uint8Array([this.issuerKeyVersion]), this.issuerFingerprint], r2 = ce.concat(r2), t2.push(so(e2.issuerFingerprint, r2))), null !== this.preferredAEADAlgorithms && (r2 = ce.stringToUint8Array(ce.uint8ArrayToString(this.preferredAEADAlgorithms)), t2.push(so(e2.preferredAEADAlgorithms, r2)));
        const i2 = ce.concat(t2), n2 = ce.writeNumber(i2.length, 2);
        return ce.concat([n2, i2]);
      }
      writeUnhashedSubPackets() {
        const e2 = [];
        this.unhashedSubpackets.forEach((t3) => {
          e2.push(xi(t3.length)), e2.push(t3);
        });
        const t2 = ce.concat(e2), r2 = ce.writeNumber(t2.length, 2);
        return ce.concat([r2, t2]);
      }
      readSubPacket(e2, t2 = true) {
        let r2 = 0;
        const i2 = 128 & e2[r2], n2 = 127 & e2[r2];
        if (t2 || (this.unhashedSubpackets.push(e2.subarray(r2, e2.length)), no.has(n2)))
          switch (r2++, n2) {
            case me.signatureSubpacket.signatureCreationTime:
              this.created = ce.readDate(e2.subarray(r2, e2.length));
              break;
            case me.signatureSubpacket.signatureExpirationTime: {
              const t3 = ce.readNumber(e2.subarray(r2, e2.length));
              this.signatureNeverExpires = 0 === t3, this.signatureExpirationTime = t3;
              break;
            }
            case me.signatureSubpacket.exportableCertification:
              this.exportable = 1 === e2[r2++];
              break;
            case me.signatureSubpacket.trustSignature:
              this.trustLevel = e2[r2++], this.trustAmount = e2[r2++];
              break;
            case me.signatureSubpacket.regularExpression:
              this.regularExpression = e2[r2];
              break;
            case me.signatureSubpacket.revocable:
              this.revocable = 1 === e2[r2++];
              break;
            case me.signatureSubpacket.keyExpirationTime: {
              const t3 = ce.readNumber(e2.subarray(r2, e2.length));
              this.keyExpirationTime = t3, this.keyNeverExpires = 0 === t3;
              break;
            }
            case me.signatureSubpacket.preferredSymmetricAlgorithms:
              this.preferredSymmetricAlgorithms = [...e2.subarray(r2, e2.length)];
              break;
            case me.signatureSubpacket.revocationKey:
              this.revocationKeyClass = e2[r2++], this.revocationKeyAlgorithm = e2[r2++], this.revocationKeyFingerprint = e2.subarray(r2, r2 + 20);
              break;
            case me.signatureSubpacket.issuer:
              this.issuerKeyID.read(e2.subarray(r2, e2.length));
              break;
            case me.signatureSubpacket.notationData: {
              const t3 = !!(128 & e2[r2]);
              r2 += 4;
              const n3 = ce.readNumber(e2.subarray(r2, r2 + 2));
              r2 += 2;
              const a2 = ce.readNumber(e2.subarray(r2, r2 + 2));
              r2 += 2;
              const s2 = ce.uint8ArrayToString(e2.subarray(r2, r2 + n3)), o2 = e2.subarray(r2 + n3, r2 + n3 + a2);
              this.rawNotations.push({ name: s2, humanReadable: t3, value: o2, critical: i2 }), t3 && (this.notations[s2] = ce.uint8ArrayToString(o2));
              break;
            }
            case me.signatureSubpacket.preferredHashAlgorithms:
              this.preferredHashAlgorithms = [...e2.subarray(r2, e2.length)];
              break;
            case me.signatureSubpacket.preferredCompressionAlgorithms:
              this.preferredCompressionAlgorithms = [...e2.subarray(r2, e2.length)];
              break;
            case me.signatureSubpacket.keyServerPreferences:
              this.keyServerPreferences = [...e2.subarray(r2, e2.length)];
              break;
            case me.signatureSubpacket.preferredKeyServer:
              this.preferredKeyServer = ce.uint8ArrayToString(e2.subarray(r2, e2.length));
              break;
            case me.signatureSubpacket.primaryUserID:
              this.isPrimaryUserID = 0 !== e2[r2++];
              break;
            case me.signatureSubpacket.policyURI:
              this.policyURI = ce.uint8ArrayToString(e2.subarray(r2, e2.length));
              break;
            case me.signatureSubpacket.keyFlags:
              this.keyFlags = [...e2.subarray(r2, e2.length)];
              break;
            case me.signatureSubpacket.signersUserID:
              this.signersUserID = ce.uint8ArrayToString(e2.subarray(r2, e2.length));
              break;
            case me.signatureSubpacket.reasonForRevocation:
              this.reasonForRevocationFlag = e2[r2++], this.reasonForRevocationString = ce.uint8ArrayToString(e2.subarray(r2, e2.length));
              break;
            case me.signatureSubpacket.features:
              this.features = [...e2.subarray(r2, e2.length)];
              break;
            case me.signatureSubpacket.signatureTarget: {
              this.signatureTargetPublicKeyAlgorithm = e2[r2++], this.signatureTargetHashAlgorithm = e2[r2++];
              const t3 = aa.getHashByteLength(this.signatureTargetHashAlgorithm);
              this.signatureTargetHash = ce.uint8ArrayToString(e2.subarray(r2, r2 + t3));
              break;
            }
            case me.signatureSubpacket.embeddedSignature:
              this.embeddedSignature = new ao(), this.embeddedSignature.read(e2.subarray(r2, e2.length));
              break;
            case me.signatureSubpacket.issuerFingerprint:
              this.issuerKeyVersion = e2[r2++], this.issuerFingerprint = e2.subarray(r2, e2.length), 5 === this.issuerKeyVersion ? this.issuerKeyID.read(this.issuerFingerprint) : this.issuerKeyID.read(this.issuerFingerprint.subarray(-8));
              break;
            case me.signatureSubpacket.preferredAEADAlgorithms:
              this.preferredAEADAlgorithms = [...e2.subarray(r2, e2.length)];
              break;
            default: {
              const e3 = Error("Unknown signature subpacket type " + n2);
              if (i2)
                throw e3;
              ce.printDebug(e3);
            }
          }
      }
      readSubPackets(e2, t2 = true, r2) {
        const i2 = ce.readNumber(e2.subarray(0, 2));
        let n2 = 2;
        for (; n2 < 2 + i2; ) {
          const i3 = Pi(e2.subarray(n2, e2.length));
          n2 += i3.offset, this.readSubPacket(e2.subarray(n2, n2 + i3.len), t2, r2), n2 += i3.len;
        }
        return n2;
      }
      toSign(e2, t2) {
        const r2 = me.signature;
        switch (e2) {
          case r2.binary:
            return null !== t2.text ? ce.encodeUTF8(t2.getText(true)) : t2.getBytes(true);
          case r2.text: {
            const e3 = t2.getBytes(true);
            return ce.canonicalizeEOL(e3);
          }
          case r2.standalone:
            return new Uint8Array(0);
          case r2.certGeneric:
          case r2.certPersona:
          case r2.certCasual:
          case r2.certPositive:
          case r2.certRevocation: {
            let e3, i2;
            if (t2.userID)
              i2 = 180, e3 = t2.userID;
            else {
              if (!t2.userAttribute)
                throw Error("Either a userID or userAttribute packet needs to be supplied for certification.");
              i2 = 209, e3 = t2.userAttribute;
            }
            const n2 = e3.write();
            return ce.concat([this.toSign(r2.key, t2), new Uint8Array([i2]), ce.writeNumber(n2.length, 4), n2]);
          }
          case r2.subkeyBinding:
          case r2.subkeyRevocation:
          case r2.keyBinding:
            return ce.concat([this.toSign(r2.key, t2), this.toSign(r2.key, { key: t2.bind })]);
          case r2.key:
            if (void 0 === t2.key)
              throw Error("Key packet is required for this signature.");
            return t2.key.writeForHash(this.version);
          case r2.keyRevocation:
            return this.toSign(r2.key, t2);
          case r2.timestamp:
            return new Uint8Array(0);
          case r2.thirdParty:
            throw Error("Not implemented");
          default:
            throw Error("Unknown signature type.");
        }
      }
      calculateTrailer(e2, t2) {
        let r2 = 0;
        return Y(J(this.signatureData), (e3) => {
          r2 += e3.length;
        }, () => {
          const i2 = [];
          return 5 !== this.version || this.signatureType !== me.signature.binary && this.signatureType !== me.signature.text || (t2 ? i2.push(new Uint8Array(6)) : i2.push(e2.writeHeader())), i2.push(new Uint8Array([this.version, 255])), 5 === this.version && i2.push(new Uint8Array(4)), i2.push(ce.writeNumber(r2, 4)), ce.concat(i2);
        });
      }
      toHash(e2, t2, r2 = false) {
        const i2 = this.toSign(e2, t2);
        return ce.concat([i2, this.signatureData, this.calculateTrailer(t2, r2)]);
      }
      async hash(e2, t2, r2, i2 = false) {
        return r2 || (r2 = this.toHash(e2, t2, i2)), aa.hash.digest(this.hashAlgorithm, r2);
      }
      async verify(e2, t2, r2, i2 = new Date(), n2 = false, a2 = ge) {
        if (!this.issuerKeyID.equals(e2.getKeyID()))
          throw Error("Signature was not issued by the given public key");
        if (this.publicKeyAlgorithm !== e2.algorithm)
          throw Error("Public key algorithm used to sign signature does not match issuer key algorithm.");
        const s2 = t2 === me.signature.binary || t2 === me.signature.text;
        if (!(this[io] && !s2)) {
          let i3, a3;
          if (this.hashed ? a3 = await this.hashed : (i3 = this.toHash(t2, r2, n2), a3 = await this.hash(t2, r2, i3)), a3 = await ie(a3), this.signedHashValue[0] !== a3[0] || this.signedHashValue[1] !== a3[1])
            throw Error("Signed digest did not match");
          if (this.params = await this.params, this[io] = await aa.signature.verify(this.publicKeyAlgorithm, this.hashAlgorithm, this.params, e2.publicParams, i3, a3), !this[io])
            throw Error("Signature verification failed");
        }
        const o2 = ce.normalizeDate(i2);
        if (o2 && this.created > o2)
          throw Error("Signature creation time is in the future");
        if (o2 && o2 >= this.getExpirationTime())
          throw Error("Signature is expired");
        if (a2.rejectHashAlgorithms.has(this.hashAlgorithm))
          throw Error("Insecure hash algorithm: " + me.read(me.hash, this.hashAlgorithm).toUpperCase());
        if (a2.rejectMessageHashAlgorithms.has(this.hashAlgorithm) && [me.signature.binary, me.signature.text].includes(this.signatureType))
          throw Error("Insecure message hash algorithm: " + me.read(me.hash, this.hashAlgorithm).toUpperCase());
        if (this.rawNotations.forEach(({ name: e3, critical: t3 }) => {
          if (t3 && a2.knownNotations.indexOf(e3) < 0)
            throw Error("Unknown critical notation: " + e3);
        }), null !== this.revocationKeyClass)
          throw Error("This key is intended to be revoked with an authorized key, which OpenPGP.js does not support.");
      }
      isExpired(e2 = new Date()) {
        const t2 = ce.normalizeDate(e2);
        return null !== t2 && !(this.created <= t2 && t2 < this.getExpirationTime());
      }
      getExpirationTime() {
        return this.signatureNeverExpires ? 1 / 0 : new Date(this.created.getTime() + 1e3 * this.signatureExpirationTime);
      }
    };
    function so(e2, t2) {
      const r2 = [];
      return r2.push(xi(t2.length + 1)), r2.push(new Uint8Array([e2])), r2.push(t2), ce.concat(r2);
    }
    var oo = class {
      static get tag() {
        return me.packet.onePassSignature;
      }
      constructor() {
        this.version = null, this.signatureType = null, this.hashAlgorithm = null, this.publicKeyAlgorithm = null, this.issuerKeyID = null, this.flags = null;
      }
      read(e2) {
        let t2 = 0;
        if (this.version = e2[t2++], 3 !== this.version)
          throw new Ui(`Version ${this.version} of the one-pass signature packet is unsupported.`);
        return this.signatureType = e2[t2++], this.hashAlgorithm = e2[t2++], this.publicKeyAlgorithm = e2[t2++], this.issuerKeyID = new Me(), this.issuerKeyID.read(e2.subarray(t2, t2 + 8)), t2 += 8, this.flags = e2[t2++], this;
      }
      write() {
        const e2 = new Uint8Array([3, this.signatureType, this.hashAlgorithm, this.publicKeyAlgorithm]), t2 = new Uint8Array([this.flags]);
        return ce.concatUint8Array([e2, this.issuerKeyID.write(), t2]);
      }
      calculateTrailer(...e2) {
        return ae(async () => ao.prototype.calculateTrailer.apply(await this.correspondingSig, e2));
      }
      async verify() {
        const e2 = await this.correspondingSig;
        if (!e2 || e2.constructor.tag !== me.packet.signature)
          throw Error("Corresponding signature packet missing");
        if (e2.signatureType !== this.signatureType || e2.hashAlgorithm !== this.hashAlgorithm || e2.publicKeyAlgorithm !== this.publicKeyAlgorithm || !e2.issuerKeyID.equals(this.issuerKeyID))
          throw Error("Corresponding signature packet does not match one-pass signature packet");
        return e2.hashed = this.hashed, e2.verify.apply(e2, arguments);
      }
    };
    function co(e2, t2) {
      if (!t2[e2]) {
        let t3;
        try {
          t3 = me.read(me.packet, e2);
        } catch (t4) {
          throw new Ui("Unknown packet type with tag: " + e2);
        }
        throw Error("Packet not allowed in this context: " + t3);
      }
      return new t2[e2]();
    }
    oo.prototype.hash = ao.prototype.hash, oo.prototype.toHash = ao.prototype.toHash, oo.prototype.toSign = ao.prototype.toSign;
    var uo = class extends Array {
      static async fromBinary(e2, t2, r2 = ge) {
        const i2 = new uo();
        return await i2.read(e2, t2, r2), i2;
      }
      async read(e2, t2, r2 = ge) {
        this.stream = X(e2, async (e3, i3) => {
          const n2 = G(i3);
          try {
            for (; ; ) {
              await n2.ready;
              if (await Ri(e3, async (e4) => {
                try {
                  if (e4.tag === me.packet.marker || e4.tag === me.packet.trust)
                    return;
                  const i4 = co(e4.tag, t2);
                  i4.packets = new uo(), i4.fromStream = ce.isStream(e4.packet), await i4.read(e4.packet, r2), await n2.write(i4);
                } catch (t3) {
                  const i4 = !r2.ignoreUnsupportedPackets && t3 instanceof Ui, a2 = !(r2.ignoreMalformedPackets || t3 instanceof Ui);
                  if (i4 || a2 || Di(e4.tag))
                    await n2.abort(t3);
                  else {
                    const t4 = new Ii(e4.tag, e4.packet);
                    await n2.write(t4);
                  }
                  ce.printDebugError(t3);
                }
              }))
                return await n2.ready, void await n2.close();
            }
          } catch (e4) {
            await n2.abort(e4);
          }
        });
        const i2 = H(this.stream);
        for (; ; ) {
          const { done: e3, value: t3 } = await i2.read();
          if (e3 ? this.stream = null : this.push(t3), e3 || Di(t3.constructor.tag))
            break;
        }
        i2.releaseLock();
      }
      write() {
        const e2 = [];
        for (let t2 = 0; t2 < this.length; t2++) {
          const r2 = this[t2] instanceof Ii ? this[t2].tag : this[t2].constructor.tag, i2 = this[t2].write();
          if (ce.isStream(i2) && Di(this[t2].constructor.tag)) {
            let t3 = [], n2 = 0;
            const a2 = 512;
            e2.push(Ci(r2)), e2.push(Y(i2, (e3) => {
              if (t3.push(e3), n2 += e3.length, n2 >= a2) {
                const e4 = Math.min(Math.log(n2) / Math.LN2 | 0, 30), r3 = 2 ** e4, i3 = ce.concat([Mi(e4)].concat(t3));
                return t3 = [i3.subarray(1 + r3)], n2 = t3[0].length, i3.subarray(0, 1 + r3);
              }
            }, () => ce.concat([xi(n2)].concat(t3))));
          } else {
            if (ce.isStream(i2)) {
              let t3 = 0;
              e2.push(Y(J(i2), (e3) => {
                t3 += e3.length;
              }, () => Ki(r2, t3)));
            } else
              e2.push(Ki(r2, i2.length));
            e2.push(i2);
          }
        }
        return ce.concat(e2);
      }
      filterByTag(...e2) {
        const t2 = new uo(), r2 = (e3) => (t3) => e3 === t3;
        for (let i2 = 0; i2 < this.length; i2++)
          e2.some(r2(this[i2].constructor.tag)) && t2.push(this[i2]);
        return t2;
      }
      findPacket(e2) {
        return this.find((t2) => t2.constructor.tag === e2);
      }
      indexOfTag(...e2) {
        const t2 = [], r2 = this, i2 = (e3) => (t3) => e3 === t3;
        for (let n2 = 0; n2 < this.length; n2++)
          e2.some(i2(r2[n2].constructor.tag)) && t2.push(n2);
        return t2;
      }
    };
    var ho = /* @__PURE__ */ ce.constructAllowedPackets([ro, oo, ao]);
    var fo = class {
      static get tag() {
        return me.packet.compressedData;
      }
      constructor(e2 = ge) {
        this.packets = null, this.algorithm = e2.preferredCompressionAlgorithm, this.compressed = null, this.deflateLevel = e2.deflateLevel;
      }
      async read(e2, t2 = ge) {
        await Q(e2, async (e3) => {
          this.algorithm = await e3.readByte(), this.compressed = e3.remainder(), await this.decompress(t2);
        });
      }
      write() {
        return null === this.compressed && this.compress(), ce.concat([new Uint8Array([this.algorithm]), this.compressed]);
      }
      async decompress(e2 = ge) {
        const t2 = me.read(me.compression, this.algorithm), r2 = wo[t2];
        if (!r2)
          throw Error(t2 + " decompression not supported");
        this.packets = await uo.fromBinary(r2(this.compressed), ho, e2);
      }
      compress() {
        const e2 = me.read(me.compression, this.algorithm), t2 = go[e2];
        if (!t2)
          throw Error(e2 + " compression not supported");
        this.compressed = t2(this.packets.write(), this.deflateLevel);
      }
    };
    var lo = ce.getNodeZlib();
    function po(e2) {
      return e2;
    }
    function yo(e2, t2, r2 = {}) {
      return function(i2) {
        return !ce.isStream(i2) || _(i2) ? ae(() => ie(i2).then((t3) => new Promise((i3, n2) => {
          e2(t3, r2, (e3, t4) => {
            if (e3)
              return n2(e3);
            i3(t4);
          });
        }))) : K(D(i2).pipe(t2(r2)));
      };
    }
    function bo(e2, t2 = {}) {
      return function(r2) {
        const i2 = new e2(t2);
        return Y(r2, (e3) => {
          if (e3.length)
            return i2.push(e3, 2), i2.result;
        }, () => {
          if (e2 === _s)
            return i2.push([], 4), i2.result;
        });
      };
    }
    function mo(e2) {
      return function(t2) {
        return ae(async () => e2(await ie(t2)));
      };
    }
    var go = lo ? { zip: (e2, t2) => yo(lo.deflateRaw, lo.createDeflateRaw, { level: t2 })(e2), zlib: (e2, t2) => yo(lo.deflate, lo.createDeflate, { level: t2 })(e2) } : { zip: (e2, t2) => bo(_s, { raw: true, level: t2 })(e2), zlib: (e2, t2) => bo(_s, { level: t2 })(e2) };
    var wo = lo ? { uncompressed: po, zip: /* @__PURE__ */ yo(lo.inflateRaw, lo.createInflateRaw), zlib: /* @__PURE__ */ yo(lo.inflate, lo.createInflate), bzip2: /* @__PURE__ */ mo(to) } : { uncompressed: po, zip: /* @__PURE__ */ bo(Fs, { raw: true }), zlib: /* @__PURE__ */ bo(Fs), bzip2: /* @__PURE__ */ mo(to) };
    var vo = /* @__PURE__ */ ce.constructAllowedPackets([ro, fo, oo, ao]);
    var _o = class {
      static get tag() {
        return me.packet.symEncryptedIntegrityProtectedData;
      }
      constructor() {
        this.version = 1, this.encrypted = null, this.packets = null;
      }
      async read(e2) {
        await Q(e2, async (e3) => {
          const t2 = await e3.readByte();
          if (1 !== t2)
            throw new Ui(`Version ${t2} of the SEIP packet is unsupported.`);
          this.encrypted = e3.remainder();
        });
      }
      write() {
        return ce.concat([new Uint8Array([1]), this.encrypted]);
      }
      async encrypt(e2, t2, r2 = ge) {
        const { blockSize: i2 } = aa.getCipher(e2);
        let n2 = this.packets.write();
        _(n2) && (n2 = await ie(n2));
        const a2 = await aa.getPrefixRandom(e2), s2 = new Uint8Array([211, 20]), o2 = ce.concat([a2, n2, s2]), c2 = await aa.hash.sha1(ee(o2)), u2 = ce.concat([o2, c2]);
        return this.encrypted = await aa.mode.cfb.encrypt(e2, t2, u2, new Uint8Array(i2), r2), true;
      }
      async decrypt(e2, t2, r2 = ge) {
        const { blockSize: i2 } = aa.getCipher(e2);
        let n2 = J(this.encrypted);
        _(n2) && (n2 = await ie(n2));
        const a2 = await aa.mode.cfb.decrypt(e2, t2, n2, new Uint8Array(i2)), s2 = re(ee(a2), -20), o2 = re(a2, 0, -20), c2 = Promise.all([ie(await aa.hash.sha1(ee(o2))), ie(s2)]).then(([e3, t3]) => {
          if (!ce.equalsUint8Array(e3, t3))
            throw Error("Modification detected.");
          return new Uint8Array();
        }), u2 = re(o2, i2 + 2);
        let h2 = re(u2, 0, -2);
        return h2 = W([h2, ae(() => c2)]), ce.isStream(n2) && r2.allowUnauthenticatedStream || (h2 = await ie(h2)), this.packets = await uo.fromBinary(h2, vo, r2), true;
      }
    };
    var ko = /* @__PURE__ */ ce.constructAllowedPackets([ro, fo, oo, ao]);
    var Ao = class {
      static get tag() {
        return me.packet.aeadEncryptedData;
      }
      constructor() {
        this.version = 1, this.cipherAlgorithm = null, this.aeadAlgorithm = me.aead.eax, this.chunkSizeByte = null, this.iv = null, this.encrypted = null, this.packets = null;
      }
      async read(e2) {
        await Q(e2, async (e3) => {
          const t2 = await e3.readByte();
          if (1 !== t2)
            throw new Ui(`Version ${t2} of the AEAD-encrypted data packet is not supported.`);
          this.cipherAlgorithm = await e3.readByte(), this.aeadAlgorithm = await e3.readByte(), this.chunkSizeByte = await e3.readByte();
          const r2 = aa.getAEADMode(this.aeadAlgorithm);
          this.iv = await e3.readBytes(r2.ivLength), this.encrypted = e3.remainder();
        });
      }
      write() {
        return ce.concat([new Uint8Array([this.version, this.cipherAlgorithm, this.aeadAlgorithm, this.chunkSizeByte]), this.iv, this.encrypted]);
      }
      async decrypt(e2, t2, r2 = ge) {
        this.packets = await uo.fromBinary(await this.crypt("decrypt", t2, J(this.encrypted)), ko, r2);
      }
      async encrypt(e2, t2, r2 = ge) {
        this.cipherAlgorithm = e2;
        const { ivLength: i2 } = aa.getAEADMode(this.aeadAlgorithm);
        this.iv = await aa.random.getRandomBytes(i2), this.chunkSizeByte = r2.aeadChunkSizeByte;
        const n2 = this.packets.write();
        this.encrypted = await this.crypt("encrypt", t2, n2);
      }
      async crypt(e2, t2, r2) {
        const i2 = aa.getAEADMode(this.aeadAlgorithm), n2 = await i2(this.cipherAlgorithm, t2), a2 = "decrypt" === e2 ? i2.tagLength : 0, s2 = "encrypt" === e2 ? i2.tagLength : 0, o2 = 2 ** (this.chunkSizeByte + 6) + a2, c2 = new ArrayBuffer(21), u2 = new Uint8Array(c2, 0, 13), h2 = new Uint8Array(c2), f2 = new DataView(c2), d2 = new Uint8Array(c2, 5, 8);
        u2.set([192 | Ao.tag, this.version, this.cipherAlgorithm, this.aeadAlgorithm, this.chunkSizeByte], 0);
        let l2 = 0, p2 = Promise.resolve(), y2 = 0, b2 = 0;
        const m2 = this.iv;
        return X(r2, async (t3, r3) => {
          if ("array" !== ce.isStream(t3)) {
            const e3 = new O({}, { highWaterMark: ce.getHardwareConcurrency() * 2 ** (this.chunkSizeByte + 6), size: (e4) => e4.length });
            V(e3.readable, r3), r3 = e3.writable;
          }
          const c3 = H(t3), g2 = G(r3);
          try {
            for (; ; ) {
              let t4 = await c3.readBytes(o2 + a2) || new Uint8Array();
              const r4 = t4.subarray(t4.length - a2);
              let w2, v2;
              if (t4 = t4.subarray(0, t4.length - a2), !l2 || t4.length ? (c3.unshift(r4), w2 = n2[e2](t4, i2.getNonce(m2, d2), u2), b2 += t4.length - a2 + s2) : (f2.setInt32(17, y2), w2 = n2[e2](r4, i2.getNonce(m2, d2), h2), b2 += s2, v2 = true), y2 += t4.length - a2, p2 = p2.then(() => w2).then(async (e3) => {
                await g2.ready, await g2.write(e3), b2 -= e3.length;
              }).catch((e3) => g2.abort(e3)), (v2 || b2 > g2.desiredSize) && await p2, v2) {
                await g2.close();
                break;
              }
              f2.setInt32(9, ++l2);
            }
          } catch (e3) {
            await g2.abort(e3);
          }
        });
      }
    };
    var So = class {
      static get tag() {
        return me.packet.publicKeyEncryptedSessionKey;
      }
      constructor() {
        this.version = 3, this.publicKeyID = new Me(), this.publicKeyAlgorithm = null, this.sessionKey = null, this.sessionKeyAlgorithm = null, this.encrypted = {};
      }
      read(e2) {
        if (this.version = e2[0], 3 !== this.version)
          throw new Ui(`Version ${this.version} of the PKESK packet is unsupported.`);
        this.publicKeyID.read(e2.subarray(1, e2.length)), this.publicKeyAlgorithm = e2[9], this.encrypted = aa.parseEncSessionKeyParams(this.publicKeyAlgorithm, e2.subarray(10));
      }
      write() {
        const e2 = [new Uint8Array([this.version]), this.publicKeyID.write(), new Uint8Array([this.publicKeyAlgorithm]), aa.serializeParams(this.publicKeyAlgorithm, this.encrypted)];
        return ce.concatUint8Array(e2);
      }
      async encrypt(e2) {
        const t2 = ce.concatUint8Array([new Uint8Array([me.write(me.symmetric, this.sessionKeyAlgorithm)]), this.sessionKey, ce.writeChecksum(this.sessionKey)]), r2 = me.write(me.publicKey, this.publicKeyAlgorithm);
        this.encrypted = await aa.publicKeyEncrypt(r2, e2.publicParams, t2, e2.getFingerprintBytes());
      }
      async decrypt(e2, t2) {
        if (this.publicKeyAlgorithm !== e2.algorithm)
          throw Error("Decryption error");
        const r2 = t2 ? ce.concatUint8Array([new Uint8Array([t2.sessionKeyAlgorithm]), t2.sessionKey, ce.writeChecksum(t2.sessionKey)]) : null, i2 = await aa.publicKeyDecrypt(this.publicKeyAlgorithm, e2.publicParams, e2.privateParams, this.encrypted, e2.getFingerprintBytes(), r2), n2 = i2[0], a2 = i2.subarray(1, i2.length - 2), s2 = i2.subarray(i2.length - 2), o2 = ce.writeChecksum(a2), c2 = o2[0] === s2[0] & o2[1] === s2[1];
        if (t2) {
          const e3 = c2 & n2 === t2.sessionKeyAlgorithm & a2.length === t2.sessionKey.length;
          this.sessionKeyAlgorithm = ce.selectUint8(e3, n2, t2.sessionKeyAlgorithm), this.sessionKey = ce.selectUint8Array(e3, a2, t2.sessionKey);
        } else {
          if (!(c2 && me.read(me.symmetric, n2)))
            throw Error("Decryption error");
          this.sessionKey = a2, this.sessionKeyAlgorithm = n2;
        }
      }
    };
    var Eo = class {
      constructor(e2 = ge) {
        this.algorithm = me.hash.sha256, this.type = "iterated", this.c = e2.s2kIterationCountByte, this.salt = null;
      }
      getCount() {
        return 16 + (15 & this.c) << 6 + (this.c >> 4);
      }
      read(e2) {
        let t2 = 0;
        switch (this.type = me.read(me.s2k, e2[t2++]), this.algorithm = e2[t2++], this.type) {
          case "simple":
            break;
          case "salted":
            this.salt = e2.subarray(t2, t2 + 8), t2 += 8;
            break;
          case "iterated":
            this.salt = e2.subarray(t2, t2 + 8), t2 += 8, this.c = e2[t2++];
            break;
          case "gnu":
            if ("GNU" !== ce.uint8ArrayToString(e2.subarray(t2, t2 + 3)))
              throw Error("Unknown s2k type.");
            t2 += 3;
            if (1001 !== 1e3 + e2[t2++])
              throw Error("Unknown s2k gnu protection mode.");
            this.type = "gnu-dummy";
            break;
          default:
            throw Error("Unknown s2k type.");
        }
        return t2;
      }
      write() {
        if ("gnu-dummy" === this.type)
          return new Uint8Array([101, 0, ...ce.stringToUint8Array("GNU"), 1]);
        const e2 = [new Uint8Array([me.write(me.s2k, this.type), this.algorithm])];
        switch (this.type) {
          case "simple":
            break;
          case "salted":
            e2.push(this.salt);
            break;
          case "iterated":
            e2.push(this.salt), e2.push(new Uint8Array([this.c]));
            break;
          case "gnu":
            throw Error("GNU s2k type not supported.");
          default:
            throw Error("Unknown s2k type.");
        }
        return ce.concatUint8Array(e2);
      }
      async produceKey(e2, t2) {
        e2 = ce.encodeUTF8(e2);
        const r2 = [];
        let i2 = 0, n2 = 0;
        for (; i2 < t2; ) {
          let t3;
          switch (this.type) {
            case "simple":
              t3 = ce.concatUint8Array([new Uint8Array(n2), e2]);
              break;
            case "salted":
              t3 = ce.concatUint8Array([new Uint8Array(n2), this.salt, e2]);
              break;
            case "iterated": {
              const r3 = ce.concatUint8Array([this.salt, e2]);
              let i3 = r3.length;
              const a3 = Math.max(this.getCount(), i3);
              t3 = new Uint8Array(n2 + a3), t3.set(r3, n2);
              for (let e3 = n2 + i3; e3 < a3; e3 += i3, i3 *= 2)
                t3.copyWithin(e3, n2, e3);
              break;
            }
            case "gnu":
              throw Error("GNU s2k type not supported.");
            default:
              throw Error("Unknown s2k type.");
          }
          const a2 = await aa.hash.digest(this.algorithm, t3);
          r2.push(a2), i2 += a2.length, n2++;
        }
        return ce.concatUint8Array(r2).subarray(0, t2);
      }
    };
    var Po = class {
      static get tag() {
        return me.packet.symEncryptedSessionKey;
      }
      constructor(e2 = ge) {
        this.version = e2.aeadProtect ? 5 : 4, this.sessionKey = null, this.sessionKeyEncryptionAlgorithm = null, this.sessionKeyAlgorithm = me.symmetric.aes256, this.aeadAlgorithm = me.write(me.aead, e2.preferredAEADAlgorithm), this.encrypted = null, this.s2k = null, this.iv = null;
      }
      read(e2) {
        let t2 = 0;
        if (this.version = e2[t2++], 4 !== this.version && 5 !== this.version)
          throw new Ui(`Version ${this.version} of the SKESK packet is unsupported.`);
        const r2 = e2[t2++];
        if (5 === this.version && (this.aeadAlgorithm = e2[t2++]), this.s2k = new Eo(), t2 += this.s2k.read(e2.subarray(t2, e2.length)), 5 === this.version) {
          const r3 = aa.getAEADMode(this.aeadAlgorithm);
          this.iv = e2.subarray(t2, t2 += r3.ivLength);
        }
        5 === this.version || t2 < e2.length ? (this.encrypted = e2.subarray(t2, e2.length), this.sessionKeyEncryptionAlgorithm = r2) : this.sessionKeyAlgorithm = r2;
      }
      write() {
        const e2 = null === this.encrypted ? this.sessionKeyAlgorithm : this.sessionKeyEncryptionAlgorithm;
        let t2;
        return 5 === this.version ? t2 = ce.concatUint8Array([new Uint8Array([this.version, e2, this.aeadAlgorithm]), this.s2k.write(), this.iv, this.encrypted]) : (t2 = ce.concatUint8Array([new Uint8Array([this.version, e2]), this.s2k.write()]), null !== this.encrypted && (t2 = ce.concatUint8Array([t2, this.encrypted]))), t2;
      }
      async decrypt(e2) {
        const t2 = null !== this.sessionKeyEncryptionAlgorithm ? this.sessionKeyEncryptionAlgorithm : this.sessionKeyAlgorithm, { blockSize: r2, keySize: i2 } = aa.getCipher(t2), n2 = await this.s2k.produceKey(e2, i2);
        if (5 === this.version) {
          const e3 = aa.getAEADMode(this.aeadAlgorithm), r3 = new Uint8Array([192 | Po.tag, this.version, this.sessionKeyEncryptionAlgorithm, this.aeadAlgorithm]), i3 = await e3(t2, n2);
          this.sessionKey = await i3.decrypt(this.encrypted, this.iv, r3);
        } else if (null !== this.encrypted) {
          const e3 = await aa.mode.cfb.decrypt(t2, n2, this.encrypted, new Uint8Array(r2));
          this.sessionKeyAlgorithm = me.write(me.symmetric, e3[0]), this.sessionKey = e3.subarray(1, e3.length);
        } else
          this.sessionKey = n2;
      }
      async encrypt(e2, t2 = ge) {
        const r2 = null !== this.sessionKeyEncryptionAlgorithm ? this.sessionKeyEncryptionAlgorithm : this.sessionKeyAlgorithm;
        this.sessionKeyEncryptionAlgorithm = r2, this.s2k = new Eo(t2), this.s2k.salt = await aa.random.getRandomBytes(8);
        const { blockSize: i2, keySize: n2 } = aa.getCipher(r2), a2 = await this.s2k.produceKey(e2, n2);
        if (null === this.sessionKey && (this.sessionKey = await aa.generateSessionKey(this.sessionKeyAlgorithm)), 5 === this.version) {
          const e3 = aa.getAEADMode(this.aeadAlgorithm);
          this.iv = await aa.random.getRandomBytes(e3.ivLength);
          const t3 = new Uint8Array([192 | Po.tag, this.version, this.sessionKeyEncryptionAlgorithm, this.aeadAlgorithm]), i3 = await e3(r2, a2);
          this.encrypted = await i3.encrypt(this.sessionKey, this.iv, t3);
        } else {
          const e3 = ce.concatUint8Array([new Uint8Array([this.sessionKeyAlgorithm]), this.sessionKey]);
          this.encrypted = await aa.mode.cfb.encrypt(r2, a2, e3, new Uint8Array(i2), t2);
        }
      }
    };
    var xo = class {
      static get tag() {
        return me.packet.publicKey;
      }
      constructor(e2 = new Date(), t2 = ge) {
        this.version = t2.v5Keys ? 5 : 4, this.created = ce.normalizeDate(e2), this.algorithm = null, this.publicParams = null, this.expirationTimeV3 = 0, this.fingerprint = null, this.keyID = null;
      }
      static fromSecretKeyPacket(e2) {
        const t2 = new xo(), { version: r2, created: i2, algorithm: n2, publicParams: a2, keyID: s2, fingerprint: o2 } = e2;
        return t2.version = r2, t2.created = i2, t2.algorithm = n2, t2.publicParams = a2, t2.keyID = s2, t2.fingerprint = o2, t2;
      }
      async read(e2) {
        let t2 = 0;
        if (this.version = e2[t2++], 4 === this.version || 5 === this.version) {
          this.created = ce.readDate(e2.subarray(t2, t2 + 4)), t2 += 4, this.algorithm = e2[t2++], 5 === this.version && (t2 += 4);
          const { read: r2, publicParams: i2 } = aa.parsePublicKeyParams(this.algorithm, e2.subarray(t2));
          return this.publicParams = i2, t2 += r2, await this.computeFingerprintAndKeyID(), t2;
        }
        throw new Ui(`Version ${this.version} of the key packet is unsupported.`);
      }
      write() {
        const e2 = [];
        e2.push(new Uint8Array([this.version])), e2.push(ce.writeDate(this.created)), e2.push(new Uint8Array([this.algorithm]));
        const t2 = aa.serializeParams(this.algorithm, this.publicParams);
        return 5 === this.version && e2.push(ce.writeNumber(t2.length, 4)), e2.push(t2), ce.concatUint8Array(e2);
      }
      writeForHash(e2) {
        const t2 = this.writePublicKey();
        return 5 === e2 ? ce.concatUint8Array([new Uint8Array([154]), ce.writeNumber(t2.length, 4), t2]) : ce.concatUint8Array([new Uint8Array([153]), ce.writeNumber(t2.length, 2), t2]);
      }
      isDecrypted() {
        return null;
      }
      getCreationTime() {
        return this.created;
      }
      getKeyID() {
        return this.keyID;
      }
      async computeFingerprintAndKeyID() {
        if (await this.computeFingerprint(), this.keyID = new Me(), 5 === this.version)
          this.keyID.read(this.fingerprint.subarray(0, 8));
        else {
          if (4 !== this.version)
            throw Error("Unsupported key version");
          this.keyID.read(this.fingerprint.subarray(12, 20));
        }
      }
      async computeFingerprint() {
        const e2 = this.writeForHash(this.version);
        if (5 === this.version)
          this.fingerprint = await aa.hash.sha256(e2);
        else {
          if (4 !== this.version)
            throw Error("Unsupported key version");
          this.fingerprint = await aa.hash.sha1(e2);
        }
      }
      getFingerprintBytes() {
        return this.fingerprint;
      }
      getFingerprint() {
        return ce.uint8ArrayToHex(this.getFingerprintBytes());
      }
      hasSameFingerprintAs(e2) {
        return this.version === e2.version && ce.equalsUint8Array(this.writePublicKey(), e2.writePublicKey());
      }
      getAlgorithmInfo() {
        const e2 = {};
        e2.algorithm = me.read(me.publicKey, this.algorithm);
        const t2 = this.publicParams.n || this.publicParams.p;
        return t2 ? e2.bits = ce.uint8ArrayBitLength(t2) : e2.curve = this.publicParams.oid.getName(), e2;
      }
    };
    xo.prototype.readPublicKey = xo.prototype.read, xo.prototype.writePublicKey = xo.prototype.write;
    var Mo = /* @__PURE__ */ ce.constructAllowedPackets([ro, fo, oo, ao]);
    var Co = class {
      static get tag() {
        return me.packet.symmetricallyEncryptedData;
      }
      constructor() {
        this.encrypted = null, this.packets = null;
      }
      read(e2) {
        this.encrypted = e2;
      }
      write() {
        return this.encrypted;
      }
      async decrypt(e2, t2, r2 = ge) {
        if (!r2.allowUnauthenticatedMessages)
          throw Error("Message is not authenticated.");
        const { blockSize: i2 } = aa.getCipher(e2), n2 = await ie(J(this.encrypted)), a2 = await aa.mode.cfb.decrypt(e2, t2, n2.subarray(i2 + 2), n2.subarray(2, i2 + 2));
        this.packets = await uo.fromBinary(a2, Mo, r2);
      }
      async encrypt(e2, t2, r2 = ge) {
        const i2 = this.packets.write(), { blockSize: n2 } = aa.getCipher(e2), a2 = await aa.getPrefixRandom(e2), s2 = await aa.mode.cfb.encrypt(e2, t2, a2, new Uint8Array(n2), r2), o2 = await aa.mode.cfb.encrypt(e2, t2, i2, s2.subarray(2), r2);
        this.encrypted = ce.concat([s2, o2]);
      }
    };
    var Ko = class extends xo {
      static get tag() {
        return me.packet.publicSubkey;
      }
      constructor(e2, t2) {
        super(e2, t2);
      }
      static fromSecretSubkeyPacket(e2) {
        const t2 = new Ko(), { version: r2, created: i2, algorithm: n2, publicParams: a2, keyID: s2, fingerprint: o2 } = e2;
        return t2.version = r2, t2.created = i2, t2.algorithm = n2, t2.publicParams = a2, t2.keyID = s2, t2.fingerprint = o2, t2;
      }
    };
    var Do = class {
      static get tag() {
        return me.packet.userAttribute;
      }
      constructor() {
        this.attributes = [];
      }
      read(e2) {
        let t2 = 0;
        for (; t2 < e2.length; ) {
          const r2 = Pi(e2.subarray(t2, e2.length));
          t2 += r2.offset, this.attributes.push(ce.uint8ArrayToString(e2.subarray(t2, t2 + r2.len))), t2 += r2.len;
        }
      }
      write() {
        const e2 = [];
        for (let t2 = 0; t2 < this.attributes.length; t2++)
          e2.push(xi(this.attributes[t2].length)), e2.push(ce.stringToUint8Array(this.attributes[t2]));
        return ce.concatUint8Array(e2);
      }
      equals(e2) {
        return !!(e2 && e2 instanceof Do) && this.attributes.every(function(t2, r2) {
          return t2 === e2.attributes[r2];
        });
      }
    };
    var Ro = class extends xo {
      static get tag() {
        return me.packet.secretKey;
      }
      constructor(e2 = new Date(), t2 = ge) {
        super(e2, t2), this.keyMaterial = null, this.isEncrypted = null, this.s2kUsage = 0, this.s2k = null, this.symmetric = null, this.aead = null, this.privateParams = null;
      }
      async read(e2) {
        let t2 = await this.readPublicKey(e2);
        if (this.s2kUsage = e2[t2++], 5 === this.version && t2++, 255 === this.s2kUsage || 254 === this.s2kUsage || 253 === this.s2kUsage) {
          if (this.symmetric = e2[t2++], 253 === this.s2kUsage && (this.aead = e2[t2++]), this.s2k = new Eo(), t2 += this.s2k.read(e2.subarray(t2, e2.length)), "gnu-dummy" === this.s2k.type)
            return;
        } else
          this.s2kUsage && (this.symmetric = this.s2kUsage);
        if (this.s2kUsage && (this.iv = e2.subarray(t2, t2 + aa.getCipher(this.symmetric).blockSize), t2 += this.iv.length), 5 === this.version && (t2 += 4), this.keyMaterial = e2.subarray(t2), this.isEncrypted = !!this.s2kUsage, !this.isEncrypted) {
          const e3 = this.keyMaterial.subarray(0, -2);
          if (!ce.equalsUint8Array(ce.writeChecksum(e3), this.keyMaterial.subarray(-2)))
            throw Error("Key checksum mismatch");
          try {
            const { privateParams: t3 } = aa.parsePrivateKeyParams(this.algorithm, e3, this.publicParams);
            this.privateParams = t3;
          } catch (e4) {
            if (e4 instanceof Ui)
              throw e4;
            throw Error("Error reading MPIs");
          }
        }
      }
      write() {
        const e2 = [this.writePublicKey()];
        e2.push(new Uint8Array([this.s2kUsage]));
        const t2 = [];
        return 255 !== this.s2kUsage && 254 !== this.s2kUsage && 253 !== this.s2kUsage || (t2.push(this.symmetric), 253 === this.s2kUsage && t2.push(this.aead), t2.push(...this.s2k.write())), this.s2kUsage && "gnu-dummy" !== this.s2k.type && t2.push(...this.iv), 5 === this.version && e2.push(new Uint8Array([t2.length])), e2.push(new Uint8Array(t2)), this.isDummy() || (this.s2kUsage || (this.keyMaterial = aa.serializeParams(this.algorithm, this.privateParams)), 5 === this.version && e2.push(ce.writeNumber(this.keyMaterial.length, 4)), e2.push(this.keyMaterial), this.s2kUsage || e2.push(ce.writeChecksum(this.keyMaterial))), ce.concatUint8Array(e2);
      }
      isDecrypted() {
        return false === this.isEncrypted;
      }
      isDummy() {
        return !(!this.s2k || "gnu-dummy" !== this.s2k.type);
      }
      makeDummy(e2 = ge) {
        this.isDummy() || (this.isDecrypted() && this.clearPrivateParams(), this.isEncrypted = null, this.keyMaterial = null, this.s2k = new Eo(e2), this.s2k.algorithm = 0, this.s2k.c = 0, this.s2k.type = "gnu-dummy", this.s2kUsage = 254, this.symmetric = me.symmetric.aes256);
      }
      async encrypt(e2, t2 = ge) {
        if (this.isDummy())
          return;
        if (!this.isDecrypted())
          throw Error("Key packet is already encrypted");
        if (!e2)
          throw Error("A non-empty passphrase is required for key encryption.");
        this.s2k = new Eo(t2), this.s2k.salt = await aa.random.getRandomBytes(8);
        const r2 = aa.serializeParams(this.algorithm, this.privateParams);
        this.symmetric = me.symmetric.aes256;
        const i2 = await Uo(this.s2k, e2, this.symmetric), { blockSize: n2 } = aa.getCipher(this.symmetric);
        if (this.iv = await aa.random.getRandomBytes(n2), t2.aeadProtect) {
          this.s2kUsage = 253, this.aead = me.aead.eax;
          const e3 = aa.getAEADMode(this.aead), t3 = await e3(this.symmetric, i2);
          this.keyMaterial = await t3.encrypt(r2, this.iv.subarray(0, e3.ivLength), new Uint8Array());
        } else
          this.s2kUsage = 254, this.keyMaterial = await aa.mode.cfb.encrypt(this.symmetric, i2, ce.concatUint8Array([r2, await aa.hash.sha1(r2, t2)]), this.iv, t2);
      }
      async decrypt(e2) {
        if (this.isDummy())
          return false;
        if (this.isDecrypted())
          throw Error("Key packet is already decrypted.");
        let t2, r2;
        if (254 !== this.s2kUsage && 253 !== this.s2kUsage)
          throw 255 === this.s2kUsage ? Error("Encrypted private key is authenticated using an insecure two-byte hash") : Error("Private key is encrypted using an insecure S2K function: unsalted MD5");
        if (t2 = await Uo(this.s2k, e2, this.symmetric), 253 === this.s2kUsage) {
          const e3 = aa.getAEADMode(this.aead), i2 = await e3(this.symmetric, t2);
          try {
            r2 = await i2.decrypt(this.keyMaterial, this.iv.subarray(0, e3.ivLength), new Uint8Array());
          } catch (e4) {
            if ("Authentication tag mismatch" === e4.message)
              throw Error("Incorrect key passphrase: " + e4.message);
            throw e4;
          }
        } else {
          const e3 = await aa.mode.cfb.decrypt(this.symmetric, t2, this.keyMaterial, this.iv);
          r2 = e3.subarray(0, -20);
          const i2 = await aa.hash.sha1(r2);
          if (!ce.equalsUint8Array(i2, e3.subarray(-20)))
            throw Error("Incorrect key passphrase");
        }
        try {
          const { privateParams: e3 } = aa.parsePrivateKeyParams(this.algorithm, r2, this.publicParams);
          this.privateParams = e3;
        } catch (e3) {
          throw Error("Error reading MPIs");
        }
        this.isEncrypted = false, this.keyMaterial = null, this.s2kUsage = 0;
      }
      async validate() {
        if (this.isDummy())
          return;
        if (!this.isDecrypted())
          throw Error("Key is not decrypted");
        let e2;
        try {
          e2 = await aa.validateParams(this.algorithm, this.publicParams, this.privateParams);
        } catch (t2) {
          e2 = false;
        }
        if (!e2)
          throw Error("Key is invalid");
      }
      async generate(e2, t2) {
        const { privateParams: r2, publicParams: i2 } = await aa.generateParams(this.algorithm, e2, t2);
        this.privateParams = r2, this.publicParams = i2, this.isEncrypted = false;
      }
      clearPrivateParams() {
        this.isDummy() || (Object.keys(this.privateParams).forEach((e2) => {
          this.privateParams[e2].fill(0), delete this.privateParams[e2];
        }), this.privateParams = null, this.isEncrypted = true);
      }
    };
    async function Uo(e2, t2, r2) {
      const { keySize: i2 } = aa.getCipher(r2);
      return e2.produceKey(t2, i2);
    }
    var Io = bt(function(e2) {
      !function(t2) {
        function r2(e3) {
          function t3() {
            return Ae2 < Se2;
          }
          function r3() {
            return Ae2;
          }
          function n2(e4) {
            Ae2 = e4;
          }
          function a2() {
            Ae2 = 0, Se2 = ke2.length;
          }
          function s2(e4, t4) {
            return { name: e4, tokens: t4 || "", semantic: t4 || "", children: [] };
          }
          function o2(e4, t4) {
            var r4;
            return null === t4 ? null : ((r4 = s2(e4)).tokens = t4.tokens, r4.semantic = t4.semantic, r4.children.push(t4), r4);
          }
          function c2(e4, t4) {
            return null !== t4 && (e4.tokens += t4.tokens, e4.semantic += t4.semantic), e4.children.push(t4), e4;
          }
          function u2(e4) {
            var r4;
            return t3() && e4(r4 = ke2[Ae2]) ? (Ae2 += 1, s2("token", r4)) : null;
          }
          function h2(e4) {
            return function() {
              return o2("literal", u2(function(t4) {
                return t4 === e4;
              }));
            };
          }
          function f2() {
            var e4 = arguments;
            return function() {
              var t4, i3, a3, o3;
              for (o3 = r3(), i3 = s2("and"), t4 = 0; t4 < e4.length; t4 += 1) {
                if (null === (a3 = e4[t4]()))
                  return n2(o3), null;
                c2(i3, a3);
              }
              return i3;
            };
          }
          function d2() {
            var e4 = arguments;
            return function() {
              var t4, i3, a3;
              for (a3 = r3(), t4 = 0; t4 < e4.length; t4 += 1) {
                if (null !== (i3 = e4[t4]()))
                  return i3;
                n2(a3);
              }
              return null;
            };
          }
          function l2(e4) {
            return function() {
              var t4, i3;
              return i3 = r3(), null !== (t4 = e4()) ? t4 : (n2(i3), s2("opt"));
            };
          }
          function p2(e4) {
            return function() {
              var t4 = e4();
              return null !== t4 && (t4.semantic = ""), t4;
            };
          }
          function y2(e4) {
            return function() {
              var t4 = e4();
              return null !== t4 && t4.semantic.length > 0 && (t4.semantic = " "), t4;
            };
          }
          function b2(e4, t4) {
            return function() {
              var i3, a3, o3, u3, h3;
              for (u3 = r3(), i3 = s2("star"), o3 = 0, h3 = void 0 === t4 ? 0 : t4; null !== (a3 = e4()); )
                o3 += 1, c2(i3, a3);
              return o3 >= h3 ? i3 : (n2(u3), null);
            };
          }
          function m2(e4) {
            return e4.charCodeAt(0) >= 128;
          }
          function g2() {
            return o2("cr", h2("\r")());
          }
          function w2() {
            return o2("crlf", f2(g2, k2)());
          }
          function v2() {
            return o2("dquote", h2('"')());
          }
          function _2() {
            return o2("htab", h2("	")());
          }
          function k2() {
            return o2("lf", h2("\n")());
          }
          function A2() {
            return o2("sp", h2(" ")());
          }
          function S2() {
            return o2("vchar", u2(function(t4) {
              var r4 = t4.charCodeAt(0), i3 = 33 <= r4 && r4 <= 126;
              return e3.rfc6532 && (i3 = i3 || m2(t4)), i3;
            }));
          }
          function E2() {
            return o2("wsp", d2(A2, _2)());
          }
          function P2() {
            var e4 = o2("quoted-pair", d2(f2(h2("\\"), d2(S2, E2)), ie2)());
            return null === e4 ? null : (e4.semantic = e4.semantic[1], e4);
          }
          function x2() {
            return o2("fws", d2(ae2, f2(l2(f2(b2(E2), p2(w2))), b2(E2, 1)))());
          }
          function M2() {
            return o2("ctext", d2(function() {
              return u2(function(t4) {
                var r4 = t4.charCodeAt(0), i3 = 33 <= r4 && r4 <= 39 || 42 <= r4 && r4 <= 91 || 93 <= r4 && r4 <= 126;
                return e3.rfc6532 && (i3 = i3 || m2(t4)), i3;
              });
            }, te2)());
          }
          function C2() {
            return o2("ccontent", d2(M2, P2, K2)());
          }
          function K2() {
            return o2("comment", f2(h2("("), b2(f2(l2(x2), C2)), l2(x2), h2(")"))());
          }
          function D2() {
            return o2("cfws", d2(f2(b2(f2(l2(x2), K2), 1), l2(x2)), x2)());
          }
          function R2() {
            return o2("atext", u2(function(t4) {
              var r4 = "a" <= t4 && t4 <= "z" || "A" <= t4 && t4 <= "Z" || "0" <= t4 && t4 <= "9" || ["!", "#", "$", "%", "&", "'", "*", "+", "-", "/", "=", "?", "^", "_", "`", "{", "|", "}", "~"].indexOf(t4) >= 0;
              return e3.rfc6532 && (r4 = r4 || m2(t4)), r4;
            }));
          }
          function U2() {
            return o2("atom", f2(y2(l2(D2)), b2(R2, 1), y2(l2(D2)))());
          }
          function I2() {
            var e4, t4;
            return null === (e4 = o2("dot-atom-text", b2(R2, 1)())) || null !== (t4 = b2(f2(h2("."), b2(R2, 1)))()) && c2(e4, t4), e4;
          }
          function B2() {
            return o2("dot-atom", f2(p2(l2(D2)), I2, p2(l2(D2)))());
          }
          function T2() {
            return o2("qtext", d2(function() {
              return u2(function(t4) {
                var r4 = t4.charCodeAt(0), i3 = 33 === r4 || 35 <= r4 && r4 <= 91 || 93 <= r4 && r4 <= 126;
                return e3.rfc6532 && (i3 = i3 || m2(t4)), i3;
              });
            }, re2)());
          }
          function z2() {
            return o2("qcontent", d2(T2, P2)());
          }
          function q2() {
            return o2("quoted-string", f2(p2(l2(D2)), p2(v2), b2(f2(l2(y2(x2)), z2)), l2(p2(x2)), p2(v2), p2(l2(D2)))());
          }
          function O2() {
            return o2("word", d2(U2, q2)());
          }
          function F2() {
            return o2("address", d2(N2, W2)());
          }
          function N2() {
            return o2("mailbox", d2(j2, J2)());
          }
          function j2() {
            return o2("name-addr", f2(l2(H2), L2)());
          }
          function L2() {
            return o2("angle-addr", d2(f2(p2(l2(D2)), h2("<"), J2, h2(">"), p2(l2(D2))), se2)());
          }
          function W2() {
            return o2("group", f2(H2, h2(":"), l2($2), h2(";"), p2(l2(D2)))());
          }
          function H2() {
            return o2("display-name", (null !== (e4 = o2("phrase", d2(ne2, b2(O2, 1))())) && (e4.semantic = function(e5) {
              return e5.replace(/([ \t]|\r\n)+/g, " ").replace(/^\s*/, "").replace(/\s*$/, "");
            }(e4.semantic)), e4));
            var e4;
          }
          function G2() {
            return o2("mailbox-list", d2(f2(N2, b2(f2(h2(","), N2))), ue2)());
          }
          function V2() {
            return o2("address-list", d2(f2(F2, b2(f2(h2(","), F2))), he2)());
          }
          function $2() {
            return o2("group-list", d2(G2, p2(D2), fe2)());
          }
          function Z2() {
            return o2("local-part", d2(de2, B2, q2)());
          }
          function Y2() {
            return o2("dtext", d2(function() {
              return u2(function(t4) {
                var r4 = t4.charCodeAt(0), i3 = 33 <= r4 && r4 <= 90 || 94 <= r4 && r4 <= 126;
                return e3.rfc6532 && (i3 = i3 || m2(t4)), i3;
              });
            }, pe2)());
          }
          function X2() {
            return o2("domain-literal", f2(p2(l2(D2)), h2("["), b2(f2(l2(x2), Y2)), l2(x2), h2("]"), p2(l2(D2)))());
          }
          function Q2() {
            return o2("domain", (t4 = d2(le2, B2, X2)(), e3.rejectTLD && t4 && t4.semantic && t4.semantic.indexOf(".") < 0 ? null : (t4 && (t4.semantic = t4.semantic.replace(/\s+/g, "")), t4)));
            var t4;
          }
          function J2() {
            return o2("addr-spec", f2(Z2, h2("@"), Q2)());
          }
          function ee2() {
            return e3.strict ? null : o2("obs-NO-WS-CTL", u2(function(e4) {
              var t4 = e4.charCodeAt(0);
              return 1 <= t4 && t4 <= 8 || 11 === t4 || 12 === t4 || 14 <= t4 && t4 <= 31 || 127 === t4;
            }));
          }
          function te2() {
            return e3.strict ? null : o2("obs-ctext", ee2());
          }
          function re2() {
            return e3.strict ? null : o2("obs-qtext", ee2());
          }
          function ie2() {
            return e3.strict ? null : o2("obs-qp", f2(h2("\\"), d2(h2("\0"), ee2, k2, g2))());
          }
          function ne2() {
            return e3.strict ? null : e3.atInDisplayName ? o2("obs-phrase", f2(O2, b2(d2(O2, h2("."), h2("@"), y2(D2))))()) : o2("obs-phrase", f2(O2, b2(d2(O2, h2("."), y2(D2))))());
          }
          function ae2() {
            return e3.strict ? null : o2("obs-FWS", b2(f2(p2(l2(w2)), E2), 1)());
          }
          function se2() {
            return e3.strict ? null : o2("obs-angle-addr", f2(p2(l2(D2)), h2("<"), oe2, J2, h2(">"), p2(l2(D2)))());
          }
          function oe2() {
            return e3.strict ? null : o2("obs-route", f2(ce2, h2(":"))());
          }
          function ce2() {
            return e3.strict ? null : o2("obs-domain-list", f2(b2(d2(p2(D2), h2(","))), h2("@"), Q2, b2(f2(h2(","), p2(l2(D2)), l2(f2(h2("@"), Q2)))))());
          }
          function ue2() {
            return e3.strict ? null : o2("obs-mbox-list", f2(b2(f2(p2(l2(D2)), h2(","))), N2, b2(f2(h2(","), l2(f2(N2, p2(D2))))))());
          }
          function he2() {
            return e3.strict ? null : o2("obs-addr-list", f2(b2(f2(p2(l2(D2)), h2(","))), F2, b2(f2(h2(","), l2(f2(F2, p2(D2))))))());
          }
          function fe2() {
            return e3.strict ? null : o2("obs-group-list", f2(b2(f2(p2(l2(D2)), h2(",")), 1), p2(l2(D2)))());
          }
          function de2() {
            return e3.strict ? null : o2("obs-local-part", f2(O2, b2(f2(h2("."), O2)))());
          }
          function le2() {
            return e3.strict ? null : o2("obs-domain", f2(U2, b2(f2(h2("."), U2)))());
          }
          function pe2() {
            return e3.strict ? null : o2("obs-dtext", d2(ee2, P2)());
          }
          function ye2(e4, t4) {
            var r4, i3, n3;
            if (null == t4)
              return null;
            for (i3 = [t4]; i3.length > 0; ) {
              if ((n3 = i3.pop()).name === e4)
                return n3;
              for (r4 = n3.children.length - 1; r4 >= 0; r4 -= 1)
                i3.push(n3.children[r4]);
            }
            return null;
          }
          function be2(e4, t4) {
            var r4, i3, n3, a3, s3;
            if (null == t4)
              return null;
            for (i3 = [t4], a3 = [], s3 = {}, r4 = 0; r4 < e4.length; r4 += 1)
              s3[e4[r4]] = true;
            for (; i3.length > 0; )
              if ((n3 = i3.pop()).name in s3)
                a3.push(n3);
              else
                for (r4 = n3.children.length - 1; r4 >= 0; r4 -= 1)
                  i3.push(n3.children[r4]);
            return a3;
          }
          function me2(t4) {
            var r4, i3, n3, a3, s3;
            if (null === t4)
              return null;
            for (r4 = [], i3 = be2(["group", "mailbox"], t4), n3 = 0; n3 < i3.length; n3 += 1)
              "group" === (a3 = i3[n3]).name ? r4.push(ge2(a3)) : "mailbox" === a3.name && r4.push(we2(a3));
            return s3 = { ast: t4, addresses: r4 }, e3.simple && (s3 = function(e4) {
              var t5;
              if (e4 && e4.addresses)
                for (t5 = 0; t5 < e4.addresses.length; t5 += 1)
                  delete e4.addresses[t5].node;
              return e4;
            }(s3)), e3.oneResult ? function(t5) {
              if (!t5)
                return null;
              if (!e3.partial && t5.addresses.length > 1)
                return null;
              return t5.addresses && t5.addresses[0];
            }(s3) : e3.simple ? s3 && s3.addresses : s3;
          }
          function ge2(e4) {
            var t4, r4 = ye2("display-name", e4), i3 = [], n3 = be2(["mailbox"], e4);
            for (t4 = 0; t4 < n3.length; t4 += 1)
              i3.push(we2(n3[t4]));
            return { node: e4, parts: { name: r4 }, type: e4.name, name: ve2(r4), addresses: i3 };
          }
          function we2(e4) {
            var t4 = ye2("display-name", e4), r4 = ye2("addr-spec", e4), i3 = function(e5, t5) {
              var r5, i4, n4, a4;
              if (null == t5)
                return null;
              for (i4 = [t5], a4 = []; i4.length > 0; )
                for ((n4 = i4.pop()).name === e5 && a4.push(n4), r5 = n4.children.length - 1; r5 >= 0; r5 -= 1)
                  i4.push(n4.children[r5]);
              return a4;
            }("cfws", e4), n3 = be2(["comment"], e4), a3 = ye2("local-part", r4), s3 = ye2("domain", r4);
            return { node: e4, parts: { name: t4, address: r4, local: a3, domain: s3, comments: i3 }, type: e4.name, name: ve2(t4), address: ve2(r4), local: ve2(a3), domain: ve2(s3), comments: _e2(n3), groupName: ve2(e4.groupName) };
          }
          function ve2(e4) {
            return null != e4 ? e4.semantic : null;
          }
          function _e2(e4) {
            var t4 = "";
            if (e4)
              for (var r4 = 0; r4 < e4.length; r4 += 1)
                t4 += ve2(e4[r4]);
            return t4;
          }
          var ke2, Ae2, Se2, Ee2, Pe2;
          if (null === (e3 = i2(e3, {})))
            return null;
          if (ke2 = e3.input, Pe2 = { address: F2, "address-list": V2, "angle-addr": L2, from: function() {
            return o2("from", d2(G2, V2)());
          }, group: W2, mailbox: N2, "mailbox-list": G2, "reply-to": function() {
            return o2("reply-to", V2());
          }, sender: function() {
            return o2("sender", d2(N2, F2)());
          } }[e3.startAt] || V2, !e3.strict) {
            if (a2(), e3.strict = true, Ee2 = Pe2(ke2), e3.partial || !t3())
              return me2(Ee2);
            e3.strict = false;
          }
          return a2(), Ee2 = Pe2(ke2), !e3.partial && t3() ? null : me2(Ee2);
        }
        function i2(e3, t3) {
          function r3(e4) {
            return "[object String]" === Object.prototype.toString.call(e4);
          }
          function i3(e4) {
            return null == e4;
          }
          var n2, a2;
          if (r3(e3))
            e3 = { input: e3 };
          else if (!function(e4) {
            return e4 === Object(e4);
          }(e3))
            return null;
          if (!r3(e3.input))
            return null;
          if (!t3)
            return null;
          for (a2 in n2 = { oneResult: false, partial: false, rejectTLD: false, rfc6532: false, simple: false, startAt: "address-list", strict: false, atInDisplayName: false })
            i3(e3[a2]) && (e3[a2] = i3(t3[a2]) ? n2[a2] : t3[a2]);
          return e3;
        }
        r2.parseOneAddress = function(e3) {
          return r2(i2(e3, { oneResult: true, rfc6532: true, simple: true, startAt: "address-list" }));
        }, r2.parseAddressList = function(e3) {
          return r2(i2(e3, { rfc6532: true, simple: true, startAt: "address-list" }));
        }, r2.parseFrom = function(e3) {
          return r2(i2(e3, { rfc6532: true, simple: true, startAt: "from" }));
        }, r2.parseSender = function(e3) {
          return r2(i2(e3, { oneResult: true, rfc6532: true, simple: true, startAt: "sender" }));
        }, r2.parseReplyTo = function(e3) {
          return r2(i2(e3, { rfc6532: true, simple: true, startAt: "reply-to" }));
        }, e2.exports = r2;
      }();
    });
    var Bo = class {
      static get tag() {
        return me.packet.userID;
      }
      constructor() {
        this.userID = "", this.name = "", this.email = "", this.comment = "";
      }
      static fromObject(e2) {
        if (ce.isString(e2) || e2.name && !ce.isString(e2.name) || e2.email && !ce.isEmailAddress(e2.email) || e2.comment && !ce.isString(e2.comment))
          throw Error("Invalid user ID format");
        const t2 = new Bo();
        Object.assign(t2, e2);
        const r2 = [];
        return t2.name && r2.push(t2.name), t2.comment && r2.push(`(${t2.comment})`), t2.email && r2.push(`<${t2.email}>`), t2.userID = r2.join(" "), t2;
      }
      read(e2, t2 = ge) {
        const r2 = ce.decodeUTF8(e2);
        if (r2.length > t2.maxUserIDLength)
          throw Error("User ID string is too long");
        try {
          const { name: e3, address: t3, comments: i2 } = Io.parseOneAddress({ input: r2, atInDisplayName: true });
          this.comment = i2.replace(/^\(|\)$/g, ""), this.name = e3, this.email = t3;
        } catch (e3) {
        }
        this.userID = r2;
      }
      write() {
        return ce.encodeUTF8(this.userID);
      }
      equals(e2) {
        return e2 && e2.userID === this.userID;
      }
    };
    var To = class extends Ro {
      static get tag() {
        return me.packet.secretSubkey;
      }
      constructor(e2 = new Date(), t2 = ge) {
        super(e2, t2);
      }
    };
    var zo = /* @__PURE__ */ ce.constructAllowedPackets([ao]);
    var qo = class {
      constructor(e2) {
        this.packets = e2 || new uo();
      }
      write() {
        return this.packets.write();
      }
      armor(e2 = ge) {
        return xe(me.armor.signature, this.write(), void 0, void 0, void 0, e2);
      }
      getSigningKeyIDs() {
        return this.packets.map((e2) => e2.issuerKeyID);
      }
    };
    async function Oo(e2, t2) {
      const r2 = new To(e2.date, t2);
      return r2.packets = null, r2.algorithm = me.write(me.publicKey, e2.algorithm), await r2.generate(e2.rsaBits, e2.curve), await r2.computeFingerprintAndKeyID(), r2;
    }
    async function Fo(e2, t2) {
      const r2 = new Ro(e2.date, t2);
      return r2.packets = null, r2.algorithm = me.write(me.publicKey, e2.algorithm), await r2.generate(e2.rsaBits, e2.curve, e2.config), await r2.computeFingerprintAndKeyID(), r2;
    }
    async function No(e2, t2, r2, i2, n2 = new Date(), a2) {
      let s2, o2;
      for (let c2 = e2.length - 1; c2 >= 0; c2--)
        try {
          (!s2 || e2[c2].created >= s2.created) && (await e2[c2].verify(t2, r2, i2, n2, void 0, a2), s2 = e2[c2]);
        } catch (e3) {
          o2 = e3;
        }
      if (!s2)
        throw ce.wrapError(`Could not find valid ${me.read(me.signature, r2)} signature in key ${t2.getKeyID().toHex()}`.replace("certGeneric ", "self-").replace(/([a-z])([A-Z])/g, (e3, t3, r3) => t3 + " " + r3.toLowerCase()), o2);
      return s2;
    }
    function jo(e2, t2, r2 = new Date()) {
      const i2 = ce.normalizeDate(r2);
      if (null !== i2) {
        const r3 = Zo(e2, t2);
        return !(e2.created <= i2 && i2 < r3);
      }
      return false;
    }
    async function Lo(e2, t2, r2, i2) {
      const n2 = {};
      n2.key = t2, n2.bind = e2;
      const a2 = new ao();
      return a2.signatureType = me.signature.subkeyBinding, a2.publicKeyAlgorithm = t2.algorithm, a2.hashAlgorithm = await Wo(null, e2, void 0, void 0, i2), r2.sign ? (a2.keyFlags = [me.keyFlags.signData], a2.embeddedSignature = await Go(n2, null, e2, { signatureType: me.signature.keyBinding }, r2.date, void 0, void 0, i2)) : a2.keyFlags = [me.keyFlags.encryptCommunication | me.keyFlags.encryptStorage], r2.keyExpirationTime > 0 && (a2.keyExpirationTime = r2.keyExpirationTime, a2.keyNeverExpires = false), await a2.sign(t2, n2, r2.date), a2;
    }
    async function Wo(e2, t2, r2 = new Date(), i2 = {}, n2) {
      let a2 = n2.preferredHashAlgorithm, s2 = a2;
      if (e2) {
        const t3 = await e2.getPrimaryUser(r2, i2, n2);
        t3.selfCertification.preferredHashAlgorithms && ([s2] = t3.selfCertification.preferredHashAlgorithms, a2 = aa.hash.getHashByteLength(a2) <= aa.hash.getHashByteLength(s2) ? s2 : a2);
      }
      switch (Object.getPrototypeOf(t2)) {
        case Ro.prototype:
        case xo.prototype:
        case To.prototype:
        case Ko.prototype:
          switch (t2.algorithm) {
            case me.publicKey.ecdh:
            case me.publicKey.ecdsa:
            case me.publicKey.eddsa:
              s2 = aa.publicKey.elliptic.getPreferredHashAlgo(t2.publicParams.oid);
          }
      }
      return aa.hash.getHashByteLength(a2) <= aa.hash.getHashByteLength(s2) ? s2 : a2;
    }
    async function Ho(e2, t2 = [], r2 = new Date(), i2 = [], n2 = ge) {
      const a2 = { symmetric: me.symmetric.aes128, aead: me.aead.eax, compression: me.compression.uncompressed }[e2], s2 = { symmetric: n2.preferredSymmetricAlgorithm, aead: n2.preferredAEADAlgorithm, compression: n2.preferredCompressionAlgorithm }[e2], o2 = { symmetric: "preferredSymmetricAlgorithms", aead: "preferredAEADAlgorithms", compression: "preferredCompressionAlgorithms" }[e2];
      return (await Promise.all(t2.map(async function(e3, t3) {
        const a3 = (await e3.getPrimaryUser(r2, i2[t3], n2)).selfCertification[o2];
        return !!a3 && a3.indexOf(s2) >= 0;
      }))).every(Boolean) ? s2 : a2;
    }
    async function Go(e2, t2, r2, i2, n2, a2, s2 = false, o2) {
      if (r2.isDummy())
        throw Error("Cannot sign with a gnu-dummy key.");
      if (!r2.isDecrypted())
        throw Error("Signing key is not decrypted.");
      const c2 = new ao();
      return Object.assign(c2, i2), c2.publicKeyAlgorithm = r2.algorithm, c2.hashAlgorithm = await Wo(t2, r2, n2, a2, o2), await c2.sign(r2, e2, n2, s2), c2;
    }
    async function Vo(e2, t2, r2, i2 = new Date(), n2) {
      (e2 = e2[r2]) && (t2[r2].length ? await Promise.all(e2.map(async function(e3) {
        e3.isExpired(i2) || n2 && !await n2(e3) || t2[r2].some(function(t3) {
          return ce.equalsUint8Array(t3.writeParams(), e3.writeParams());
        }) || t2[r2].push(e3);
      })) : t2[r2] = e2);
    }
    async function $o(e2, t2, r2, i2, n2, a2, s2 = new Date(), o2) {
      a2 = a2 || e2;
      const c2 = [];
      return await Promise.all(i2.map(async function(e3) {
        try {
          n2 && !e3.issuerKeyID.equals(n2.issuerKeyID) || (await e3.verify(a2, t2, r2, o2.revocationsExpire ? s2 : null, false, o2), c2.push(e3.issuerKeyID));
        } catch (e4) {
        }
      })), n2 ? (n2.revoked = !!c2.some((e3) => e3.equals(n2.issuerKeyID)) || (n2.revoked || false), n2.revoked) : c2.length > 0;
    }
    function Zo(e2, t2) {
      let r2;
      return false === t2.keyNeverExpires && (r2 = e2.created.getTime() + 1e3 * t2.keyExpirationTime), r2 ? new Date(r2) : 1 / 0;
    }
    function Yo(e2, t2 = {}) {
      switch (e2.type = e2.type || t2.type, e2.curve = e2.curve || t2.curve, e2.rsaBits = e2.rsaBits || t2.rsaBits, e2.keyExpirationTime = void 0 !== e2.keyExpirationTime ? e2.keyExpirationTime : t2.keyExpirationTime, e2.passphrase = ce.isString(e2.passphrase) ? e2.passphrase : t2.passphrase, e2.date = e2.date || t2.date, e2.sign = e2.sign || false, e2.type) {
        case "ecc":
          try {
            e2.curve = me.write(me.curve, e2.curve);
          } catch (e3) {
            throw Error("Unknown curve");
          }
          e2.curve !== me.curve.ed25519 && e2.curve !== me.curve.curve25519 || (e2.curve = e2.sign ? me.curve.ed25519 : me.curve.curve25519), e2.sign ? e2.algorithm = e2.curve === me.curve.ed25519 ? me.publicKey.eddsa : me.publicKey.ecdsa : e2.algorithm = me.publicKey.ecdh;
          break;
        case "rsa":
          e2.algorithm = me.publicKey.rsaEncryptSign;
          break;
        default:
          throw Error("Unsupported key type " + e2.type);
      }
      return e2;
    }
    function Xo(e2, t2) {
      const r2 = e2.algorithm;
      return r2 !== me.publicKey.rsaEncrypt && r2 !== me.publicKey.elgamal && r2 !== me.publicKey.ecdh && (!t2.keyFlags || 0 != (t2.keyFlags[0] & me.keyFlags.signData));
    }
    function Qo(e2, t2) {
      const r2 = e2.algorithm;
      return r2 !== me.publicKey.dsa && r2 !== me.publicKey.rsaSign && r2 !== me.publicKey.ecdsa && r2 !== me.publicKey.eddsa && (!t2.keyFlags || 0 != (t2.keyFlags[0] & me.keyFlags.encryptCommunication) || 0 != (t2.keyFlags[0] & me.keyFlags.encryptStorage));
    }
    function Jo(e2, t2) {
      return !!t2.allowInsecureDecryptionWithSigningKeys || (!e2.keyFlags || 0 != (e2.keyFlags[0] & me.keyFlags.encryptCommunication) || 0 != (e2.keyFlags[0] & me.keyFlags.encryptStorage));
    }
    function ec(e2, t2) {
      const r2 = me.write(me.publicKey, e2.algorithm), i2 = e2.getAlgorithmInfo();
      if (t2.rejectPublicKeyAlgorithms.has(r2))
        throw Error(i2.algorithm + " keys are considered too weak.");
      switch (r2) {
        case me.publicKey.rsaEncryptSign:
        case me.publicKey.rsaSign:
        case me.publicKey.rsaEncrypt:
          if (i2.bits < t2.minRSABits)
            throw Error(`RSA keys shorter than ${t2.minRSABits} bits are considered too weak.`);
          break;
        case me.publicKey.ecdsa:
        case me.publicKey.eddsa:
        case me.publicKey.ecdh:
          if (t2.rejectCurves.has(i2.curve))
            throw Error(`Support for ${i2.algorithm} keys using curve ${i2.curve} is disabled.`);
      }
    }
    var tc = class {
      constructor(e2, t2) {
        this.userID = e2.constructor.tag === me.packet.userID ? e2 : null, this.userAttribute = e2.constructor.tag === me.packet.userAttribute ? e2 : null, this.selfCertifications = [], this.otherCertifications = [], this.revocationSignatures = [], this.mainKey = t2;
      }
      toPacketList() {
        const e2 = new uo();
        return e2.push(this.userID || this.userAttribute), e2.push(...this.revocationSignatures), e2.push(...this.selfCertifications), e2.push(...this.otherCertifications), e2;
      }
      clone() {
        const e2 = new tc(this.userID || this.userAttribute, this.mainKey);
        return e2.selfCertifications = [...this.selfCertifications], e2.otherCertifications = [...this.otherCertifications], e2.revocationSignatures = [...this.revocationSignatures], e2;
      }
      async certify(e2, t2, r2) {
        const i2 = this.mainKey.keyPacket, n2 = { userID: this.userID, userAttribute: this.userAttribute, key: i2 }, a2 = new tc(n2.userID || n2.userAttribute, this.mainKey);
        return a2.otherCertifications = await Promise.all(e2.map(async function(e3) {
          if (!e3.isPrivate())
            throw Error("Need private key for signing");
          if (e3.hasSameFingerprintAs(i2))
            throw Error("The user's own key can only be used for self-certifications");
          const a3 = await e3.getSigningKey(void 0, t2, void 0, r2);
          return Go(n2, e3, a3.keyPacket, { signatureType: me.signature.certGeneric, keyFlags: [me.keyFlags.certifyKeys | me.keyFlags.signData] }, t2, void 0, void 0, r2);
        })), await a2.update(this, t2, r2), a2;
      }
      async isRevoked(e2, t2, r2 = new Date(), i2) {
        const n2 = this.mainKey.keyPacket;
        return $o(n2, me.signature.certRevocation, { key: n2, userID: this.userID, userAttribute: this.userAttribute }, this.revocationSignatures, e2, t2, r2, i2);
      }
      async verifyCertificate(e2, t2, r2 = new Date(), i2) {
        const n2 = this, a2 = this.mainKey.keyPacket, s2 = { userID: this.userID, userAttribute: this.userAttribute, key: a2 }, { issuerKeyID: o2 } = e2, c2 = t2.filter((e3) => e3.getKeys(o2).length > 0);
        return 0 === c2.length ? null : (await Promise.all(c2.map(async (t3) => {
          const a3 = await t3.getSigningKey(o2, e2.created, void 0, i2);
          if (e2.revoked || await n2.isRevoked(e2, a3.keyPacket, r2, i2))
            throw Error("User certificate is revoked");
          try {
            await e2.verify(a3.keyPacket, me.signature.certGeneric, s2, r2, void 0, i2);
          } catch (e3) {
            throw ce.wrapError("User certificate is invalid", e3);
          }
        })), true);
      }
      async verifyAllCertifications(e2, t2 = new Date(), r2) {
        const i2 = this, n2 = this.selfCertifications.concat(this.otherCertifications);
        return Promise.all(n2.map(async (n3) => ({ keyID: n3.issuerKeyID, valid: await i2.verifyCertificate(n3, e2, t2, r2).catch(() => false) })));
      }
      async verify(e2 = new Date(), t2) {
        if (!this.selfCertifications.length)
          throw Error("No self-certifications found");
        const r2 = this, i2 = this.mainKey.keyPacket, n2 = { userID: this.userID, userAttribute: this.userAttribute, key: i2 };
        let a2;
        for (let s2 = this.selfCertifications.length - 1; s2 >= 0; s2--)
          try {
            const a3 = this.selfCertifications[s2];
            if (a3.revoked || await r2.isRevoked(a3, void 0, e2, t2))
              throw Error("Self-certification is revoked");
            try {
              await a3.verify(i2, me.signature.certGeneric, n2, e2, void 0, t2);
            } catch (e3) {
              throw ce.wrapError("Self-certification is invalid", e3);
            }
            return true;
          } catch (e3) {
            a2 = e3;
          }
        throw a2;
      }
      async update(e2, t2, r2) {
        const i2 = this.mainKey.keyPacket, n2 = { userID: this.userID, userAttribute: this.userAttribute, key: i2 };
        await Vo(e2, this, "selfCertifications", t2, async function(e3) {
          try {
            return await e3.verify(i2, me.signature.certGeneric, n2, t2, false, r2), true;
          } catch (e4) {
            return false;
          }
        }), await Vo(e2, this, "otherCertifications", t2), await Vo(e2, this, "revocationSignatures", t2, function(e3) {
          return $o(i2, me.signature.certRevocation, n2, [e3], void 0, void 0, t2, r2);
        });
      }
    };
    var rc = class {
      constructor(e2, t2) {
        this.keyPacket = e2, this.bindingSignatures = [], this.revocationSignatures = [], this.mainKey = t2;
      }
      toPacketList() {
        const e2 = new uo();
        return e2.push(this.keyPacket), e2.push(...this.revocationSignatures), e2.push(...this.bindingSignatures), e2;
      }
      clone() {
        const e2 = new rc(this.keyPacket, this.mainKey);
        return e2.bindingSignatures = [...this.bindingSignatures], e2.revocationSignatures = [...this.revocationSignatures], e2;
      }
      async isRevoked(e2, t2, r2 = new Date(), i2 = ge) {
        const n2 = this.mainKey.keyPacket;
        return $o(n2, me.signature.subkeyRevocation, { key: n2, bind: this.keyPacket }, this.revocationSignatures, e2, t2, r2, i2);
      }
      async verify(e2 = new Date(), t2 = ge) {
        const r2 = this.mainKey.keyPacket, i2 = { key: r2, bind: this.keyPacket }, n2 = await No(this.bindingSignatures, r2, me.signature.subkeyBinding, i2, e2, t2);
        if (n2.revoked || await this.isRevoked(n2, null, e2, t2))
          throw Error("Subkey is revoked");
        if (jo(this.keyPacket, n2, e2))
          throw Error("Subkey is expired");
        return n2;
      }
      async getExpirationTime(e2 = new Date(), t2 = ge) {
        const r2 = this.mainKey.keyPacket, i2 = { key: r2, bind: this.keyPacket };
        let n2;
        try {
          n2 = await No(this.bindingSignatures, r2, me.signature.subkeyBinding, i2, e2, t2);
        } catch (e3) {
          return null;
        }
        const a2 = Zo(this.keyPacket, n2), s2 = n2.getExpirationTime();
        return a2 < s2 ? a2 : s2;
      }
      async update(e2, t2 = new Date(), r2 = ge) {
        const i2 = this.mainKey.keyPacket;
        if (!this.hasSameFingerprintAs(e2))
          throw Error("Subkey update method: fingerprints of subkeys not equal");
        this.keyPacket.constructor.tag === me.packet.publicSubkey && e2.keyPacket.constructor.tag === me.packet.secretSubkey && (this.keyPacket = e2.keyPacket);
        const n2 = this, a2 = { key: i2, bind: n2.keyPacket };
        await Vo(e2, this, "bindingSignatures", t2, async function(e3) {
          for (let t3 = 0; t3 < n2.bindingSignatures.length; t3++)
            if (n2.bindingSignatures[t3].issuerKeyID.equals(e3.issuerKeyID))
              return e3.created > n2.bindingSignatures[t3].created && (n2.bindingSignatures[t3] = e3), false;
          try {
            return await e3.verify(i2, me.signature.subkeyBinding, a2, t2, void 0, r2), true;
          } catch (e4) {
            return false;
          }
        }), await Vo(e2, this, "revocationSignatures", t2, function(e3) {
          return $o(i2, me.signature.subkeyRevocation, a2, [e3], void 0, void 0, t2, r2);
        });
      }
      async revoke(e2, { flag: t2 = me.reasonForRevocation.noReason, string: r2 = "" } = {}, i2 = new Date(), n2 = ge) {
        const a2 = { key: e2, bind: this.keyPacket }, s2 = new rc(this.keyPacket, this.mainKey);
        return s2.revocationSignatures.push(await Go(a2, null, e2, { signatureType: me.signature.subkeyRevocation, reasonForRevocationFlag: me.write(me.reasonForRevocation, t2), reasonForRevocationString: r2 }, i2, void 0, false, n2)), await s2.update(this), s2;
      }
      hasSameFingerprintAs(e2) {
        return this.keyPacket.hasSameFingerprintAs(e2.keyPacket || e2);
      }
    };
    ["getKeyID", "getFingerprint", "getAlgorithmInfo", "getCreationTime", "isDecrypted"].forEach((e2) => {
      rc.prototype[e2] = function() {
        return this.keyPacket[e2]();
      };
    });
    var ic = /* @__PURE__ */ ce.constructAllowedPackets([ao]);
    var nc = /* @__PURE__ */ new Set([me.packet.publicKey, me.packet.privateKey]);
    var ac = /* @__PURE__ */ new Set([me.packet.publicKey, me.packet.privateKey, me.packet.publicSubkey, me.packet.privateSubkey]);
    var sc = class {
      packetListToStructure(e2, t2 = /* @__PURE__ */ new Set()) {
        let r2, i2, n2, a2;
        for (const s2 of e2) {
          if (s2 instanceof Ii) {
            ac.has(s2.tag) && !a2 && (a2 = nc.has(s2.tag) ? nc : ac);
            continue;
          }
          const e3 = s2.constructor.tag;
          if (a2) {
            if (!a2.has(e3))
              continue;
            a2 = null;
          }
          if (t2.has(e3))
            throw Error("Unexpected packet type: " + e3);
          switch (e3) {
            case me.packet.publicKey:
            case me.packet.secretKey:
              if (this.keyPacket)
                throw Error("Key block contains multiple keys");
              if (this.keyPacket = s2, i2 = this.getKeyID(), !i2)
                throw Error("Missing Key ID");
              break;
            case me.packet.userID:
            case me.packet.userAttribute:
              r2 = new tc(s2, this), this.users.push(r2);
              break;
            case me.packet.publicSubkey:
            case me.packet.secretSubkey:
              r2 = null, n2 = new rc(s2, this), this.subkeys.push(n2);
              break;
            case me.packet.signature:
              switch (s2.signatureType) {
                case me.signature.certGeneric:
                case me.signature.certPersona:
                case me.signature.certCasual:
                case me.signature.certPositive:
                  if (!r2) {
                    ce.printDebug("Dropping certification signatures without preceding user packet");
                    continue;
                  }
                  s2.issuerKeyID.equals(i2) ? r2.selfCertifications.push(s2) : r2.otherCertifications.push(s2);
                  break;
                case me.signature.certRevocation:
                  r2 ? r2.revocationSignatures.push(s2) : this.directSignatures.push(s2);
                  break;
                case me.signature.key:
                  this.directSignatures.push(s2);
                  break;
                case me.signature.subkeyBinding:
                  if (!n2) {
                    ce.printDebug("Dropping subkey binding signature without preceding subkey packet");
                    continue;
                  }
                  n2.bindingSignatures.push(s2);
                  break;
                case me.signature.keyRevocation:
                  this.revocationSignatures.push(s2);
                  break;
                case me.signature.subkeyRevocation:
                  if (!n2) {
                    ce.printDebug("Dropping subkey revocation signature without preceding subkey packet");
                    continue;
                  }
                  n2.revocationSignatures.push(s2);
              }
          }
        }
      }
      toPacketList() {
        const e2 = new uo();
        return e2.push(this.keyPacket), e2.push(...this.revocationSignatures), e2.push(...this.directSignatures), this.users.map((t2) => e2.push(...t2.toPacketList())), this.subkeys.map((t2) => e2.push(...t2.toPacketList())), e2;
      }
      clone(e2 = false) {
        const t2 = new this.constructor(this.toPacketList());
        return e2 && t2.getKeys().forEach((e3) => {
          if (e3.keyPacket = Object.create(Object.getPrototypeOf(e3.keyPacket), Object.getOwnPropertyDescriptors(e3.keyPacket)), !e3.keyPacket.isDecrypted())
            return;
          const t3 = {};
          Object.keys(e3.keyPacket.privateParams).forEach((r2) => {
            t3[r2] = new Uint8Array(e3.keyPacket.privateParams[r2]);
          }), e3.keyPacket.privateParams = t3;
        }), t2;
      }
      getSubkeys(e2 = null) {
        return this.subkeys.filter((t2) => !e2 || t2.getKeyID().equals(e2, true));
      }
      getKeys(e2 = null) {
        const t2 = [];
        return e2 && !this.getKeyID().equals(e2, true) || t2.push(this), t2.concat(this.getSubkeys(e2));
      }
      getKeyIDs() {
        return this.getKeys().map((e2) => e2.getKeyID());
      }
      getUserIDs() {
        return this.users.map((e2) => e2.userID ? e2.userID.userID : null).filter((e2) => null !== e2);
      }
      write() {
        return this.toPacketList().write();
      }
      async getSigningKey(e2 = null, t2 = new Date(), r2 = {}, i2 = ge) {
        await this.verifyPrimaryKey(t2, r2, i2);
        const n2 = this.keyPacket, a2 = this.subkeys.slice().sort((e3, t3) => t3.keyPacket.created - e3.keyPacket.created);
        let s2;
        for (const r3 of a2)
          if (!e2 || r3.getKeyID().equals(e2))
            try {
              await r3.verify(t2, i2);
              const e3 = { key: n2, bind: r3.keyPacket }, a3 = await No(r3.bindingSignatures, n2, me.signature.subkeyBinding, e3, t2, i2);
              if (!Xo(r3.keyPacket, a3))
                continue;
              if (!a3.embeddedSignature)
                throw Error("Missing embedded signature");
              return await No([a3.embeddedSignature], r3.keyPacket, me.signature.keyBinding, e3, t2, i2), ec(r3.keyPacket, i2), r3;
            } catch (e3) {
              s2 = e3;
            }
        try {
          const a3 = await this.getPrimaryUser(t2, r2, i2);
          if ((!e2 || n2.getKeyID().equals(e2)) && Xo(n2, a3.selfCertification))
            return ec(n2, i2), this;
        } catch (e3) {
          s2 = e3;
        }
        throw ce.wrapError("Could not find valid signing key packet in key " + this.getKeyID().toHex(), s2);
      }
      async getEncryptionKey(e2, t2 = new Date(), r2 = {}, i2 = ge) {
        await this.verifyPrimaryKey(t2, r2, i2);
        const n2 = this.keyPacket, a2 = this.subkeys.slice().sort((e3, t3) => t3.keyPacket.created - e3.keyPacket.created);
        let s2;
        for (const r3 of a2)
          if (!e2 || r3.getKeyID().equals(e2))
            try {
              await r3.verify(t2, i2);
              const e3 = { key: n2, bind: r3.keyPacket }, a3 = await No(r3.bindingSignatures, n2, me.signature.subkeyBinding, e3, t2, i2);
              if (Qo(r3.keyPacket, a3))
                return ec(r3.keyPacket, i2), r3;
            } catch (e3) {
              s2 = e3;
            }
        try {
          const a3 = await this.getPrimaryUser(t2, r2, i2);
          if ((!e2 || n2.getKeyID().equals(e2)) && Qo(n2, a3.selfCertification))
            return ec(n2, i2), this;
        } catch (e3) {
          s2 = e3;
        }
        throw ce.wrapError("Could not find valid encryption key packet in key " + this.getKeyID().toHex(), s2);
      }
      async isRevoked(e2, t2, r2 = new Date(), i2 = ge) {
        return $o(this.keyPacket, me.signature.keyRevocation, { key: this.keyPacket }, this.revocationSignatures, e2, t2, r2, i2);
      }
      async verifyPrimaryKey(e2 = new Date(), t2 = {}, r2 = ge) {
        const i2 = this.keyPacket;
        if (await this.isRevoked(null, null, e2, r2))
          throw Error("Primary key is revoked");
        const { selfCertification: n2 } = await this.getPrimaryUser(e2, t2, r2);
        if (jo(i2, n2, e2))
          throw Error("Primary key is expired");
        const a2 = await No(this.directSignatures, i2, me.signature.key, { key: i2 }, e2, r2).catch(() => {
        });
        if (a2 && jo(i2, a2, e2))
          throw Error("Primary key is expired");
      }
      async getExpirationTime(e2, t2 = ge) {
        let r2;
        try {
          const { selfCertification: i2 } = await this.getPrimaryUser(null, e2, t2), n2 = Zo(this.keyPacket, i2), a2 = i2.getExpirationTime(), s2 = await No(this.directSignatures, this.keyPacket, me.signature.key, { key: this.keyPacket }, null, t2).catch(() => {
          });
          if (s2) {
            const e3 = Zo(this.keyPacket, s2);
            r2 = Math.min(n2, a2, e3);
          } else
            r2 = n2 < a2 ? n2 : a2;
        } catch (e3) {
          r2 = null;
        }
        return ce.normalizeDate(r2);
      }
      async getPrimaryUser(e2 = new Date(), t2 = {}, r2 = ge) {
        const i2 = this.keyPacket, n2 = [];
        let a2;
        for (let s3 = 0; s3 < this.users.length; s3++)
          try {
            const a3 = this.users[s3];
            if (!a3.userID)
              continue;
            if (void 0 !== t2.name && a3.userID.name !== t2.name || void 0 !== t2.email && a3.userID.email !== t2.email || void 0 !== t2.comment && a3.userID.comment !== t2.comment)
              throw Error("Could not find user that matches that user ID");
            const o3 = { userID: a3.userID, key: i2 }, c3 = await No(a3.selfCertifications, i2, me.signature.certGeneric, o3, e2, r2);
            n2.push({ index: s3, user: a3, selfCertification: c3 });
          } catch (e3) {
            a2 = e3;
          }
        if (!n2.length)
          throw a2 || Error("Could not find primary user");
        await Promise.all(n2.map(async function(t3) {
          return t3.user.revoked || t3.user.isRevoked(t3.selfCertification, null, e2, r2);
        }));
        const s2 = n2.sort(function(e3, t3) {
          const r3 = e3.selfCertification, i3 = t3.selfCertification;
          return i3.revoked - r3.revoked || r3.isPrimaryUserID - i3.isPrimaryUserID || r3.created - i3.created;
        }).pop(), { user: o2, selfCertification: c2 } = s2;
        if (c2.revoked || await o2.isRevoked(c2, null, e2, r2))
          throw Error("Primary user is revoked");
        return s2;
      }
      async update(e2, t2 = new Date(), r2 = ge) {
        if (!this.hasSameFingerprintAs(e2))
          throw Error("Primary key fingerprints must be equal to update the key");
        if (!this.isPrivate() && e2.isPrivate()) {
          if (!(this.subkeys.length === e2.subkeys.length && this.subkeys.every((t3) => e2.subkeys.some((e3) => t3.hasSameFingerprintAs(e3)))))
            throw Error("Cannot update public key with private key if subkeys mismatch");
          return e2.update(this, r2);
        }
        const i2 = this.clone();
        return await Vo(e2, i2, "revocationSignatures", t2, (n2) => $o(i2.keyPacket, me.signature.keyRevocation, i2, [n2], null, e2.keyPacket, t2, r2)), await Vo(e2, i2, "directSignatures", t2), await Promise.all(e2.users.map(async (e3) => {
          const n2 = i2.users.filter((t3) => e3.userID && e3.userID.equals(t3.userID) || e3.userAttribute && e3.userAttribute.equals(t3.userAttribute));
          if (n2.length > 0)
            await Promise.all(n2.map((i3) => i3.update(e3, t2, r2)));
          else {
            const t3 = e3.clone();
            t3.mainKey = i2, i2.users.push(t3);
          }
        })), await Promise.all(e2.subkeys.map(async (e3) => {
          const n2 = i2.subkeys.filter((t3) => t3.hasSameFingerprintAs(e3));
          if (n2.length > 0)
            await Promise.all(n2.map((i3) => i3.update(e3, t2, r2)));
          else {
            const t3 = e3.clone();
            t3.mainKey = i2, i2.subkeys.push(t3);
          }
        })), i2;
      }
      async getRevocationCertificate(e2 = new Date(), t2 = ge) {
        const r2 = { key: this.keyPacket }, i2 = await No(this.revocationSignatures, this.keyPacket, me.signature.keyRevocation, r2, e2, t2), n2 = new uo();
        return n2.push(i2), xe(me.armor.publicKey, n2.write(), null, null, "This is a revocation certificate");
      }
      async applyRevocationCertificate(e2, t2 = new Date(), r2 = ge) {
        const i2 = await Pe(e2, r2), n2 = (await uo.fromBinary(i2.data, ic, r2)).findPacket(me.packet.signature);
        if (!n2 || n2.signatureType !== me.signature.keyRevocation)
          throw Error("Could not find revocation signature packet");
        if (!n2.issuerKeyID.equals(this.getKeyID()))
          throw Error("Revocation signature does not match key");
        try {
          await n2.verify(this.keyPacket, me.signature.keyRevocation, { key: this.keyPacket }, t2, void 0, r2);
        } catch (e3) {
          throw ce.wrapError("Could not verify revocation signature", e3);
        }
        const a2 = this.clone();
        return a2.revocationSignatures.push(n2), a2;
      }
      async signPrimaryUser(e2, t2, r2, i2 = ge) {
        const { index: n2, user: a2 } = await this.getPrimaryUser(t2, r2, i2), s2 = await a2.certify(e2, t2, i2), o2 = this.clone();
        return o2.users[n2] = s2, o2;
      }
      async signAllUsers(e2, t2 = new Date(), r2 = ge) {
        const i2 = this.clone();
        return i2.users = await Promise.all(this.users.map(function(i3) {
          return i3.certify(e2, t2, r2);
        })), i2;
      }
      async verifyPrimaryUser(e2, t2 = new Date(), r2, i2 = ge) {
        const n2 = this.keyPacket, { user: a2 } = await this.getPrimaryUser(t2, r2, i2);
        return e2 ? await a2.verifyAllCertifications(e2, t2, i2) : [{ keyID: n2.getKeyID(), valid: await a2.verify(t2, i2).catch(() => false) }];
      }
      async verifyAllUsers(e2, t2 = new Date(), r2 = ge) {
        const i2 = this.keyPacket, n2 = [];
        return await Promise.all(this.users.map(async (a2) => {
          const s2 = e2 ? await a2.verifyAllCertifications(e2, t2, r2) : [{ keyID: i2.getKeyID(), valid: await a2.verify(t2, r2).catch(() => false) }];
          n2.push(...s2.map((e3) => ({ userID: a2.userID.userID, keyID: e3.keyID, valid: e3.valid })));
        })), n2;
      }
    };
    function oc(e2) {
      for (const t2 of e2)
        switch (t2.constructor.tag) {
          case me.packet.secretKey:
            return new uc(e2);
          case me.packet.publicKey:
            return new cc(e2);
        }
      throw Error("No key packet found");
    }
    ["getKeyID", "getFingerprint", "getAlgorithmInfo", "getCreationTime", "hasSameFingerprintAs"].forEach((e2) => {
      sc.prototype[e2] = rc.prototype[e2];
    });
    var cc = class extends sc {
      constructor(e2) {
        if (super(), this.keyPacket = null, this.revocationSignatures = [], this.directSignatures = [], this.users = [], this.subkeys = [], e2 && (this.packetListToStructure(e2, /* @__PURE__ */ new Set([me.packet.secretKey, me.packet.secretSubkey])), !this.keyPacket))
          throw Error("Invalid key: missing public-key packet");
      }
      isPrivate() {
        return false;
      }
      toPublic() {
        return this;
      }
      armor(e2 = ge) {
        return xe(me.armor.publicKey, this.toPacketList().write(), void 0, void 0, void 0, e2);
      }
    };
    var uc = class extends cc {
      constructor(e2) {
        if (super(), this.packetListToStructure(e2, /* @__PURE__ */ new Set([me.packet.publicKey, me.packet.publicSubkey])), !this.keyPacket)
          throw Error("Invalid key: missing private-key packet");
      }
      isPrivate() {
        return true;
      }
      toPublic() {
        const e2 = new uo(), t2 = this.toPacketList();
        for (const r2 of t2)
          switch (r2.constructor.tag) {
            case me.packet.secretKey: {
              const t3 = xo.fromSecretKeyPacket(r2);
              e2.push(t3);
              break;
            }
            case me.packet.secretSubkey: {
              const t3 = Ko.fromSecretSubkeyPacket(r2);
              e2.push(t3);
              break;
            }
            default:
              e2.push(r2);
          }
        return new cc(e2);
      }
      armor(e2 = ge) {
        return xe(me.armor.privateKey, this.toPacketList().write(), void 0, void 0, void 0, e2);
      }
      async getDecryptionKeys(e2, t2 = new Date(), r2 = {}, i2 = ge) {
        const n2 = this.keyPacket, a2 = [];
        for (let r3 = 0; r3 < this.subkeys.length; r3++)
          if (!e2 || this.subkeys[r3].getKeyID().equals(e2, true))
            try {
              const e3 = { key: n2, bind: this.subkeys[r3].keyPacket };
              Jo(await No(this.subkeys[r3].bindingSignatures, n2, me.signature.subkeyBinding, e3, t2, i2), i2) && a2.push(this.subkeys[r3]);
            } catch (e3) {
            }
        const s2 = await this.getPrimaryUser(t2, r2, i2);
        return e2 && !n2.getKeyID().equals(e2, true) || !Jo(s2.selfCertification, i2) || a2.push(this), a2;
      }
      isDecrypted() {
        return this.getKeys().some(({ keyPacket: e2 }) => e2.isDecrypted());
      }
      async validate(e2 = ge) {
        if (!this.isPrivate())
          throw Error("Cannot validate a public key");
        let t2;
        if (this.keyPacket.isDummy()) {
          const r2 = await this.getSigningKey(null, null, void 0, { ...e2, rejectPublicKeyAlgorithms: /* @__PURE__ */ new Set(), minRSABits: 0 });
          r2 && !r2.keyPacket.isDummy() && (t2 = r2.keyPacket);
        } else
          t2 = this.keyPacket;
        if (t2)
          return t2.validate();
        {
          const e3 = this.getKeys();
          if (e3.map((e4) => e4.keyPacket.isDummy()).every(Boolean))
            throw Error("Cannot validate an all-gnu-dummy key");
          return Promise.all(e3.map(async (e4) => e4.keyPacket.validate()));
        }
      }
      clearPrivateParams() {
        this.getKeys().forEach(({ keyPacket: e2 }) => {
          e2.isDecrypted() && e2.clearPrivateParams();
        });
      }
      async revoke({ flag: e2 = me.reasonForRevocation.noReason, string: t2 = "" } = {}, r2 = new Date(), i2 = ge) {
        if (!this.isPrivate())
          throw Error("Need private key for revoking");
        const n2 = { key: this.keyPacket }, a2 = this.clone();
        return a2.revocationSignatures.push(await Go(n2, null, this.keyPacket, { signatureType: me.signature.keyRevocation, reasonForRevocationFlag: me.write(me.reasonForRevocation, e2), reasonForRevocationString: t2 }, r2, void 0, void 0, i2)), a2;
      }
      async addSubkey(e2 = {}) {
        const t2 = { ...ge, ...e2.config };
        if (e2.passphrase)
          throw Error("Subkey could not be encrypted here, please encrypt whole key");
        if (e2.rsaBits < t2.minRSABits)
          throw Error(`rsaBits should be at least ${t2.minRSABits}, got: ${e2.rsaBits}`);
        const r2 = this.keyPacket;
        if (r2.isDummy())
          throw Error("Cannot add subkey to gnu-dummy primary key");
        if (!r2.isDecrypted())
          throw Error("Key is not decrypted");
        const i2 = r2.getAlgorithmInfo();
        i2.type = i2.curve ? "ecc" : "rsa", i2.rsaBits = i2.bits || 4096, i2.curve = i2.curve || "curve25519", e2 = Yo(e2, i2);
        const n2 = await Oo(e2);
        ec(n2, t2);
        const a2 = await Lo(n2, r2, e2, t2), s2 = this.toPacketList();
        return s2.push(n2, a2), new uc(s2);
      }
    };
    var hc = /* @__PURE__ */ ce.constructAllowedPackets([xo, Ko, Ro, To, Bo, Do, ao]);
    async function fc(e2, t2, r2, i2) {
      r2.passphrase && await e2.encrypt(r2.passphrase, i2), await Promise.all(t2.map(async function(e3, t3) {
        const n3 = r2.subkeys[t3].passphrase;
        n3 && await e3.encrypt(n3, i2);
      }));
      const n2 = new uo();
      n2.push(e2), await Promise.all(r2.userIDs.map(async function(t3, n3) {
        function a3(e3, t4) {
          return [t4, ...e3.filter((e4) => e4 !== t4)];
        }
        const s2 = Bo.fromObject(t3), o2 = {};
        o2.userID = s2, o2.key = e2;
        const c2 = new ao();
        return c2.signatureType = me.signature.certGeneric, c2.publicKeyAlgorithm = e2.algorithm, c2.hashAlgorithm = await Wo(null, e2, void 0, void 0, i2), c2.keyFlags = [me.keyFlags.certifyKeys | me.keyFlags.signData], c2.preferredSymmetricAlgorithms = a3([me.symmetric.aes256, me.symmetric.aes128, me.symmetric.aes192], i2.preferredSymmetricAlgorithm), i2.aeadProtect && (c2.preferredAEADAlgorithms = a3([me.aead.eax, me.aead.ocb], i2.preferredAEADAlgorithm)), c2.preferredHashAlgorithms = a3([me.hash.sha256, me.hash.sha512], i2.preferredHashAlgorithm), c2.preferredCompressionAlgorithms = a3([me.compression.zlib, me.compression.zip, me.compression.uncompressed], i2.preferredCompressionAlgorithm), 0 === n3 && (c2.isPrimaryUserID = true), c2.features = [0], c2.features[0] |= me.features.modificationDetection, i2.aeadProtect && (c2.features[0] |= me.features.aead), i2.v5Keys && (c2.features[0] |= me.features.v5Keys), r2.keyExpirationTime > 0 && (c2.keyExpirationTime = r2.keyExpirationTime, c2.keyNeverExpires = false), await c2.sign(e2, o2, r2.date), { userIDPacket: s2, signaturePacket: c2 };
      })).then((e3) => {
        e3.forEach(({ userIDPacket: e4, signaturePacket: t3 }) => {
          n2.push(e4), n2.push(t3);
        });
      }), await Promise.all(t2.map(async function(t3, n3) {
        const a3 = r2.subkeys[n3];
        return { secretSubkeyPacket: t3, subkeySignaturePacket: await Lo(t3, e2, a3, i2) };
      })).then((e3) => {
        e3.forEach(({ secretSubkeyPacket: e4, subkeySignaturePacket: t3 }) => {
          n2.push(e4), n2.push(t3);
        });
      });
      const a2 = { key: e2 };
      return n2.push(await Go(a2, null, e2, { signatureType: me.signature.keyRevocation, reasonForRevocationFlag: me.reasonForRevocation.noReason, reasonForRevocationString: "" }, r2.date, void 0, void 0, i2)), r2.passphrase && e2.clearPrivateParams(), await Promise.all(t2.map(async function(e3, t3) {
        r2.subkeys[t3].passphrase && e3.clearPrivateParams();
      })), new uc(n2);
    }
    var dc = /* @__PURE__ */ ce.constructAllowedPackets([ro, fo, Ao, _o, Co, So, Po, oo, ao]);
    var lc = /* @__PURE__ */ ce.constructAllowedPackets([Po]);
    var pc = /* @__PURE__ */ ce.constructAllowedPackets([ao]);
    var yc = class {
      constructor(e2) {
        this.packets = e2 || new uo();
      }
      getEncryptionKeyIDs() {
        const e2 = [];
        return this.packets.filterByTag(me.packet.publicKeyEncryptedSessionKey).forEach(function(t2) {
          e2.push(t2.publicKeyID);
        }), e2;
      }
      getSigningKeyIDs() {
        const e2 = this.unwrapCompressed(), t2 = e2.packets.filterByTag(me.packet.onePassSignature);
        if (t2.length > 0)
          return t2.map((e3) => e3.issuerKeyID);
        return e2.packets.filterByTag(me.packet.signature).map((e3) => e3.issuerKeyID);
      }
      async decrypt(e2, t2, r2, i2 = new Date(), n2 = ge) {
        const a2 = r2 || await this.decryptSessionKeys(e2, t2, i2, n2), s2 = this.packets.filterByTag(me.packet.symmetricallyEncryptedData, me.packet.symEncryptedIntegrityProtectedData, me.packet.aeadEncryptedData);
        if (0 === s2.length)
          throw Error("No encrypted data found");
        const o2 = s2[0];
        let c2 = null;
        const u2 = Promise.all(a2.map(async ({ algorithm: e3, data: t3 }) => {
          if (!ce.isUint8Array(t3) || !ce.isString(e3))
            throw Error("Invalid session key for decryption.");
          try {
            const r3 = me.write(me.symmetric, e3);
            await o2.decrypt(r3, t3, n2);
          } catch (e4) {
            ce.printDebugError(e4), c2 = e4;
          }
        }));
        if (ne(o2.encrypted), o2.encrypted = null, await u2, !o2.packets || !o2.packets.length)
          throw c2 || Error("Decryption failed.");
        const h2 = new yc(o2.packets);
        return o2.packets = new uo(), h2;
      }
      async decryptSessionKeys(e2, t2, r2 = new Date(), i2 = ge) {
        let n2, a2 = [];
        if (t2) {
          const e3 = this.packets.filterByTag(me.packet.symEncryptedSessionKey);
          if (0 === e3.length)
            throw Error("No symmetrically encrypted session key packet found.");
          await Promise.all(t2.map(async function(t3, r3) {
            let n3;
            n3 = r3 ? await uo.fromBinary(e3.write(), lc, i2) : e3, await Promise.all(n3.map(async function(e4) {
              try {
                await e4.decrypt(t3), a2.push(e4);
              } catch (e5) {
                ce.printDebugError(e5);
              }
            }));
          }));
        } else {
          if (!e2)
            throw Error("No key or password specified.");
          {
            const t3 = this.packets.filterByTag(me.packet.publicKeyEncryptedSessionKey);
            if (0 === t3.length)
              throw Error("No public key encrypted session key packet found.");
            await Promise.all(t3.map(async function(t4) {
              await Promise.all(e2.map(async function(e3) {
                let s2 = [me.symmetric.aes256, me.symmetric.aes128, me.symmetric.tripledes, me.symmetric.cast5];
                try {
                  const t5 = await e3.getPrimaryUser(r2, void 0, i2);
                  t5.selfCertification.preferredSymmetricAlgorithms && (s2 = s2.concat(t5.selfCertification.preferredSymmetricAlgorithms));
                } catch (e4) {
                }
                const o2 = (await e3.getDecryptionKeys(t4.publicKeyID, null, void 0, i2)).map((e4) => e4.keyPacket);
                await Promise.all(o2.map(async function(e4) {
                  if (!e4 || e4.isDummy())
                    return;
                  if (!e4.isDecrypted())
                    throw Error("Decryption key is not decrypted.");
                  if (i2.constantTimePKCS1Decryption && (t4.publicKeyAlgorithm === me.publicKey.rsaEncrypt || t4.publicKeyAlgorithm === me.publicKey.rsaEncryptSign || t4.publicKeyAlgorithm === me.publicKey.rsaSign || t4.publicKeyAlgorithm === me.publicKey.elgamal)) {
                    const r3 = t4.write();
                    await Promise.all(Array.from(i2.constantTimePKCS1DecryptionSupportedSymmetricAlgorithms).map(async (t5) => {
                      const i3 = new So();
                      i3.read(r3);
                      const s3 = { sessionKeyAlgorithm: t5, sessionKey: await aa.generateSessionKey(t5) };
                      try {
                        await i3.decrypt(e4, s3), a2.push(i3);
                      } catch (e5) {
                        ce.printDebugError(e5), n2 = e5;
                      }
                    }));
                  } else
                    try {
                      if (await t4.decrypt(e4), !s2.includes(me.write(me.symmetric, t4.sessionKeyAlgorithm)))
                        throw Error("A non-preferred symmetric algorithm was used.");
                      a2.push(t4);
                    } catch (e5) {
                      ce.printDebugError(e5), n2 = e5;
                    }
                }));
              })), ne(t4.encrypted), t4.encrypted = null;
            }));
          }
        }
        if (a2.length > 0) {
          if (a2.length > 1) {
            const e3 = /* @__PURE__ */ new Set();
            a2 = a2.filter((t3) => {
              const r3 = t3.sessionKeyAlgorithm + ce.uint8ArrayToString(t3.sessionKey);
              return !e3.has(r3) && (e3.add(r3), true);
            });
          }
          return a2.map((e3) => ({ data: e3.sessionKey, algorithm: me.read(me.symmetric, e3.sessionKeyAlgorithm) }));
        }
        throw n2 || Error("Session key decryption failed.");
      }
      getLiteralData() {
        const e2 = this.unwrapCompressed().packets.findPacket(me.packet.literalData);
        return e2 && e2.getBytes() || null;
      }
      getFilename() {
        const e2 = this.unwrapCompressed().packets.findPacket(me.packet.literalData);
        return e2 && e2.getFilename() || null;
      }
      getText() {
        const e2 = this.unwrapCompressed().packets.findPacket(me.packet.literalData);
        return e2 ? e2.getText() : null;
      }
      static async generateSessionKey(e2 = [], t2 = new Date(), r2 = [], i2 = ge) {
        const n2 = await Ho("symmetric", e2, t2, r2, i2), a2 = me.read(me.symmetric, n2), s2 = i2.aeadProtect && await async function(e3, t3 = new Date(), r3 = [], i3 = ge) {
          let n3 = true;
          return await Promise.all(e3.map(async function(e4, a3) {
            const s3 = await e4.getPrimaryUser(t3, r3[a3], i3);
            s3.selfCertification.features && s3.selfCertification.features[0] & me.features.aead || (n3 = false);
          })), n3;
        }(e2, t2, r2, i2) ? me.read(me.aead, await Ho("aead", e2, t2, r2, i2)) : void 0;
        return { data: await aa.generateSessionKey(n2), algorithm: a2, aeadAlgorithm: s2 };
      }
      async encrypt(e2, t2, r2, i2 = false, n2 = [], a2 = new Date(), s2 = [], o2 = ge) {
        if (r2) {
          if (!ce.isUint8Array(r2.data) || !ce.isString(r2.algorithm))
            throw Error("Invalid session key for encryption.");
        } else if (e2 && e2.length)
          r2 = await yc.generateSessionKey(e2, a2, s2, o2);
        else {
          if (!t2 || !t2.length)
            throw Error("No keys, passwords, or session key provided.");
          r2 = await yc.generateSessionKey(void 0, void 0, void 0, o2);
        }
        const { data: c2, algorithm: u2, aeadAlgorithm: h2 } = r2, f2 = await yc.encryptSessionKey(c2, u2, h2, e2, t2, i2, n2, a2, s2, o2);
        let d2;
        h2 ? (d2 = new Ao(), d2.aeadAlgorithm = me.write(me.aead, h2)) : d2 = new _o(), d2.packets = this.packets;
        const l2 = me.write(me.symmetric, u2);
        return await d2.encrypt(l2, c2, o2), f2.packets.push(d2), d2.packets = new uo(), f2;
      }
      static async encryptSessionKey(e2, t2, r2, i2, n2, a2 = false, s2 = [], o2 = new Date(), c2 = [], u2 = ge) {
        const h2 = new uo(), f2 = me.write(me.symmetric, t2), d2 = r2 && me.write(me.aead, r2);
        if (i2) {
          const t3 = await Promise.all(i2.map(async function(t4, r3) {
            const i3 = await t4.getEncryptionKey(s2[r3], o2, c2, u2), n3 = new So();
            return n3.publicKeyID = a2 ? Me.wildcard() : i3.getKeyID(), n3.publicKeyAlgorithm = i3.keyPacket.algorithm, n3.sessionKey = e2, n3.sessionKeyAlgorithm = f2, await n3.encrypt(i3.keyPacket), delete n3.sessionKey, n3;
          }));
          h2.push(...t3);
        }
        if (n2) {
          const t3 = async function(e3, t4) {
            try {
              return await e3.decrypt(t4), 1;
            } catch (e4) {
              return 0;
            }
          }, r3 = (e3, t4) => e3 + t4, i3 = async function(e3, a4, s3, o3) {
            const c3 = new Po(u2);
            if (c3.sessionKey = e3, c3.sessionKeyAlgorithm = a4, s3 && (c3.aeadAlgorithm = s3), await c3.encrypt(o3, u2), u2.passwordCollisionCheck) {
              if (1 !== (await Promise.all(n2.map((e4) => t3(c3, e4)))).reduce(r3))
                return i3(e3, a4, o3);
            }
            return delete c3.sessionKey, c3;
          }, a3 = await Promise.all(n2.map((t4) => i3(e2, f2, d2, t4)));
          h2.push(...a3);
        }
        return new yc(h2);
      }
      async sign(e2 = [], t2 = null, r2 = [], i2 = new Date(), n2 = [], a2 = ge) {
        const s2 = new uo(), o2 = this.packets.findPacket(me.packet.literalData);
        if (!o2)
          throw Error("No literal data packet to sign.");
        let c2, u2;
        const h2 = null === o2.text ? me.signature.binary : me.signature.text;
        if (t2)
          for (u2 = t2.packets.filterByTag(me.packet.signature), c2 = u2.length - 1; c2 >= 0; c2--) {
            const t3 = u2[c2], r3 = new oo();
            r3.signatureType = t3.signatureType, r3.hashAlgorithm = t3.hashAlgorithm, r3.publicKeyAlgorithm = t3.publicKeyAlgorithm, r3.issuerKeyID = t3.issuerKeyID, e2.length || 0 !== c2 || (r3.flags = 1), s2.push(r3);
          }
        return await Promise.all(Array.from(e2).reverse().map(async function(t3, s3) {
          if (!t3.isPrivate())
            throw Error("Need private key for signing");
          const o3 = r2[e2.length - 1 - s3], c3 = await t3.getSigningKey(o3, i2, n2, a2), u3 = new oo();
          return u3.signatureType = h2, u3.hashAlgorithm = await Wo(t3, c3.keyPacket, i2, n2, a2), u3.publicKeyAlgorithm = c3.keyPacket.algorithm, u3.issuerKeyID = c3.getKeyID(), s3 === e2.length - 1 && (u3.flags = 1), u3;
        })).then((e3) => {
          e3.forEach((e4) => s2.push(e4));
        }), s2.push(o2), s2.push(...await bc(o2, e2, t2, r2, i2, n2, false, a2)), new yc(s2);
      }
      compress(e2, t2 = ge) {
        if (e2 === me.compression.uncompressed)
          return this;
        const r2 = new fo(t2);
        r2.algorithm = e2, r2.packets = this.packets;
        const i2 = new uo();
        return i2.push(r2), new yc(i2);
      }
      async signDetached(e2 = [], t2 = null, r2 = [], i2 = new Date(), n2 = [], a2 = ge) {
        const s2 = this.packets.findPacket(me.packet.literalData);
        if (!s2)
          throw Error("No literal data packet to sign.");
        return new qo(await bc(s2, e2, t2, r2, i2, n2, true, a2));
      }
      async verify(e2, t2 = new Date(), r2 = ge) {
        const i2 = this.unwrapCompressed(), n2 = i2.packets.filterByTag(me.packet.literalData);
        if (1 !== n2.length)
          throw Error("Can only verify message with one literal data packet.");
        _(i2.packets.stream) && i2.packets.push(...await ie(i2.packets.stream, (e3) => e3 || []));
        const a2 = i2.packets.filterByTag(me.packet.onePassSignature).reverse(), s2 = i2.packets.filterByTag(me.packet.signature);
        return a2.length && !s2.length && ce.isStream(i2.packets.stream) && !_(i2.packets.stream) ? (await Promise.all(a2.map(async (e3) => {
          e3.correspondingSig = new Promise((t3, r3) => {
            e3.correspondingSigResolve = t3, e3.correspondingSigReject = r3;
          }), e3.signatureData = ae(async () => (await e3.correspondingSig).signatureData), e3.hashed = ie(await e3.hash(e3.signatureType, n2[0], void 0, false)), e3.hashed.catch(() => {
          });
        })), i2.packets.stream = X(i2.packets.stream, async (e3, t3) => {
          const r3 = H(e3), i3 = G(t3);
          try {
            for (let e4 = 0; e4 < a2.length; e4++) {
              const { value: t4 } = await r3.read();
              a2[e4].correspondingSigResolve(t4);
            }
            await r3.readToEnd(), await i3.ready, await i3.close();
          } catch (e4) {
            a2.forEach((t4) => {
              t4.correspondingSigReject(e4);
            }), await i3.abort(e4);
          }
        }), mc(a2, n2, e2, t2, false, r2)) : mc(s2, n2, e2, t2, false, r2);
      }
      verifyDetached(e2, t2, r2 = new Date(), i2 = ge) {
        const n2 = this.unwrapCompressed().packets.filterByTag(me.packet.literalData);
        if (1 !== n2.length)
          throw Error("Can only verify message with one literal data packet.");
        return mc(e2.packets, n2, t2, r2, true, i2);
      }
      unwrapCompressed() {
        const e2 = this.packets.filterByTag(me.packet.compressedData);
        return e2.length ? new yc(e2[0].packets) : this;
      }
      async appendSignature(e2, t2 = ge) {
        await this.packets.read(ce.isUint8Array(e2) ? e2 : (await Pe(e2)).data, pc, t2);
      }
      write() {
        return this.packets.write();
      }
      armor(e2 = ge) {
        return xe(me.armor.message, this.write(), null, null, null, e2);
      }
    };
    async function bc(e2, t2, r2 = null, i2 = [], n2 = new Date(), a2 = [], s2 = false, o2 = ge) {
      const c2 = new uo(), u2 = null === e2.text ? me.signature.binary : me.signature.text;
      if (await Promise.all(t2.map(async (t3, r3) => {
        const c3 = a2[r3];
        if (!t3.isPrivate())
          throw Error("Need private key for signing");
        const h2 = await t3.getSigningKey(i2[r3], n2, c3, o2);
        return Go(e2, t3, h2.keyPacket, { signatureType: u2 }, n2, c3, s2, o2);
      })).then((e3) => {
        c2.push(...e3);
      }), r2) {
        const e3 = r2.packets.filterByTag(me.packet.signature);
        c2.push(...e3);
      }
      return c2;
    }
    async function mc(e2, t2, r2, i2 = new Date(), n2 = false, a2 = ge) {
      return Promise.all(e2.filter(function(e3) {
        return ["text", "binary"].includes(me.read(me.signature, e3.signatureType));
      }).map(async function(e3) {
        return async function(e4, t3, r3, i3 = new Date(), n3 = false, a3 = ge) {
          let s2, o2;
          for (const t4 of r3) {
            const r4 = t4.getKeys(e4.issuerKeyID);
            if (r4.length > 0) {
              s2 = t4, o2 = r4[0];
              break;
            }
          }
          const c2 = e4 instanceof oo ? e4.correspondingSig : e4, u2 = { keyID: e4.issuerKeyID, verified: (async () => {
            if (!o2)
              throw Error("Could not find signing key with key ID " + e4.issuerKeyID.toHex());
            await e4.verify(o2.keyPacket, e4.signatureType, t3[0], i3, n3, a3);
            const r4 = await c2;
            if (o2.getCreationTime() > r4.created)
              throw Error("Key is newer than the signature");
            try {
              await s2.getSigningKey(o2.getKeyID(), r4.created, void 0, a3);
            } catch (e5) {
              if (!a3.allowInsecureVerificationWithReformattedKeys || !e5.message.match(/Signature creation time is in the future/))
                throw e5;
              await s2.getSigningKey(o2.getKeyID(), i3, void 0, a3);
            }
            return true;
          })(), signature: (async () => {
            const e5 = await c2, t4 = new uo();
            return e5 && t4.push(e5), new qo(t4);
          })() };
          return u2.signature.catch(() => {
          }), u2.verified.catch(() => {
          }), u2;
        }(e3, t2, r2, i2, n2, a2);
      }));
    }
    var gc = /* @__PURE__ */ ce.constructAllowedPackets([ao]);
    var wc = class {
      constructor(e2, t2) {
        if (this.text = ce.removeTrailingSpaces(e2).replace(/\r?\n/g, "\r\n"), t2 && !(t2 instanceof qo))
          throw Error("Invalid signature input");
        this.signature = t2 || new qo(new uo());
      }
      getSigningKeyIDs() {
        const e2 = [];
        return this.signature.packets.forEach(function(t2) {
          e2.push(t2.issuerKeyID);
        }), e2;
      }
      async sign(e2, t2 = null, r2 = [], i2 = new Date(), n2 = [], a2 = ge) {
        const s2 = new ro();
        s2.setText(this.text);
        const o2 = new qo(await bc(s2, e2, t2, r2, i2, n2, true, a2));
        return new wc(this.text, o2);
      }
      verify(e2, t2 = new Date(), r2 = ge) {
        const i2 = this.signature.packets, n2 = new ro();
        return n2.setText(this.text), mc(i2, [n2], e2, t2, true, r2);
      }
      getText() {
        return this.text.replace(/\r\n/g, "\n");
      }
      armor(e2 = ge) {
        let t2 = this.signature.packets.map(function(e3) {
          return me.read(me.hash, e3.hashAlgorithm).toUpperCase();
        });
        t2 = t2.filter(function(e3, t3, r3) {
          return r3.indexOf(e3) === t3;
        });
        const r2 = { hash: t2.join(), text: this.text, data: this.signature.packets.write() };
        return xe(me.armor.signed, r2, void 0, void 0, void 0, e2);
      }
    };
    function vc(e2) {
      if (!(e2 instanceof yc))
        throw Error("Parameter [message] needs to be of type Message");
    }
    function _c(e2) {
      if (!(e2 instanceof wc || e2 instanceof yc))
        throw Error("Parameter [message] needs to be of type Message or CleartextMessage");
    }
    function kc(e2) {
      if ("armored" !== e2 && "binary" !== e2 && "object" !== e2)
        throw Error("Unsupported format " + e2);
    }
    var Ac = Object.keys(ge).length;
    function Sc(e2) {
      const t2 = Object.keys(e2);
      if (t2.length !== Ac) {
        for (const e3 of t2)
          if (void 0 === ge[e3])
            throw Error("Unknown config property: " + e3);
      }
    }
    function Ec(e2) {
      return e2 && !ce.isArray(e2) && (e2 = [e2]), e2;
    }
    async function Pc(e2, t2, r2 = "utf8") {
      const i2 = ce.isStream(e2);
      return "array" === i2 ? ie(e2) : "node" === t2 ? (e2 = D(e2), "binary" !== r2 && e2.setEncoding(r2), e2) : "web" === t2 && "ponyfill" === i2 ? T(e2) : e2;
    }
    function xc(e2, t2) {
      e2.data = X(t2.packets.stream, async (t3, r2) => {
        await V(e2.data, r2, { preventClose: true });
        const i2 = G(r2);
        try {
          await ie(t3, (e3) => e3), await i2.close();
        } catch (e3) {
          await i2.abort(e3);
        }
      });
    }
    function Mc(e2, t2, r2) {
      switch (t2) {
        case "object":
          return e2;
        case "armored":
          return e2.armor(r2);
        case "binary":
          return e2.write();
        default:
          throw Error("Unsupported format " + t2);
      }
    }
    var Cc = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? Symbol : (e2) => `Symbol(${e2})`;
    function Kc() {
    }
    var Dc = "undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof global ? global : void 0;
    function Rc(e2) {
      return "object" == typeof e2 && null !== e2 || "function" == typeof e2;
    }
    var Uc = Kc;
    var Ic = Promise;
    var Bc = Promise.prototype.then;
    var Tc = Promise.resolve.bind(Ic);
    var zc = Promise.reject.bind(Ic);
    function qc(e2) {
      return new Ic(e2);
    }
    function Oc(e2) {
      return Tc(e2);
    }
    function Fc(e2) {
      return zc(e2);
    }
    function Nc(e2, t2, r2) {
      return Bc.call(e2, t2, r2);
    }
    function jc(e2, t2, r2) {
      Nc(Nc(e2, t2, r2), void 0, Uc);
    }
    function Lc(e2, t2) {
      jc(e2, t2);
    }
    function Wc(e2, t2) {
      jc(e2, void 0, t2);
    }
    function Hc(e2, t2, r2) {
      return Nc(e2, t2, r2);
    }
    function Gc(e2) {
      Nc(e2, void 0, Uc);
    }
    var Vc = (() => {
      const e2 = Dc && Dc.queueMicrotask;
      if ("function" == typeof e2)
        return e2;
      const t2 = Oc(void 0);
      return (e3) => Nc(t2, e3);
    })();
    function $c(e2, t2, r2) {
      if ("function" != typeof e2)
        throw new TypeError("Argument is not a function");
      return Function.prototype.apply.call(e2, t2, r2);
    }
    function Zc(e2, t2, r2) {
      try {
        return Oc($c(e2, t2, r2));
      } catch (e3) {
        return Fc(e3);
      }
    }
    var Yc = class {
      constructor() {
        this._cursor = 0, this._size = 0, this._front = { _elements: [], _next: void 0 }, this._back = this._front, this._cursor = 0, this._size = 0;
      }
      get length() {
        return this._size;
      }
      push(e2) {
        const t2 = this._back;
        let r2 = t2;
        16383 === t2._elements.length && (r2 = { _elements: [], _next: void 0 }), t2._elements.push(e2), r2 !== t2 && (this._back = r2, t2._next = r2), ++this._size;
      }
      shift() {
        const e2 = this._front;
        let t2 = e2;
        const r2 = this._cursor;
        let i2 = r2 + 1;
        const n2 = e2._elements, a2 = n2[r2];
        return 16384 === i2 && (t2 = e2._next, i2 = 0), --this._size, this._cursor = i2, e2 !== t2 && (this._front = t2), n2[r2] = void 0, a2;
      }
      forEach(e2) {
        let t2 = this._cursor, r2 = this._front, i2 = r2._elements;
        for (; !(t2 === i2.length && void 0 === r2._next || t2 === i2.length && (r2 = r2._next, i2 = r2._elements, t2 = 0, 0 === i2.length)); )
          e2(i2[t2]), ++t2;
      }
      peek() {
        const e2 = this._front, t2 = this._cursor;
        return e2._elements[t2];
      }
    };
    function Xc(e2, t2) {
      e2._ownerReadableStream = t2, t2._reader = e2, "readable" === t2._state ? tu(e2) : "closed" === t2._state ? function(e3) {
        tu(e3), nu(e3);
      }(e2) : ru(e2, t2._storedError);
    }
    function Qc(e2, t2) {
      return Tf(e2._ownerReadableStream, t2);
    }
    function Jc(e2) {
      "readable" === e2._ownerReadableStream._state ? iu(e2, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : function(e3, t2) {
        ru(e3, t2);
      }(e2, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), e2._ownerReadableStream._reader = void 0, e2._ownerReadableStream = void 0;
    }
    function eu(e2) {
      return new TypeError("Cannot " + e2 + " a stream using a released reader");
    }
    function tu(e2) {
      e2._closedPromise = qc((t2, r2) => {
        e2._closedPromise_resolve = t2, e2._closedPromise_reject = r2;
      });
    }
    function ru(e2, t2) {
      tu(e2), iu(e2, t2);
    }
    function iu(e2, t2) {
      void 0 !== e2._closedPromise_reject && (Gc(e2._closedPromise), e2._closedPromise_reject(t2), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0);
    }
    function nu(e2) {
      void 0 !== e2._closedPromise_resolve && (e2._closedPromise_resolve(void 0), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0);
    }
    var au = Cc("[[AbortSteps]]");
    var su = Cc("[[ErrorSteps]]");
    var ou = Cc("[[CancelSteps]]");
    var cu = Cc("[[PullSteps]]");
    var uu = Number.isFinite || function(e2) {
      return "number" == typeof e2 && isFinite(e2);
    };
    var hu = Math.trunc || function(e2) {
      return e2 < 0 ? Math.ceil(e2) : Math.floor(e2);
    };
    function fu(e2, t2) {
      if (void 0 !== e2 && ("object" != typeof (r2 = e2) && "function" != typeof r2))
        throw new TypeError(t2 + " is not an object.");
      var r2;
    }
    function du(e2, t2) {
      if ("function" != typeof e2)
        throw new TypeError(t2 + " is not a function.");
    }
    function lu(e2, t2) {
      if (!function(e3) {
        return "object" == typeof e3 && null !== e3 || "function" == typeof e3;
      }(e2))
        throw new TypeError(t2 + " is not an object.");
    }
    function pu(e2, t2, r2) {
      if (void 0 === e2)
        throw new TypeError(`Parameter ${t2} is required in '${r2}'.`);
    }
    function yu(e2, t2, r2) {
      if (void 0 === e2)
        throw new TypeError(`${t2} is required in '${r2}'.`);
    }
    function bu(e2) {
      return Number(e2);
    }
    function mu(e2) {
      return 0 === e2 ? 0 : e2;
    }
    function gu(e2, t2) {
      const r2 = Number.MAX_SAFE_INTEGER;
      let i2 = Number(e2);
      if (i2 = mu(i2), !uu(i2))
        throw new TypeError(t2 + " is not a finite number");
      if (i2 = function(e3) {
        return mu(hu(e3));
      }(i2), i2 < 0 || i2 > r2)
        throw new TypeError(`${t2} is outside the accepted range of 0 to ${r2}, inclusive`);
      return uu(i2) && 0 !== i2 ? i2 : 0;
    }
    function wu(e2, t2) {
      if (!If(e2))
        throw new TypeError(t2 + " is not a ReadableStream.");
    }
    function vu(e2) {
      return new Eu(e2);
    }
    function _u(e2, t2) {
      e2._reader._readRequests.push(t2);
    }
    function ku(e2, t2, r2) {
      const i2 = e2._reader._readRequests.shift();
      r2 ? i2._closeSteps() : i2._chunkSteps(t2);
    }
    function Au(e2) {
      return e2._reader._readRequests.length;
    }
    function Su(e2) {
      const t2 = e2._reader;
      return void 0 !== t2 && !!Pu(t2);
    }
    var Eu = class {
      constructor(e2) {
        if (pu(e2, 1, "ReadableStreamDefaultReader"), wu(e2, "First parameter"), Bf(e2))
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        Xc(this, e2), this._readRequests = new Yc();
      }
      get closed() {
        return Pu(this) ? this._closedPromise : Fc(Mu("closed"));
      }
      cancel(e2) {
        return Pu(this) ? void 0 === this._ownerReadableStream ? Fc(eu("cancel")) : Qc(this, e2) : Fc(Mu("cancel"));
      }
      read() {
        if (!Pu(this))
          return Fc(Mu("read"));
        if (void 0 === this._ownerReadableStream)
          return Fc(eu("read from"));
        let e2, t2;
        const r2 = qc((r3, i2) => {
          e2 = r3, t2 = i2;
        });
        return xu(this, { _chunkSteps: (t3) => e2({ value: t3, done: false }), _closeSteps: () => e2({ value: void 0, done: true }), _errorSteps: (e3) => t2(e3) }), r2;
      }
      releaseLock() {
        if (!Pu(this))
          throw Mu("releaseLock");
        if (void 0 !== this._ownerReadableStream) {
          if (this._readRequests.length > 0)
            throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
          Jc(this);
        }
      }
    };
    function Pu(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_readRequests");
    }
    function xu(e2, t2) {
      const r2 = e2._ownerReadableStream;
      r2._disturbed = true, "closed" === r2._state ? t2._closeSteps() : "errored" === r2._state ? t2._errorSteps(r2._storedError) : r2._readableStreamController[cu](t2);
    }
    function Mu(e2) {
      return new TypeError(`ReadableStreamDefaultReader.prototype.${e2} can only be used on a ReadableStreamDefaultReader`);
    }
    var Cu;
    Object.defineProperties(Eu.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Eu.prototype, Cc.toStringTag, { value: "ReadableStreamDefaultReader", configurable: true }), "symbol" == typeof Cc.asyncIterator && (Cu = { [Cc.asyncIterator]() {
      return this;
    } }, Object.defineProperty(Cu, Cc.asyncIterator, { enumerable: false }));
    var Ku = class {
      constructor(e2, t2) {
        this._ongoingPromise = void 0, this._isFinished = false, this._reader = e2, this._preventCancel = t2;
      }
      next() {
        const e2 = () => this._nextSteps();
        return this._ongoingPromise = this._ongoingPromise ? Hc(this._ongoingPromise, e2, e2) : e2(), this._ongoingPromise;
      }
      return(e2) {
        const t2 = () => this._returnSteps(e2);
        return this._ongoingPromise ? Hc(this._ongoingPromise, t2, t2) : t2();
      }
      _nextSteps() {
        if (this._isFinished)
          return Promise.resolve({ value: void 0, done: true });
        const e2 = this._reader;
        if (void 0 === e2._ownerReadableStream)
          return Fc(eu("iterate"));
        let t2, r2;
        const i2 = qc((e3, i3) => {
          t2 = e3, r2 = i3;
        });
        return xu(e2, { _chunkSteps: (e3) => {
          this._ongoingPromise = void 0, Vc(() => t2({ value: e3, done: false }));
        }, _closeSteps: () => {
          this._ongoingPromise = void 0, this._isFinished = true, Jc(e2), t2({ value: void 0, done: true });
        }, _errorSteps: (t3) => {
          this._ongoingPromise = void 0, this._isFinished = true, Jc(e2), r2(t3);
        } }), i2;
      }
      _returnSteps(e2) {
        if (this._isFinished)
          return Promise.resolve({ value: e2, done: true });
        this._isFinished = true;
        const t2 = this._reader;
        if (void 0 === t2._ownerReadableStream)
          return Fc(eu("finish iterating"));
        if (!this._preventCancel) {
          const r2 = Qc(t2, e2);
          return Jc(t2), Hc(r2, () => ({ value: e2, done: true }));
        }
        return Jc(t2), Oc({ value: e2, done: true });
      }
    };
    var Du = { next() {
      return Ru(this) ? this._asyncIteratorImpl.next() : Fc(Uu("next"));
    }, return(e2) {
      return Ru(this) ? this._asyncIteratorImpl.return(e2) : Fc(Uu("return"));
    } };
    function Ru(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_asyncIteratorImpl");
    }
    function Uu(e2) {
      return new TypeError(`ReadableStreamAsyncIterator.${e2} can only be used on a ReadableSteamAsyncIterator`);
    }
    void 0 !== Cu && Object.setPrototypeOf(Du, Cu);
    var Iu = Number.isNaN || function(e2) {
      return e2 != e2;
    };
    function Bu(e2) {
      return !!function(e3) {
        if ("number" != typeof e3)
          return false;
        if (Iu(e3))
          return false;
        if (e3 < 0)
          return false;
        return true;
      }(e2) && e2 !== 1 / 0;
    }
    function Tu(e2) {
      const t2 = e2._queue.shift();
      return e2._queueTotalSize -= t2.size, e2._queueTotalSize < 0 && (e2._queueTotalSize = 0), t2.value;
    }
    function zu(e2, t2, r2) {
      if (!Bu(r2 = Number(r2)))
        throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
      e2._queue.push({ value: t2, size: r2 }), e2._queueTotalSize += r2;
    }
    function qu(e2) {
      e2._queue = new Yc(), e2._queueTotalSize = 0;
    }
    function Ou(e2) {
      return e2.slice();
    }
    var Fu = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get view() {
        if (!Lu(this))
          throw ah("view");
        return this._view;
      }
      respond(e2) {
        if (!Lu(this))
          throw ah("respond");
        if (pu(e2, 1, "respond"), e2 = gu(e2, "First parameter"), void 0 === this._associatedReadableByteStreamController)
          throw new TypeError("This BYOB request has been invalidated");
        this._view.buffer, function(e3, t2) {
          if (!Bu(t2 = Number(t2)))
            throw new RangeError("bytesWritten must be a finite");
          Ju(e3, t2);
        }(this._associatedReadableByteStreamController, e2);
      }
      respondWithNewView(e2) {
        if (!Lu(this))
          throw ah("respondWithNewView");
        if (pu(e2, 1, "respondWithNewView"), !ArrayBuffer.isView(e2))
          throw new TypeError("You can only respond with array buffer views");
        if (0 === e2.byteLength)
          throw new TypeError("chunk must have non-zero byteLength");
        if (0 === e2.buffer.byteLength)
          throw new TypeError("chunk's buffer must have non-zero byteLength");
        if (void 0 === this._associatedReadableByteStreamController)
          throw new TypeError("This BYOB request has been invalidated");
        !function(e3, t2) {
          const r2 = e3._pendingPullIntos.peek();
          if (r2.byteOffset + r2.bytesFilled !== t2.byteOffset)
            throw new RangeError("The region specified by view does not match byobRequest");
          if (r2.byteLength !== t2.byteLength)
            throw new RangeError("The buffer of view has different capacity than byobRequest");
          r2.buffer = t2.buffer, Ju(e3, t2.byteLength);
        }(this._associatedReadableByteStreamController, e2);
      }
    };
    Object.defineProperties(Fu.prototype, { respond: { enumerable: true }, respondWithNewView: { enumerable: true }, view: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Fu.prototype, Cc.toStringTag, { value: "ReadableStreamBYOBRequest", configurable: true });
    var Nu = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get byobRequest() {
        if (!ju(this))
          throw sh("byobRequest");
        if (null === this._byobRequest && this._pendingPullIntos.length > 0) {
          const e2 = this._pendingPullIntos.peek(), t2 = new Uint8Array(e2.buffer, e2.byteOffset + e2.bytesFilled, e2.byteLength - e2.bytesFilled), r2 = Object.create(Fu.prototype);
          !function(e3, t3, r3) {
            e3._associatedReadableByteStreamController = t3, e3._view = r3;
          }(r2, this, t2), this._byobRequest = r2;
        }
        return this._byobRequest;
      }
      get desiredSize() {
        if (!ju(this))
          throw sh("desiredSize");
        return ih(this);
      }
      close() {
        if (!ju(this))
          throw sh("close");
        if (this._closeRequested)
          throw new TypeError("The stream has already been closed; do not close it again!");
        const e2 = this._controlledReadableByteStream._state;
        if ("readable" !== e2)
          throw new TypeError(`The stream (in ${e2} state) is not in the readable state and cannot be closed`);
        !function(e3) {
          const t2 = e3._controlledReadableByteStream;
          if (e3._closeRequested || "readable" !== t2._state)
            return;
          if (e3._queueTotalSize > 0)
            return void (e3._closeRequested = true);
          if (e3._pendingPullIntos.length > 0) {
            if (e3._pendingPullIntos.peek().bytesFilled > 0) {
              const t3 = new TypeError("Insufficient bytes to fill elements in the given buffer");
              throw rh(e3, t3), t3;
            }
          }
          th(e3), zf(t2);
        }(this);
      }
      enqueue(e2) {
        if (!ju(this))
          throw sh("enqueue");
        if (pu(e2, 1, "enqueue"), !ArrayBuffer.isView(e2))
          throw new TypeError("chunk must be an array buffer view");
        if (0 === e2.byteLength)
          throw new TypeError("chunk must have non-zero byteLength");
        if (0 === e2.buffer.byteLength)
          throw new TypeError("chunk's buffer must have non-zero byteLength");
        if (this._closeRequested)
          throw new TypeError("stream is closed or draining");
        const t2 = this._controlledReadableByteStream._state;
        if ("readable" !== t2)
          throw new TypeError(`The stream (in ${t2} state) is not in the readable state and cannot be enqueued to`);
        !function(e3, t3) {
          const r2 = e3._controlledReadableByteStream;
          if (e3._closeRequested || "readable" !== r2._state)
            return;
          const i2 = t3.buffer, n2 = t3.byteOffset, a2 = t3.byteLength, s2 = i2;
          if (Su(r2))
            if (0 === Au(r2))
              Vu(e3, s2, n2, a2);
            else {
              ku(r2, new Uint8Array(s2, n2, a2), false);
            }
          else
            uh(r2) ? (Vu(e3, s2, n2, a2), Qu(e3)) : Vu(e3, s2, n2, a2);
          Wu(e3);
        }(this, e2);
      }
      error(e2) {
        if (!ju(this))
          throw sh("error");
        rh(this, e2);
      }
      [ou](e2) {
        if (this._pendingPullIntos.length > 0) {
          this._pendingPullIntos.peek().bytesFilled = 0;
        }
        qu(this);
        const t2 = this._cancelAlgorithm(e2);
        return th(this), t2;
      }
      [cu](e2) {
        const t2 = this._controlledReadableByteStream;
        if (this._queueTotalSize > 0) {
          const t3 = this._queue.shift();
          this._queueTotalSize -= t3.byteLength, Yu(this);
          const r3 = new Uint8Array(t3.buffer, t3.byteOffset, t3.byteLength);
          return void e2._chunkSteps(r3);
        }
        const r2 = this._autoAllocateChunkSize;
        if (void 0 !== r2) {
          let t3;
          try {
            t3 = new ArrayBuffer(r2);
          } catch (t4) {
            return void e2._errorSteps(t4);
          }
          const i2 = { buffer: t3, byteOffset: 0, byteLength: r2, bytesFilled: 0, elementSize: 1, viewConstructor: Uint8Array, readerType: "default" };
          this._pendingPullIntos.push(i2);
        }
        _u(t2, e2), Wu(this);
      }
    };
    function ju(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_controlledReadableByteStream");
    }
    function Lu(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_associatedReadableByteStreamController");
    }
    function Wu(e2) {
      if (!function(e3) {
        const t2 = e3._controlledReadableByteStream;
        if ("readable" !== t2._state)
          return false;
        if (e3._closeRequested)
          return false;
        if (!e3._started)
          return false;
        if (Su(t2) && Au(t2) > 0)
          return true;
        if (uh(t2) && ch(t2) > 0)
          return true;
        if (ih(e3) > 0)
          return true;
        return false;
      }(e2))
        return;
      if (e2._pulling)
        return void (e2._pullAgain = true);
      e2._pulling = true;
      jc(e2._pullAlgorithm(), () => {
        e2._pulling = false, e2._pullAgain && (e2._pullAgain = false, Wu(e2));
      }, (t2) => {
        rh(e2, t2);
      });
    }
    function Hu(e2, t2) {
      let r2 = false;
      "closed" === e2._state && (r2 = true);
      const i2 = Gu(t2);
      "default" === t2.readerType ? ku(e2, i2, r2) : function(e3, t3, r3) {
        const i3 = e3._reader._readIntoRequests.shift();
        r3 ? i3._closeSteps(t3) : i3._chunkSteps(t3);
      }(e2, i2, r2);
    }
    function Gu(e2) {
      const t2 = e2.bytesFilled, r2 = e2.elementSize;
      return new e2.viewConstructor(e2.buffer, e2.byteOffset, t2 / r2);
    }
    function Vu(e2, t2, r2, i2) {
      e2._queue.push({ buffer: t2, byteOffset: r2, byteLength: i2 }), e2._queueTotalSize += i2;
    }
    function $u(e2, t2) {
      const r2 = t2.elementSize, i2 = t2.bytesFilled - t2.bytesFilled % r2, n2 = Math.min(e2._queueTotalSize, t2.byteLength - t2.bytesFilled), a2 = t2.bytesFilled + n2, s2 = a2 - a2 % r2;
      let o2 = n2, c2 = false;
      s2 > i2 && (o2 = s2 - t2.bytesFilled, c2 = true);
      const u2 = e2._queue;
      for (; o2 > 0; ) {
        const r3 = u2.peek(), i3 = Math.min(o2, r3.byteLength), n3 = t2.byteOffset + t2.bytesFilled;
        h2 = t2.buffer, f2 = n3, d2 = r3.buffer, l2 = r3.byteOffset, p2 = i3, new Uint8Array(h2).set(new Uint8Array(d2, l2, p2), f2), r3.byteLength === i3 ? u2.shift() : (r3.byteOffset += i3, r3.byteLength -= i3), e2._queueTotalSize -= i3, Zu(e2, i3, t2), o2 -= i3;
      }
      var h2, f2, d2, l2, p2;
      return c2;
    }
    function Zu(e2, t2, r2) {
      Xu(e2), r2.bytesFilled += t2;
    }
    function Yu(e2) {
      0 === e2._queueTotalSize && e2._closeRequested ? (th(e2), zf(e2._controlledReadableByteStream)) : Wu(e2);
    }
    function Xu(e2) {
      null !== e2._byobRequest && (e2._byobRequest._associatedReadableByteStreamController = void 0, e2._byobRequest._view = null, e2._byobRequest = null);
    }
    function Qu(e2) {
      for (; e2._pendingPullIntos.length > 0; ) {
        if (0 === e2._queueTotalSize)
          return;
        const t2 = e2._pendingPullIntos.peek();
        $u(e2, t2) && (eh(e2), Hu(e2._controlledReadableByteStream, t2));
      }
    }
    function Ju(e2, t2) {
      const r2 = e2._pendingPullIntos.peek();
      if ("closed" === e2._controlledReadableByteStream._state) {
        if (0 !== t2)
          throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
        !function(e3, t3) {
          t3.buffer = t3.buffer;
          const r3 = e3._controlledReadableByteStream;
          if (uh(r3))
            for (; ch(r3) > 0; )
              Hu(r3, eh(e3));
        }(e2, r2);
      } else
        !function(e3, t3, r3) {
          if (r3.bytesFilled + t3 > r3.byteLength)
            throw new RangeError("bytesWritten out of range");
          if (Zu(e3, t3, r3), r3.bytesFilled < r3.elementSize)
            return;
          eh(e3);
          const i2 = r3.bytesFilled % r3.elementSize;
          if (i2 > 0) {
            const t4 = r3.byteOffset + r3.bytesFilled, n2 = r3.buffer.slice(t4 - i2, t4);
            Vu(e3, n2, 0, n2.byteLength);
          }
          r3.buffer = r3.buffer, r3.bytesFilled -= i2, Hu(e3._controlledReadableByteStream, r3), Qu(e3);
        }(e2, t2, r2);
      Wu(e2);
    }
    function eh(e2) {
      const t2 = e2._pendingPullIntos.shift();
      return Xu(e2), t2;
    }
    function th(e2) {
      e2._pullAlgorithm = void 0, e2._cancelAlgorithm = void 0;
    }
    function rh(e2, t2) {
      const r2 = e2._controlledReadableByteStream;
      "readable" === r2._state && (!function(e3) {
        Xu(e3), e3._pendingPullIntos = new Yc();
      }(e2), qu(e2), th(e2), qf(r2, t2));
    }
    function ih(e2) {
      const t2 = e2._controlledReadableByteStream._state;
      return "errored" === t2 ? null : "closed" === t2 ? 0 : e2._strategyHWM - e2._queueTotalSize;
    }
    function nh(e2, t2, r2) {
      const i2 = Object.create(Nu.prototype);
      let n2 = () => {
      }, a2 = () => Oc(void 0), s2 = () => Oc(void 0);
      void 0 !== t2.start && (n2 = () => t2.start(i2)), void 0 !== t2.pull && (a2 = () => t2.pull(i2)), void 0 !== t2.cancel && (s2 = (e3) => t2.cancel(e3));
      const o2 = t2.autoAllocateChunkSize;
      if (0 === o2)
        throw new TypeError("autoAllocateChunkSize must be greater than 0");
      !function(e3, t3, r3, i3, n3, a3, s3) {
        t3._controlledReadableByteStream = e3, t3._pullAgain = false, t3._pulling = false, t3._byobRequest = null, t3._queue = t3._queueTotalSize = void 0, qu(t3), t3._closeRequested = false, t3._started = false, t3._strategyHWM = a3, t3._pullAlgorithm = i3, t3._cancelAlgorithm = n3, t3._autoAllocateChunkSize = s3, t3._pendingPullIntos = new Yc(), e3._readableStreamController = t3, jc(Oc(r3()), () => {
          t3._started = true, Wu(t3);
        }, (e4) => {
          rh(t3, e4);
        });
      }(e2, i2, n2, a2, s2, r2, o2);
    }
    function ah(e2) {
      return new TypeError(`ReadableStreamBYOBRequest.prototype.${e2} can only be used on a ReadableStreamBYOBRequest`);
    }
    function sh(e2) {
      return new TypeError(`ReadableByteStreamController.prototype.${e2} can only be used on a ReadableByteStreamController`);
    }
    function oh(e2, t2) {
      e2._reader._readIntoRequests.push(t2);
    }
    function ch(e2) {
      return e2._reader._readIntoRequests.length;
    }
    function uh(e2) {
      const t2 = e2._reader;
      return void 0 !== t2 && !!fh(t2);
    }
    Object.defineProperties(Nu.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, byobRequest: { enumerable: true }, desiredSize: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Nu.prototype, Cc.toStringTag, { value: "ReadableByteStreamController", configurable: true });
    var hh = class {
      constructor(e2) {
        if (pu(e2, 1, "ReadableStreamBYOBReader"), wu(e2, "First parameter"), Bf(e2))
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        if (!ju(e2._readableStreamController))
          throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
        Xc(this, e2), this._readIntoRequests = new Yc();
      }
      get closed() {
        return fh(this) ? this._closedPromise : Fc(dh("closed"));
      }
      cancel(e2) {
        return fh(this) ? void 0 === this._ownerReadableStream ? Fc(eu("cancel")) : Qc(this, e2) : Fc(dh("cancel"));
      }
      read(e2) {
        if (!fh(this))
          return Fc(dh("read"));
        if (!ArrayBuffer.isView(e2))
          return Fc(new TypeError("view must be an array buffer view"));
        if (0 === e2.byteLength)
          return Fc(new TypeError("view must have non-zero byteLength"));
        if (0 === e2.buffer.byteLength)
          return Fc(new TypeError("view's buffer must have non-zero byteLength"));
        if (void 0 === this._ownerReadableStream)
          return Fc(eu("read from"));
        let t2, r2;
        const i2 = qc((e3, i3) => {
          t2 = e3, r2 = i3;
        });
        return function(e3, t3, r3) {
          const i3 = e3._ownerReadableStream;
          i3._disturbed = true, "errored" === i3._state ? r3._errorSteps(i3._storedError) : function(e4, t4, r4) {
            const i4 = e4._controlledReadableByteStream;
            let n2 = 1;
            t4.constructor !== DataView && (n2 = t4.constructor.BYTES_PER_ELEMENT);
            const a2 = t4.constructor, s2 = { buffer: t4.buffer, byteOffset: t4.byteOffset, byteLength: t4.byteLength, bytesFilled: 0, elementSize: n2, viewConstructor: a2, readerType: "byob" };
            if (e4._pendingPullIntos.length > 0)
              return e4._pendingPullIntos.push(s2), void oh(i4, r4);
            if ("closed" !== i4._state) {
              if (e4._queueTotalSize > 0) {
                if ($u(e4, s2)) {
                  const t5 = Gu(s2);
                  return Yu(e4), void r4._chunkSteps(t5);
                }
                if (e4._closeRequested) {
                  const t5 = new TypeError("Insufficient bytes to fill elements in the given buffer");
                  return rh(e4, t5), void r4._errorSteps(t5);
                }
              }
              e4._pendingPullIntos.push(s2), oh(i4, r4), Wu(e4);
            } else {
              const e5 = new a2(s2.buffer, s2.byteOffset, 0);
              r4._closeSteps(e5);
            }
          }(i3._readableStreamController, t3, r3);
        }(this, e2, { _chunkSteps: (e3) => t2({ value: e3, done: false }), _closeSteps: (e3) => t2({ value: e3, done: true }), _errorSteps: (e3) => r2(e3) }), i2;
      }
      releaseLock() {
        if (!fh(this))
          throw dh("releaseLock");
        if (void 0 !== this._ownerReadableStream) {
          if (this._readIntoRequests.length > 0)
            throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
          Jc(this);
        }
      }
    };
    function fh(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_readIntoRequests");
    }
    function dh(e2) {
      return new TypeError(`ReadableStreamBYOBReader.prototype.${e2} can only be used on a ReadableStreamBYOBReader`);
    }
    function lh(e2, t2) {
      const { highWaterMark: r2 } = e2;
      if (void 0 === r2)
        return t2;
      if (Iu(r2) || r2 < 0)
        throw new RangeError("Invalid highWaterMark");
      return r2;
    }
    function ph(e2) {
      const { size: t2 } = e2;
      return t2 || (() => 1);
    }
    function yh(e2, t2) {
      fu(e2, t2);
      const r2 = null == e2 ? void 0 : e2.highWaterMark, i2 = null == e2 ? void 0 : e2.size;
      return { highWaterMark: void 0 === r2 ? void 0 : bu(r2), size: void 0 === i2 ? void 0 : bh(i2, t2 + " has member 'size' that") };
    }
    function bh(e2, t2) {
      return du(e2, t2), (t3) => bu(e2(t3));
    }
    function mh(e2, t2, r2) {
      return du(e2, r2), (r3) => Zc(e2, t2, [r3]);
    }
    function gh(e2, t2, r2) {
      return du(e2, r2), () => Zc(e2, t2, []);
    }
    function wh(e2, t2, r2) {
      return du(e2, r2), (r3) => $c(e2, t2, [r3]);
    }
    function vh(e2, t2, r2) {
      return du(e2, r2), (r3, i2) => Zc(e2, t2, [r3, i2]);
    }
    function _h(e2, t2) {
      if (!Eh(e2))
        throw new TypeError(t2 + " is not a WritableStream.");
    }
    Object.defineProperties(hh.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(hh.prototype, Cc.toStringTag, { value: "ReadableStreamBYOBReader", configurable: true });
    var kh = class {
      constructor(e2 = {}, t2 = {}) {
        void 0 === e2 ? e2 = null : lu(e2, "First parameter");
        const r2 = yh(t2, "Second parameter"), i2 = function(e3, t3) {
          fu(e3, t3);
          const r3 = null == e3 ? void 0 : e3.abort, i3 = null == e3 ? void 0 : e3.close, n3 = null == e3 ? void 0 : e3.start, a2 = null == e3 ? void 0 : e3.type, s2 = null == e3 ? void 0 : e3.write;
          return { abort: void 0 === r3 ? void 0 : mh(r3, e3, t3 + " has member 'abort' that"), close: void 0 === i3 ? void 0 : gh(i3, e3, t3 + " has member 'close' that"), start: void 0 === n3 ? void 0 : wh(n3, e3, t3 + " has member 'start' that"), write: void 0 === s2 ? void 0 : vh(s2, e3, t3 + " has member 'write' that"), type: a2 };
        }(e2, "First parameter");
        Sh(this);
        if (void 0 !== i2.type)
          throw new RangeError("Invalid type is specified");
        const n2 = ph(r2);
        !function(e3, t3, r3, i3) {
          const n3 = Object.create(Lh.prototype);
          let a2 = () => {
          }, s2 = () => Oc(void 0), o2 = () => Oc(void 0), c2 = () => Oc(void 0);
          void 0 !== t3.start && (a2 = () => t3.start(n3));
          void 0 !== t3.write && (s2 = (e4) => t3.write(e4, n3));
          void 0 !== t3.close && (o2 = () => t3.close());
          void 0 !== t3.abort && (c2 = (e4) => t3.abort(e4));
          Wh(e3, n3, a2, s2, o2, c2, r3, i3);
        }(this, i2, lh(r2, 1), n2);
      }
      get locked() {
        if (!Eh(this))
          throw Xh("locked");
        return Ph(this);
      }
      abort(e2) {
        return Eh(this) ? Ph(this) ? Fc(new TypeError("Cannot abort a stream that already has a writer")) : xh(this, e2) : Fc(Xh("abort"));
      }
      close() {
        return Eh(this) ? Ph(this) ? Fc(new TypeError("Cannot close a stream that already has a writer")) : Rh(this) ? Fc(new TypeError("Cannot close an already-closing stream")) : Mh(this) : Fc(Xh("close"));
      }
      getWriter() {
        if (!Eh(this))
          throw Xh("getWriter");
        return Ah(this);
      }
    };
    function Ah(e2) {
      return new Bh(e2);
    }
    function Sh(e2) {
      e2._state = "writable", e2._storedError = void 0, e2._writer = void 0, e2._writableStreamController = void 0, e2._writeRequests = new Yc(), e2._inFlightWriteRequest = void 0, e2._closeRequest = void 0, e2._inFlightCloseRequest = void 0, e2._pendingAbortRequest = void 0, e2._backpressure = false;
    }
    function Eh(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_writableStreamController");
    }
    function Ph(e2) {
      return void 0 !== e2._writer;
    }
    function xh(e2, t2) {
      const r2 = e2._state;
      if ("closed" === r2 || "errored" === r2)
        return Oc(void 0);
      if (void 0 !== e2._pendingAbortRequest)
        return e2._pendingAbortRequest._promise;
      let i2 = false;
      "erroring" === r2 && (i2 = true, t2 = void 0);
      const n2 = qc((r3, n3) => {
        e2._pendingAbortRequest = { _promise: void 0, _resolve: r3, _reject: n3, _reason: t2, _wasAlreadyErroring: i2 };
      });
      return e2._pendingAbortRequest._promise = n2, i2 || Kh(e2, t2), n2;
    }
    function Mh(e2) {
      const t2 = e2._state;
      if ("closed" === t2 || "errored" === t2)
        return Fc(new TypeError(`The stream (in ${t2} state) is not in the writable state and cannot be closed`));
      const r2 = qc((t3, r3) => {
        const i3 = { _resolve: t3, _reject: r3 };
        e2._closeRequest = i3;
      }), i2 = e2._writer;
      var n2;
      return void 0 !== i2 && e2._backpressure && "writable" === t2 && uf(i2), zu(n2 = e2._writableStreamController, jh, 0), Vh(n2), r2;
    }
    function Ch(e2, t2) {
      "writable" !== e2._state ? Dh(e2) : Kh(e2, t2);
    }
    function Kh(e2, t2) {
      const r2 = e2._writableStreamController;
      e2._state = "erroring", e2._storedError = t2;
      const i2 = e2._writer;
      void 0 !== i2 && Oh(i2, t2), !function(e3) {
        if (void 0 === e3._inFlightWriteRequest && void 0 === e3._inFlightCloseRequest)
          return false;
        return true;
      }(e2) && r2._started && Dh(e2);
    }
    function Dh(e2) {
      e2._state = "errored", e2._writableStreamController[su]();
      const t2 = e2._storedError;
      if (e2._writeRequests.forEach((e3) => {
        e3._reject(t2);
      }), e2._writeRequests = new Yc(), void 0 === e2._pendingAbortRequest)
        return void Uh(e2);
      const r2 = e2._pendingAbortRequest;
      if (e2._pendingAbortRequest = void 0, r2._wasAlreadyErroring)
        return r2._reject(t2), void Uh(e2);
      jc(e2._writableStreamController[au](r2._reason), () => {
        r2._resolve(), Uh(e2);
      }, (t3) => {
        r2._reject(t3), Uh(e2);
      });
    }
    function Rh(e2) {
      return void 0 !== e2._closeRequest || void 0 !== e2._inFlightCloseRequest;
    }
    function Uh(e2) {
      void 0 !== e2._closeRequest && (e2._closeRequest._reject(e2._storedError), e2._closeRequest = void 0);
      const t2 = e2._writer;
      void 0 !== t2 && rf(t2, e2._storedError);
    }
    function Ih(e2, t2) {
      const r2 = e2._writer;
      void 0 !== r2 && t2 !== e2._backpressure && (t2 ? function(e3) {
        af(e3);
      }(r2) : uf(r2)), e2._backpressure = t2;
    }
    Object.defineProperties(kh.prototype, { abort: { enumerable: true }, close: { enumerable: true }, getWriter: { enumerable: true }, locked: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(kh.prototype, Cc.toStringTag, { value: "WritableStream", configurable: true });
    var Bh = class {
      constructor(e2) {
        if (pu(e2, 1, "WritableStreamDefaultWriter"), _h(e2, "First parameter"), Ph(e2))
          throw new TypeError("This stream has already been locked for exclusive writing by another writer");
        this._ownerWritableStream = e2, e2._writer = this;
        const t2 = e2._state;
        if ("writable" === t2)
          !Rh(e2) && e2._backpressure ? af(this) : of(this), ef(this);
        else if ("erroring" === t2)
          sf(this, e2._storedError), ef(this);
        else if ("closed" === t2)
          of(this), ef(r2 = this), nf(r2);
        else {
          const t3 = e2._storedError;
          sf(this, t3), tf(this, t3);
        }
        var r2;
      }
      get closed() {
        return Th(this) ? this._closedPromise : Fc(Qh("closed"));
      }
      get desiredSize() {
        if (!Th(this))
          throw Qh("desiredSize");
        if (void 0 === this._ownerWritableStream)
          throw Jh("desiredSize");
        return function(e2) {
          const t2 = e2._ownerWritableStream, r2 = t2._state;
          if ("errored" === r2 || "erroring" === r2)
            return null;
          if ("closed" === r2)
            return 0;
          return Gh(t2._writableStreamController);
        }(this);
      }
      get ready() {
        return Th(this) ? this._readyPromise : Fc(Qh("ready"));
      }
      abort(e2) {
        return Th(this) ? void 0 === this._ownerWritableStream ? Fc(Jh("abort")) : function(e3, t2) {
          return xh(e3._ownerWritableStream, t2);
        }(this, e2) : Fc(Qh("abort"));
      }
      close() {
        if (!Th(this))
          return Fc(Qh("close"));
        const e2 = this._ownerWritableStream;
        return void 0 === e2 ? Fc(Jh("close")) : Rh(e2) ? Fc(new TypeError("Cannot close an already-closing stream")) : zh(this);
      }
      releaseLock() {
        if (!Th(this))
          throw Qh("releaseLock");
        void 0 !== this._ownerWritableStream && Fh(this);
      }
      write(e2) {
        return Th(this) ? void 0 === this._ownerWritableStream ? Fc(Jh("write to")) : Nh(this, e2) : Fc(Qh("write"));
      }
    };
    function Th(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_ownerWritableStream");
    }
    function zh(e2) {
      return Mh(e2._ownerWritableStream);
    }
    function qh(e2, t2) {
      "pending" === e2._closedPromiseState ? rf(e2, t2) : function(e3, t3) {
        tf(e3, t3);
      }(e2, t2);
    }
    function Oh(e2, t2) {
      "pending" === e2._readyPromiseState ? cf(e2, t2) : function(e3, t3) {
        sf(e3, t3);
      }(e2, t2);
    }
    function Fh(e2) {
      const t2 = e2._ownerWritableStream, r2 = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
      Oh(e2, r2), qh(e2, r2), t2._writer = void 0, e2._ownerWritableStream = void 0;
    }
    function Nh(e2, t2) {
      const r2 = e2._ownerWritableStream, i2 = r2._writableStreamController, n2 = function(e3, t3) {
        try {
          return e3._strategySizeAlgorithm(t3);
        } catch (t4) {
          return $h(e3, t4), 1;
        }
      }(i2, t2);
      if (r2 !== e2._ownerWritableStream)
        return Fc(Jh("write to"));
      const a2 = r2._state;
      if ("errored" === a2)
        return Fc(r2._storedError);
      if (Rh(r2) || "closed" === a2)
        return Fc(new TypeError("The stream is closing or closed and cannot be written to"));
      if ("erroring" === a2)
        return Fc(r2._storedError);
      const s2 = function(e3) {
        return qc((t3, r3) => {
          const i3 = { _resolve: t3, _reject: r3 };
          e3._writeRequests.push(i3);
        });
      }(r2);
      return function(e3, t3, r3) {
        try {
          zu(e3, t3, r3);
        } catch (t4) {
          return void $h(e3, t4);
        }
        const i3 = e3._controlledWritableStream;
        if (!Rh(i3) && "writable" === i3._state) {
          Ih(i3, Zh(e3));
        }
        Vh(e3);
      }(i2, t2, n2), s2;
    }
    Object.defineProperties(Bh.prototype, { abort: { enumerable: true }, close: { enumerable: true }, releaseLock: { enumerable: true }, write: { enumerable: true }, closed: { enumerable: true }, desiredSize: { enumerable: true }, ready: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Bh.prototype, Cc.toStringTag, { value: "WritableStreamDefaultWriter", configurable: true });
    var jh = {};
    var Lh = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      error(e2) {
        if (!function(e3) {
          if (!Rc(e3))
            return false;
          if (!Object.prototype.hasOwnProperty.call(e3, "_controlledWritableStream"))
            return false;
          return true;
        }(this))
          throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");
        "writable" === this._controlledWritableStream._state && Yh(this, e2);
      }
      [au](e2) {
        const t2 = this._abortAlgorithm(e2);
        return Hh(this), t2;
      }
      [su]() {
        qu(this);
      }
    };
    function Wh(e2, t2, r2, i2, n2, a2, s2, o2) {
      t2._controlledWritableStream = e2, e2._writableStreamController = t2, t2._queue = void 0, t2._queueTotalSize = void 0, qu(t2), t2._started = false, t2._strategySizeAlgorithm = o2, t2._strategyHWM = s2, t2._writeAlgorithm = i2, t2._closeAlgorithm = n2, t2._abortAlgorithm = a2;
      const c2 = Zh(t2);
      Ih(e2, c2);
      jc(Oc(r2()), () => {
        t2._started = true, Vh(t2);
      }, (r3) => {
        t2._started = true, Ch(e2, r3);
      });
    }
    function Hh(e2) {
      e2._writeAlgorithm = void 0, e2._closeAlgorithm = void 0, e2._abortAlgorithm = void 0, e2._strategySizeAlgorithm = void 0;
    }
    function Gh(e2) {
      return e2._strategyHWM - e2._queueTotalSize;
    }
    function Vh(e2) {
      const t2 = e2._controlledWritableStream;
      if (!e2._started)
        return;
      if (void 0 !== t2._inFlightWriteRequest)
        return;
      if ("erroring" === t2._state)
        return void Dh(t2);
      if (0 === e2._queue.length)
        return;
      const r2 = e2._queue.peek().value;
      r2 === jh ? function(e3) {
        const t3 = e3._controlledWritableStream;
        (function(e4) {
          e4._inFlightCloseRequest = e4._closeRequest, e4._closeRequest = void 0;
        })(t3), Tu(e3);
        const r3 = e3._closeAlgorithm();
        Hh(e3), jc(r3, () => {
          !function(e4) {
            e4._inFlightCloseRequest._resolve(void 0), e4._inFlightCloseRequest = void 0, "erroring" === e4._state && (e4._storedError = void 0, void 0 !== e4._pendingAbortRequest && (e4._pendingAbortRequest._resolve(), e4._pendingAbortRequest = void 0)), e4._state = "closed";
            const t4 = e4._writer;
            void 0 !== t4 && nf(t4);
          }(t3);
        }, (e4) => {
          !function(e5, t4) {
            e5._inFlightCloseRequest._reject(t4), e5._inFlightCloseRequest = void 0, void 0 !== e5._pendingAbortRequest && (e5._pendingAbortRequest._reject(t4), e5._pendingAbortRequest = void 0), Ch(e5, t4);
          }(t3, e4);
        });
      }(e2) : function(e3, t3) {
        const r3 = e3._controlledWritableStream;
        !function(e4) {
          e4._inFlightWriteRequest = e4._writeRequests.shift();
        }(r3);
        jc(e3._writeAlgorithm(t3), () => {
          !function(e4) {
            e4._inFlightWriteRequest._resolve(void 0), e4._inFlightWriteRequest = void 0;
          }(r3);
          const t4 = r3._state;
          if (Tu(e3), !Rh(r3) && "writable" === t4) {
            const t5 = Zh(e3);
            Ih(r3, t5);
          }
          Vh(e3);
        }, (t4) => {
          "writable" === r3._state && Hh(e3), function(e4, t5) {
            e4._inFlightWriteRequest._reject(t5), e4._inFlightWriteRequest = void 0, Ch(e4, t5);
          }(r3, t4);
        });
      }(e2, r2);
    }
    function $h(e2, t2) {
      "writable" === e2._controlledWritableStream._state && Yh(e2, t2);
    }
    function Zh(e2) {
      return Gh(e2) <= 0;
    }
    function Yh(e2, t2) {
      const r2 = e2._controlledWritableStream;
      Hh(e2), Kh(r2, t2);
    }
    function Xh(e2) {
      return new TypeError(`WritableStream.prototype.${e2} can only be used on a WritableStream`);
    }
    function Qh(e2) {
      return new TypeError(`WritableStreamDefaultWriter.prototype.${e2} can only be used on a WritableStreamDefaultWriter`);
    }
    function Jh(e2) {
      return new TypeError("Cannot " + e2 + " a stream using a released writer");
    }
    function ef(e2) {
      e2._closedPromise = qc((t2, r2) => {
        e2._closedPromise_resolve = t2, e2._closedPromise_reject = r2, e2._closedPromiseState = "pending";
      });
    }
    function tf(e2, t2) {
      ef(e2), rf(e2, t2);
    }
    function rf(e2, t2) {
      void 0 !== e2._closedPromise_reject && (Gc(e2._closedPromise), e2._closedPromise_reject(t2), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0, e2._closedPromiseState = "rejected");
    }
    function nf(e2) {
      void 0 !== e2._closedPromise_resolve && (e2._closedPromise_resolve(void 0), e2._closedPromise_resolve = void 0, e2._closedPromise_reject = void 0, e2._closedPromiseState = "resolved");
    }
    function af(e2) {
      e2._readyPromise = qc((t2, r2) => {
        e2._readyPromise_resolve = t2, e2._readyPromise_reject = r2;
      }), e2._readyPromiseState = "pending";
    }
    function sf(e2, t2) {
      af(e2), cf(e2, t2);
    }
    function of(e2) {
      af(e2), uf(e2);
    }
    function cf(e2, t2) {
      void 0 !== e2._readyPromise_reject && (Gc(e2._readyPromise), e2._readyPromise_reject(t2), e2._readyPromise_resolve = void 0, e2._readyPromise_reject = void 0, e2._readyPromiseState = "rejected");
    }
    function uf(e2) {
      void 0 !== e2._readyPromise_resolve && (e2._readyPromise_resolve(void 0), e2._readyPromise_resolve = void 0, e2._readyPromise_reject = void 0, e2._readyPromiseState = "fulfilled");
    }
    Object.defineProperties(Lh.prototype, { error: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Lh.prototype, Cc.toStringTag, { value: "WritableStreamDefaultController", configurable: true });
    var hf = "undefined" != typeof DOMException ? DOMException : void 0;
    var ff = function(e2) {
      if ("function" != typeof e2 && "object" != typeof e2)
        return false;
      try {
        return new e2(), true;
      } catch (e3) {
        return false;
      }
    }(hf) ? hf : function() {
      const e2 = function(e3, t2) {
        this.message = e3 || "", this.name = t2 || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
      };
      return Object.defineProperty(e2.prototype = Object.create(Error.prototype), "constructor", { value: e2, writable: true, configurable: true }), e2;
    }();
    function df(e2, t2, r2, i2, n2, a2) {
      const s2 = vu(e2), o2 = Ah(t2);
      e2._disturbed = true;
      let c2 = false, u2 = Oc(void 0);
      return qc((h2, f2) => {
        let d2;
        if (void 0 !== a2) {
          if (d2 = () => {
            const r3 = new ff("Aborted", "AbortError"), a3 = [];
            i2 || a3.push(() => "writable" === t2._state ? xh(t2, r3) : Oc(void 0)), n2 || a3.push(() => "readable" === e2._state ? Tf(e2, r3) : Oc(void 0)), y2(() => Promise.all(a3.map((e3) => e3())), true, r3);
          }, a2.aborted)
            return void d2();
          a2.addEventListener("abort", d2);
        }
        if (p2(e2, s2._closedPromise, (e3) => {
          i2 ? b2(true, e3) : y2(() => xh(t2, e3), true, e3);
        }), p2(t2, o2._closedPromise, (t3) => {
          n2 ? b2(true, t3) : y2(() => Tf(e2, t3), true, t3);
        }), function(e3, t3, r3) {
          "closed" === e3._state ? r3() : Lc(t3, r3);
        }(e2, s2._closedPromise, () => {
          r2 ? b2() : y2(() => function(e3) {
            const t3 = e3._ownerWritableStream, r3 = t3._state;
            return Rh(t3) || "closed" === r3 ? Oc(void 0) : "errored" === r3 ? Fc(t3._storedError) : zh(e3);
          }(o2));
        }), Rh(t2) || "closed" === t2._state) {
          const t3 = new TypeError("the destination writable stream closed before all data could be piped to it");
          n2 ? b2(true, t3) : y2(() => Tf(e2, t3), true, t3);
        }
        function l2() {
          const e3 = u2;
          return Nc(u2, () => e3 !== u2 ? l2() : void 0);
        }
        function p2(e3, t3, r3) {
          "errored" === e3._state ? r3(e3._storedError) : Wc(t3, r3);
        }
        function y2(e3, r3, i3) {
          function n3() {
            jc(e3(), () => m2(r3, i3), (e4) => m2(true, e4));
          }
          c2 || (c2 = true, "writable" !== t2._state || Rh(t2) ? n3() : Lc(l2(), n3));
        }
        function b2(e3, r3) {
          c2 || (c2 = true, "writable" !== t2._state || Rh(t2) ? m2(e3, r3) : Lc(l2(), () => m2(e3, r3)));
        }
        function m2(e3, t3) {
          Fh(o2), Jc(s2), void 0 !== a2 && a2.removeEventListener("abort", d2), e3 ? f2(t3) : h2(void 0);
        }
        Gc(qc((e3, t3) => {
          !function r3(i3) {
            i3 ? e3() : Nc(c2 ? Oc(true) : Nc(o2._readyPromise, () => qc((e4, t4) => {
              xu(s2, { _chunkSteps: (t5) => {
                u2 = Nc(Nh(o2, t5), void 0, Kc), e4(false);
              }, _closeSteps: () => e4(true), _errorSteps: t4 });
            })), r3, t3);
          }(false);
        }));
      });
    }
    var lf = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!pf(this))
          throw Sf("desiredSize");
        return _f(this);
      }
      close() {
        if (!pf(this))
          throw Sf("close");
        if (!kf(this))
          throw new TypeError("The stream is not in a state that permits close");
        gf(this);
      }
      enqueue(e2) {
        if (!pf(this))
          throw Sf("enqueue");
        if (!kf(this))
          throw new TypeError("The stream is not in a state that permits enqueue");
        return wf(this, e2);
      }
      error(e2) {
        if (!pf(this))
          throw Sf("error");
        vf(this, e2);
      }
      [ou](e2) {
        qu(this);
        const t2 = this._cancelAlgorithm(e2);
        return mf(this), t2;
      }
      [cu](e2) {
        const t2 = this._controlledReadableStream;
        if (this._queue.length > 0) {
          const r2 = Tu(this);
          this._closeRequested && 0 === this._queue.length ? (mf(this), zf(t2)) : yf(this), e2._chunkSteps(r2);
        } else
          _u(t2, e2), yf(this);
      }
    };
    function pf(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_controlledReadableStream");
    }
    function yf(e2) {
      if (!bf(e2))
        return;
      if (e2._pulling)
        return void (e2._pullAgain = true);
      e2._pulling = true;
      jc(e2._pullAlgorithm(), () => {
        e2._pulling = false, e2._pullAgain && (e2._pullAgain = false, yf(e2));
      }, (t2) => {
        vf(e2, t2);
      });
    }
    function bf(e2) {
      const t2 = e2._controlledReadableStream;
      if (!kf(e2))
        return false;
      if (!e2._started)
        return false;
      if (Bf(t2) && Au(t2) > 0)
        return true;
      return _f(e2) > 0;
    }
    function mf(e2) {
      e2._pullAlgorithm = void 0, e2._cancelAlgorithm = void 0, e2._strategySizeAlgorithm = void 0;
    }
    function gf(e2) {
      if (!kf(e2))
        return;
      const t2 = e2._controlledReadableStream;
      e2._closeRequested = true, 0 === e2._queue.length && (mf(e2), zf(t2));
    }
    function wf(e2, t2) {
      if (!kf(e2))
        return;
      const r2 = e2._controlledReadableStream;
      if (Bf(r2) && Au(r2) > 0)
        ku(r2, t2, false);
      else {
        let r3;
        try {
          r3 = e2._strategySizeAlgorithm(t2);
        } catch (t3) {
          throw vf(e2, t3), t3;
        }
        try {
          zu(e2, t2, r3);
        } catch (t3) {
          throw vf(e2, t3), t3;
        }
      }
      yf(e2);
    }
    function vf(e2, t2) {
      const r2 = e2._controlledReadableStream;
      "readable" === r2._state && (qu(e2), mf(e2), qf(r2, t2));
    }
    function _f(e2) {
      const t2 = e2._controlledReadableStream._state;
      return "errored" === t2 ? null : "closed" === t2 ? 0 : e2._strategyHWM - e2._queueTotalSize;
    }
    function kf(e2) {
      const t2 = e2._controlledReadableStream._state;
      return !e2._closeRequested && "readable" === t2;
    }
    function Af(e2, t2, r2, i2, n2, a2, s2) {
      t2._controlledReadableStream = e2, t2._queue = void 0, t2._queueTotalSize = void 0, qu(t2), t2._started = false, t2._closeRequested = false, t2._pullAgain = false, t2._pulling = false, t2._strategySizeAlgorithm = s2, t2._strategyHWM = a2, t2._pullAlgorithm = i2, t2._cancelAlgorithm = n2, e2._readableStreamController = t2;
      jc(Oc(r2()), () => {
        t2._started = true, yf(t2);
      }, (e3) => {
        vf(t2, e3);
      });
    }
    function Sf(e2) {
      return new TypeError(`ReadableStreamDefaultController.prototype.${e2} can only be used on a ReadableStreamDefaultController`);
    }
    function Ef(e2, t2, r2) {
      return du(e2, r2), (r3) => Zc(e2, t2, [r3]);
    }
    function Pf(e2, t2, r2) {
      return du(e2, r2), (r3) => Zc(e2, t2, [r3]);
    }
    function xf(e2, t2, r2) {
      return du(e2, r2), (r3) => $c(e2, t2, [r3]);
    }
    function Mf(e2, t2) {
      if ("bytes" !== (e2 = "" + e2))
        throw new TypeError(`${t2} '${e2}' is not a valid enumeration value for ReadableStreamType`);
      return e2;
    }
    function Cf(e2, t2) {
      if ("byob" !== (e2 = "" + e2))
        throw new TypeError(`${t2} '${e2}' is not a valid enumeration value for ReadableStreamReaderMode`);
      return e2;
    }
    function Kf(e2, t2) {
      fu(e2, t2);
      const r2 = null == e2 ? void 0 : e2.preventAbort, i2 = null == e2 ? void 0 : e2.preventCancel, n2 = null == e2 ? void 0 : e2.preventClose, a2 = null == e2 ? void 0 : e2.signal;
      return void 0 !== a2 && function(e3, t3) {
        if (!function(e4) {
          if ("object" != typeof e4 || null === e4)
            return false;
          try {
            return "boolean" == typeof e4.aborted;
          } catch (e5) {
            return false;
          }
        }(e3))
          throw new TypeError(t3 + " is not an AbortSignal.");
      }(a2, t2 + " has member 'signal' that"), { preventAbort: !!r2, preventCancel: !!i2, preventClose: !!n2, signal: a2 };
    }
    Object.defineProperties(lf.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, desiredSize: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(lf.prototype, Cc.toStringTag, { value: "ReadableStreamDefaultController", configurable: true });
    var Df = class {
      constructor(e2 = {}, t2 = {}) {
        void 0 === e2 ? e2 = null : lu(e2, "First parameter");
        const r2 = yh(t2, "Second parameter"), i2 = function(e3, t3) {
          fu(e3, t3);
          const r3 = e3, i3 = null == r3 ? void 0 : r3.autoAllocateChunkSize, n2 = null == r3 ? void 0 : r3.cancel, a2 = null == r3 ? void 0 : r3.pull, s2 = null == r3 ? void 0 : r3.start, o2 = null == r3 ? void 0 : r3.type;
          return { autoAllocateChunkSize: void 0 === i3 ? void 0 : gu(i3, t3 + " has member 'autoAllocateChunkSize' that"), cancel: void 0 === n2 ? void 0 : Ef(n2, r3, t3 + " has member 'cancel' that"), pull: void 0 === a2 ? void 0 : Pf(a2, r3, t3 + " has member 'pull' that"), start: void 0 === s2 ? void 0 : xf(s2, r3, t3 + " has member 'start' that"), type: void 0 === o2 ? void 0 : Mf(o2, t3 + " has member 'type' that") };
        }(e2, "First parameter");
        if (Uf(this), "bytes" === i2.type) {
          if (void 0 !== r2.size)
            throw new RangeError("The strategy for a byte stream cannot have a size function");
          nh(this, i2, lh(r2, 0));
        } else {
          const e3 = ph(r2);
          !function(e4, t3, r3, i3) {
            const n2 = Object.create(lf.prototype);
            let a2 = () => {
            }, s2 = () => Oc(void 0), o2 = () => Oc(void 0);
            void 0 !== t3.start && (a2 = () => t3.start(n2)), void 0 !== t3.pull && (s2 = () => t3.pull(n2)), void 0 !== t3.cancel && (o2 = (e5) => t3.cancel(e5)), Af(e4, n2, a2, s2, o2, r3, i3);
          }(this, i2, lh(r2, 1), e3);
        }
      }
      get locked() {
        if (!If(this))
          throw Of("locked");
        return Bf(this);
      }
      cancel(e2) {
        return If(this) ? Bf(this) ? Fc(new TypeError("Cannot cancel a stream that already has a reader")) : Tf(this, e2) : Fc(Of("cancel"));
      }
      getReader(e2) {
        if (!If(this))
          throw Of("getReader");
        return void 0 === function(e3, t2) {
          fu(e3, t2);
          const r2 = null == e3 ? void 0 : e3.mode;
          return { mode: void 0 === r2 ? void 0 : Cf(r2, t2 + " has member 'mode' that") };
        }(e2, "First parameter").mode ? vu(this) : function(e3) {
          return new hh(e3);
        }(this);
      }
      pipeThrough(e2, t2 = {}) {
        if (!If(this))
          throw Of("pipeThrough");
        pu(e2, 1, "pipeThrough");
        const r2 = function(e3, t3) {
          fu(e3, t3);
          const r3 = null == e3 ? void 0 : e3.readable;
          yu(r3, "readable", "ReadableWritablePair"), wu(r3, t3 + " has member 'readable' that");
          const i3 = null == e3 ? void 0 : e3.writable;
          return yu(i3, "writable", "ReadableWritablePair"), _h(i3, t3 + " has member 'writable' that"), { readable: r3, writable: i3 };
        }(e2, "First parameter"), i2 = Kf(t2, "Second parameter");
        if (Bf(this))
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
        if (Ph(r2.writable))
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
        return Gc(df(this, r2.writable, i2.preventClose, i2.preventAbort, i2.preventCancel, i2.signal)), r2.readable;
      }
      pipeTo(e2, t2 = {}) {
        if (!If(this))
          return Fc(Of("pipeTo"));
        if (void 0 === e2)
          return Fc("Parameter 1 is required in 'pipeTo'.");
        if (!Eh(e2))
          return Fc(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
        let r2;
        try {
          r2 = Kf(t2, "Second parameter");
        } catch (e3) {
          return Fc(e3);
        }
        return Bf(this) ? Fc(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : Ph(e2) ? Fc(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : df(this, e2, r2.preventClose, r2.preventAbort, r2.preventCancel, r2.signal);
      }
      tee() {
        if (!If(this))
          throw Of("tee");
        const e2 = function(e3, t2) {
          const r2 = vu(e3);
          let i2, n2, a2, s2, o2, c2 = false, u2 = false, h2 = false;
          const f2 = qc((e4) => {
            o2 = e4;
          });
          function d2() {
            return c2 || (c2 = true, xu(r2, { _chunkSteps: (e4) => {
              Vc(() => {
                c2 = false;
                const t3 = e4, r3 = e4;
                u2 || wf(a2._readableStreamController, t3), h2 || wf(s2._readableStreamController, r3);
              });
            }, _closeSteps: () => {
              c2 = false, u2 || gf(a2._readableStreamController), h2 || gf(s2._readableStreamController), u2 && h2 || o2(void 0);
            }, _errorSteps: () => {
              c2 = false;
            } })), Oc(void 0);
          }
          function l2() {
          }
          return a2 = Rf(l2, d2, function(t3) {
            if (u2 = true, i2 = t3, h2) {
              const t4 = Ou([i2, n2]), r3 = Tf(e3, t4);
              o2(r3);
            }
            return f2;
          }), s2 = Rf(l2, d2, function(t3) {
            if (h2 = true, n2 = t3, u2) {
              const t4 = Ou([i2, n2]), r3 = Tf(e3, t4);
              o2(r3);
            }
            return f2;
          }), Wc(r2._closedPromise, (e4) => {
            vf(a2._readableStreamController, e4), vf(s2._readableStreamController, e4), u2 && h2 || o2(void 0);
          }), [a2, s2];
        }(this);
        return Ou(e2);
      }
      values(e2) {
        if (!If(this))
          throw Of("values");
        return function(e3, t2) {
          const r2 = vu(e3), i2 = new Ku(r2, t2), n2 = Object.create(Du);
          return n2._asyncIteratorImpl = i2, n2;
        }(this, function(e3, t2) {
          return fu(e3, t2), { preventCancel: !!(null == e3 ? void 0 : e3.preventCancel) };
        }(e2, "First parameter").preventCancel);
      }
    };
    function Rf(e2, t2, r2, i2 = 1, n2 = () => 1) {
      const a2 = Object.create(Df.prototype);
      Uf(a2);
      return Af(a2, Object.create(lf.prototype), e2, t2, r2, i2, n2), a2;
    }
    function Uf(e2) {
      e2._state = "readable", e2._reader = void 0, e2._storedError = void 0, e2._disturbed = false;
    }
    function If(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_readableStreamController");
    }
    function Bf(e2) {
      return void 0 !== e2._reader;
    }
    function Tf(e2, t2) {
      if (e2._disturbed = true, "closed" === e2._state)
        return Oc(void 0);
      if ("errored" === e2._state)
        return Fc(e2._storedError);
      zf(e2);
      return Hc(e2._readableStreamController[ou](t2), Kc);
    }
    function zf(e2) {
      e2._state = "closed";
      const t2 = e2._reader;
      void 0 !== t2 && (nu(t2), Pu(t2) && (t2._readRequests.forEach((e3) => {
        e3._closeSteps();
      }), t2._readRequests = new Yc()));
    }
    function qf(e2, t2) {
      e2._state = "errored", e2._storedError = t2;
      const r2 = e2._reader;
      void 0 !== r2 && (iu(r2, t2), Pu(r2) ? (r2._readRequests.forEach((e3) => {
        e3._errorSteps(t2);
      }), r2._readRequests = new Yc()) : (r2._readIntoRequests.forEach((e3) => {
        e3._errorSteps(t2);
      }), r2._readIntoRequests = new Yc()));
    }
    function Of(e2) {
      return new TypeError(`ReadableStream.prototype.${e2} can only be used on a ReadableStream`);
    }
    function Ff(e2, t2) {
      fu(e2, t2);
      const r2 = null == e2 ? void 0 : e2.highWaterMark;
      return yu(r2, "highWaterMark", "QueuingStrategyInit"), { highWaterMark: bu(r2) };
    }
    Object.defineProperties(Df.prototype, { cancel: { enumerable: true }, getReader: { enumerable: true }, pipeThrough: { enumerable: true }, pipeTo: { enumerable: true }, tee: { enumerable: true }, values: { enumerable: true }, locked: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Df.prototype, Cc.toStringTag, { value: "ReadableStream", configurable: true }), "symbol" == typeof Cc.asyncIterator && Object.defineProperty(Df.prototype, Cc.asyncIterator, { value: Df.prototype.values, writable: true, configurable: true });
    var Nf = function(e2) {
      return e2.byteLength;
    };
    var jf = class {
      constructor(e2) {
        pu(e2, 1, "ByteLengthQueuingStrategy"), e2 = Ff(e2, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = e2.highWaterMark;
      }
      get highWaterMark() {
        if (!Wf(this))
          throw Lf("highWaterMark");
        return this._byteLengthQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!Wf(this))
          throw Lf("size");
        return Nf;
      }
    };
    function Lf(e2) {
      return new TypeError(`ByteLengthQueuingStrategy.prototype.${e2} can only be used on a ByteLengthQueuingStrategy`);
    }
    function Wf(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_byteLengthQueuingStrategyHighWaterMark");
    }
    Object.defineProperties(jf.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(jf.prototype, Cc.toStringTag, { value: "ByteLengthQueuingStrategy", configurable: true });
    var Hf = function() {
      return 1;
    };
    var Gf = class {
      constructor(e2) {
        pu(e2, 1, "CountQueuingStrategy"), e2 = Ff(e2, "First parameter"), this._countQueuingStrategyHighWaterMark = e2.highWaterMark;
      }
      get highWaterMark() {
        if (!$f(this))
          throw Vf("highWaterMark");
        return this._countQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!$f(this))
          throw Vf("size");
        return Hf;
      }
    };
    function Vf(e2) {
      return new TypeError(`CountQueuingStrategy.prototype.${e2} can only be used on a CountQueuingStrategy`);
    }
    function $f(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_countQueuingStrategyHighWaterMark");
    }
    function Zf(e2, t2, r2) {
      return du(e2, r2), (r3) => Zc(e2, t2, [r3]);
    }
    function Yf(e2, t2, r2) {
      return du(e2, r2), (r3) => $c(e2, t2, [r3]);
    }
    function Xf(e2, t2, r2) {
      return du(e2, r2), (r3, i2) => Zc(e2, t2, [r3, i2]);
    }
    Object.defineProperties(Gf.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Gf.prototype, Cc.toStringTag, { value: "CountQueuingStrategy", configurable: true });
    var Qf = class {
      constructor(e2 = {}, t2 = {}, r2 = {}) {
        void 0 === e2 && (e2 = null);
        const i2 = yh(t2, "Second parameter"), n2 = yh(r2, "Third parameter"), a2 = function(e3, t3) {
          fu(e3, t3);
          const r3 = null == e3 ? void 0 : e3.flush, i3 = null == e3 ? void 0 : e3.readableType, n3 = null == e3 ? void 0 : e3.start, a3 = null == e3 ? void 0 : e3.transform, s3 = null == e3 ? void 0 : e3.writableType;
          return { flush: void 0 === r3 ? void 0 : Zf(r3, e3, t3 + " has member 'flush' that"), readableType: i3, start: void 0 === n3 ? void 0 : Yf(n3, e3, t3 + " has member 'start' that"), transform: void 0 === a3 ? void 0 : Xf(a3, e3, t3 + " has member 'transform' that"), writableType: s3 };
        }(e2, "First parameter");
        if (void 0 !== a2.readableType)
          throw new RangeError("Invalid readableType specified");
        if (void 0 !== a2.writableType)
          throw new RangeError("Invalid writableType specified");
        const s2 = lh(n2, 0), o2 = ph(n2), c2 = lh(i2, 1), u2 = ph(i2);
        let h2;
        !function(e3, t3, r3, i3, n3, a3) {
          function s3() {
            return t3;
          }
          function o3(t4) {
            return function(e4, t5) {
              const r4 = e4._transformStreamController;
              if (e4._backpressure) {
                return Hc(e4._backpressureChangePromise, () => {
                  const i4 = e4._writable;
                  if ("erroring" === i4._state)
                    throw i4._storedError;
                  return od(r4, t5);
                });
              }
              return od(r4, t5);
            }(e3, t4);
          }
          function c3(t4) {
            return function(e4, t5) {
              return ed(e4, t5), Oc(void 0);
            }(e3, t4);
          }
          function u3() {
            return function(e4) {
              const t4 = e4._readable, r4 = e4._transformStreamController, i4 = r4._flushAlgorithm();
              return ad(r4), Hc(i4, () => {
                if ("errored" === t4._state)
                  throw t4._storedError;
                gf(t4._readableStreamController);
              }, (r5) => {
                throw ed(e4, r5), t4._storedError;
              });
            }(e3);
          }
          function h3() {
            return function(e4) {
              return rd(e4, false), e4._backpressureChangePromise;
            }(e3);
          }
          function f2(t4) {
            return td(e3, t4), Oc(void 0);
          }
          e3._writable = function(e4, t4, r4, i4, n4 = 1, a4 = () => 1) {
            const s4 = Object.create(kh.prototype);
            return Sh(s4), Wh(s4, Object.create(Lh.prototype), e4, t4, r4, i4, n4, a4), s4;
          }(s3, o3, u3, c3, r3, i3), e3._readable = Rf(s3, h3, f2, n3, a3), e3._backpressure = void 0, e3._backpressureChangePromise = void 0, e3._backpressureChangePromise_resolve = void 0, rd(e3, true), e3._transformStreamController = void 0;
        }(this, qc((e3) => {
          h2 = e3;
        }), c2, u2, s2, o2), function(e3, t3) {
          const r3 = Object.create(id.prototype);
          let i3 = (e4) => {
            try {
              return sd(r3, e4), Oc(void 0);
            } catch (e5) {
              return Fc(e5);
            }
          }, n3 = () => Oc(void 0);
          void 0 !== t3.transform && (i3 = (e4) => t3.transform(e4, r3));
          void 0 !== t3.flush && (n3 = () => t3.flush(r3));
          !function(e4, t4, r4, i4) {
            t4._controlledTransformStream = e4, e4._transformStreamController = t4, t4._transformAlgorithm = r4, t4._flushAlgorithm = i4;
          }(e3, r3, i3, n3);
        }(this, a2), void 0 !== a2.start ? h2(a2.start(this._transformStreamController)) : h2(void 0);
      }
      get readable() {
        if (!Jf(this))
          throw ud("readable");
        return this._readable;
      }
      get writable() {
        if (!Jf(this))
          throw ud("writable");
        return this._writable;
      }
    };
    function Jf(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_transformStreamController");
    }
    function ed(e2, t2) {
      vf(e2._readable._readableStreamController, t2), td(e2, t2);
    }
    function td(e2, t2) {
      ad(e2._transformStreamController), $h(e2._writable._writableStreamController, t2), e2._backpressure && rd(e2, false);
    }
    function rd(e2, t2) {
      void 0 !== e2._backpressureChangePromise && e2._backpressureChangePromise_resolve(), e2._backpressureChangePromise = qc((t3) => {
        e2._backpressureChangePromise_resolve = t3;
      }), e2._backpressure = t2;
    }
    Object.defineProperties(Qf.prototype, { readable: { enumerable: true }, writable: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(Qf.prototype, Cc.toStringTag, { value: "TransformStream", configurable: true });
    var id = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!nd(this))
          throw cd("desiredSize");
        return _f(this._controlledTransformStream._readable._readableStreamController);
      }
      enqueue(e2) {
        if (!nd(this))
          throw cd("enqueue");
        sd(this, e2);
      }
      error(e2) {
        if (!nd(this))
          throw cd("error");
        var t2;
        t2 = e2, ed(this._controlledTransformStream, t2);
      }
      terminate() {
        if (!nd(this))
          throw cd("terminate");
        !function(e2) {
          const t2 = e2._controlledTransformStream;
          gf(t2._readable._readableStreamController);
          td(t2, new TypeError("TransformStream terminated"));
        }(this);
      }
    };
    function nd(e2) {
      return !!Rc(e2) && !!Object.prototype.hasOwnProperty.call(e2, "_controlledTransformStream");
    }
    function ad(e2) {
      e2._transformAlgorithm = void 0, e2._flushAlgorithm = void 0;
    }
    function sd(e2, t2) {
      const r2 = e2._controlledTransformStream, i2 = r2._readable._readableStreamController;
      if (!kf(i2))
        throw new TypeError("Readable side is not in a state that permits enqueue");
      try {
        wf(i2, t2);
      } catch (e3) {
        throw td(r2, e3), r2._readable._storedError;
      }
      (function(e3) {
        return !bf(e3);
      })(i2) !== r2._backpressure && rd(r2, true);
    }
    function od(e2, t2) {
      return Hc(e2._transformAlgorithm(t2), void 0, (t3) => {
        throw ed(e2._controlledTransformStream, t3), t3;
      });
    }
    function cd(e2) {
      return new TypeError(`TransformStreamDefaultController.prototype.${e2} can only be used on a TransformStreamDefaultController`);
    }
    function ud(e2) {
      return new TypeError(`TransformStream.prototype.${e2} can only be used on a TransformStream`);
    }
    Object.defineProperties(id.prototype, { enqueue: { enumerable: true }, error: { enumerable: true }, terminate: { enumerable: true }, desiredSize: { enumerable: true } }), "symbol" == typeof Cc.toStringTag && Object.defineProperty(id.prototype, Cc.toStringTag, { value: "TransformStreamDefaultController", configurable: true });
    var hd = /* @__PURE__ */ Object.freeze({ __proto__: null, ByteLengthQueuingStrategy: jf, CountQueuingStrategy: Gf, ReadableByteStreamController: Nu, ReadableStream: Df, ReadableStreamBYOBReader: hh, ReadableStreamBYOBRequest: Fu, ReadableStreamDefaultController: lf, ReadableStreamDefaultReader: Eu, TransformStream: Qf, TransformStreamDefaultController: id, WritableStream: kh, WritableStreamDefaultController: Lh, WritableStreamDefaultWriter: Bh });
    var fd = function(e2, t2) {
      return (fd = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
        e3.__proto__ = t3;
      } || function(e3, t3) {
        for (var r2 in t3)
          Object.prototype.hasOwnProperty.call(t3, r2) && (e3[r2] = t3[r2]);
      })(e2, t2);
    };
    function dd(e2, t2) {
      if ("function" != typeof t2 && null !== t2)
        throw new TypeError("Class extends value " + t2 + " is not a constructor or null");
      function r2() {
        this.constructor = e2;
      }
      fd(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
    }
    function ld(e2) {
      if (!e2)
        throw new TypeError("Assertion failed");
    }
    function pd() {
    }
    function yd(e2) {
      return "object" == typeof e2 && null !== e2 || "function" == typeof e2;
    }
    function bd(e2) {
      if ("function" != typeof e2)
        return false;
      var t2 = false;
      try {
        new e2({ start: function() {
          t2 = true;
        } });
      } catch (e3) {
      }
      return t2;
    }
    function md(e2) {
      return !!yd(e2) && "function" == typeof e2.getReader;
    }
    function gd(e2) {
      return !!yd(e2) && "function" == typeof e2.getWriter;
    }
    function wd(e2) {
      return !!yd(e2) && (!!md(e2.readable) && !!gd(e2.writable));
    }
    function vd(e2) {
      try {
        return e2.getReader({ mode: "byob" }).releaseLock(), true;
      } catch (e3) {
        return false;
      }
    }
    function _d(e2, t2) {
      var r2 = (void 0 === t2 ? {} : t2).type;
      return ld(md(e2)), ld(false === e2.locked), "bytes" === (r2 = kd(r2)) ? new Pd(e2) : new Sd(e2);
    }
    function kd(e2) {
      var t2 = e2 + "";
      if ("bytes" === t2)
        return t2;
      if (void 0 === e2)
        return e2;
      throw new RangeError("Invalid type is specified");
    }
    var Ad = function() {
      function e2(e3) {
        this._underlyingReader = void 0, this._readerMode = void 0, this._readableStreamController = void 0, this._pendingRead = void 0, this._underlyingStream = e3, this._attachDefaultReader();
      }
      return e2.prototype.start = function(e3) {
        this._readableStreamController = e3;
      }, e2.prototype.cancel = function(e3) {
        return ld(void 0 !== this._underlyingReader), this._underlyingReader.cancel(e3);
      }, e2.prototype._attachDefaultReader = function() {
        if ("default" !== this._readerMode) {
          this._detachReader();
          var e3 = this._underlyingStream.getReader();
          this._readerMode = "default", this._attachReader(e3);
        }
      }, e2.prototype._attachReader = function(e3) {
        var t2 = this;
        ld(void 0 === this._underlyingReader), this._underlyingReader = e3;
        var r2 = this._underlyingReader.closed;
        r2 && r2.then(function() {
          return t2._finishPendingRead();
        }).then(function() {
          e3 === t2._underlyingReader && t2._readableStreamController.close();
        }, function(r3) {
          e3 === t2._underlyingReader && t2._readableStreamController.error(r3);
        }).catch(pd);
      }, e2.prototype._detachReader = function() {
        void 0 !== this._underlyingReader && (this._underlyingReader.releaseLock(), this._underlyingReader = void 0, this._readerMode = void 0);
      }, e2.prototype._pullWithDefaultReader = function() {
        var e3 = this;
        this._attachDefaultReader();
        var t2 = this._underlyingReader.read().then(function(t3) {
          var r2 = e3._readableStreamController;
          t3.done ? e3._tryClose() : r2.enqueue(t3.value);
        });
        return this._setPendingRead(t2), t2;
      }, e2.prototype._tryClose = function() {
        try {
          this._readableStreamController.close();
        } catch (e3) {
        }
      }, e2.prototype._setPendingRead = function(e3) {
        var t2, r2 = this, i2 = function() {
          r2._pendingRead === t2 && (r2._pendingRead = void 0);
        };
        this._pendingRead = t2 = e3.then(i2, i2);
      }, e2.prototype._finishPendingRead = function() {
        var e3 = this;
        if (this._pendingRead) {
          var t2 = function() {
            return e3._finishPendingRead();
          };
          return this._pendingRead.then(t2, t2);
        }
      }, e2;
    }();
    var Sd = function(e2) {
      function t2() {
        return null !== e2 && e2.apply(this, arguments) || this;
      }
      return dd(t2, e2), t2.prototype.pull = function() {
        return this._pullWithDefaultReader();
      }, t2;
    }(Ad);
    function Ed(e2) {
      return new Uint8Array(e2.buffer, e2.byteOffset, e2.byteLength);
    }
    var Pd = function(e2) {
      function t2(t3) {
        var r2 = this, i2 = vd(t3);
        return (r2 = e2.call(this, t3) || this)._supportsByob = i2, r2;
      }
      return dd(t2, e2), Object.defineProperty(t2.prototype, "type", { get: function() {
        return "bytes";
      }, enumerable: false, configurable: true }), t2.prototype._attachByobReader = function() {
        if ("byob" !== this._readerMode) {
          ld(this._supportsByob), this._detachReader();
          var e3 = this._underlyingStream.getReader({ mode: "byob" });
          this._readerMode = "byob", this._attachReader(e3);
        }
      }, t2.prototype.pull = function() {
        if (this._supportsByob) {
          var e3 = this._readableStreamController.byobRequest;
          if (e3)
            return this._pullWithByobRequest(e3);
        }
        return this._pullWithDefaultReader();
      }, t2.prototype._pullWithByobRequest = function(e3) {
        var t3 = this;
        this._attachByobReader();
        var r2 = new Uint8Array(e3.view.byteLength), i2 = this._underlyingReader.read(r2).then(function(r3) {
          var i3, n2, a2;
          t3._readableStreamController, r3.done ? (t3._tryClose(), e3.respond(0)) : (i3 = r3.value, n2 = e3.view, a2 = Ed(i3), Ed(n2).set(a2, 0), e3.respond(r3.value.byteLength));
        });
        return this._setPendingRead(i2), i2;
      }, t2;
    }(Ad);
    function xd(e2) {
      ld(gd(e2)), ld(false === e2.locked);
      var t2 = e2.getWriter();
      return new Md(t2);
    }
    var Md = function() {
      function e2(e3) {
        var t2 = this;
        this._writableStreamController = void 0, this._pendingWrite = void 0, this._state = "writable", this._storedError = void 0, this._underlyingWriter = e3, this._errorPromise = new Promise(function(e4, r2) {
          t2._errorPromiseReject = r2;
        }), this._errorPromise.catch(pd);
      }
      return e2.prototype.start = function(e3) {
        var t2 = this;
        this._writableStreamController = e3, this._underlyingWriter.closed.then(function() {
          t2._state = "closed";
        }).catch(function(e4) {
          return t2._finishErroring(e4);
        });
      }, e2.prototype.write = function(e3) {
        var t2 = this, r2 = this._underlyingWriter;
        if (null === r2.desiredSize)
          return r2.ready;
        var i2 = r2.write(e3);
        i2.catch(function(e4) {
          return t2._finishErroring(e4);
        }), r2.ready.catch(function(e4) {
          return t2._startErroring(e4);
        });
        var n2 = Promise.race([i2, this._errorPromise]);
        return this._setPendingWrite(n2), n2;
      }, e2.prototype.close = function() {
        var e3 = this;
        return void 0 === this._pendingWrite ? this._underlyingWriter.close() : this._finishPendingWrite().then(function() {
          return e3.close();
        });
      }, e2.prototype.abort = function(e3) {
        if ("errored" !== this._state)
          return this._underlyingWriter.abort(e3);
      }, e2.prototype._setPendingWrite = function(e3) {
        var t2, r2 = this, i2 = function() {
          r2._pendingWrite === t2 && (r2._pendingWrite = void 0);
        };
        this._pendingWrite = t2 = e3.then(i2, i2);
      }, e2.prototype._finishPendingWrite = function() {
        var e3 = this;
        if (void 0 === this._pendingWrite)
          return Promise.resolve();
        var t2 = function() {
          return e3._finishPendingWrite();
        };
        return this._pendingWrite.then(t2, t2);
      }, e2.prototype._startErroring = function(e3) {
        var t2 = this;
        if ("writable" === this._state) {
          this._state = "erroring", this._storedError = e3;
          var r2 = function() {
            return t2._finishErroring(e3);
          };
          void 0 === this._pendingWrite ? r2() : this._finishPendingWrite().then(r2, r2), this._writableStreamController.error(e3);
        }
      }, e2.prototype._finishErroring = function(e3) {
        "writable" === this._state && this._startErroring(e3), "erroring" === this._state && (this._state = "errored", this._errorPromiseReject(this._storedError));
      }, e2;
    }();
    function Cd(e2) {
      ld(wd(e2));
      var t2 = e2.readable, r2 = e2.writable;
      ld(false === t2.locked), ld(false === r2.locked);
      var i2, n2 = t2.getReader();
      try {
        i2 = r2.getWriter();
      } catch (e3) {
        throw n2.releaseLock(), e3;
      }
      return new Kd(n2, i2);
    }
    var Kd = function() {
      function e2(e3, t2) {
        var r2 = this;
        this._transformStreamController = void 0, this._onRead = function(e4) {
          if (!e4.done)
            return r2._transformStreamController.enqueue(e4.value), r2._reader.read().then(r2._onRead);
        }, this._onError = function(e4) {
          r2._flushReject(e4), r2._transformStreamController.error(e4), r2._reader.cancel(e4).catch(pd), r2._writer.abort(e4).catch(pd);
        }, this._onTerminate = function() {
          r2._flushResolve(), r2._transformStreamController.terminate();
          var e4 = new TypeError("TransformStream terminated");
          r2._writer.abort(e4).catch(pd);
        }, this._reader = e3, this._writer = t2, this._flushPromise = new Promise(function(e4, t3) {
          r2._flushResolve = e4, r2._flushReject = t3;
        });
      }
      return e2.prototype.start = function(e3) {
        this._transformStreamController = e3, this._reader.read().then(this._onRead).then(this._onTerminate, this._onError);
        var t2 = this._reader.closed;
        t2 && t2.then(this._onTerminate, this._onError);
      }, e2.prototype.transform = function(e3) {
        return this._writer.write(e3);
      }, e2.prototype.flush = function() {
        var e3 = this;
        return this._writer.close().then(function() {
          return e3._flushPromise;
        });
      }, e2;
    }();
    var Dd = /* @__PURE__ */ Object.freeze({ __proto__: null, createReadableStreamWrapper: function(e2) {
      ld(function(e3) {
        return !!bd(e3) && !!md(new e3());
      }(e2));
      var t2 = function(e3) {
        try {
          return new e3({ type: "bytes" }), true;
        } catch (e4) {
          return false;
        }
      }(e2);
      return function(r2, i2) {
        var n2 = (void 0 === i2 ? {} : i2).type;
        if ("bytes" !== (n2 = kd(n2)) || t2 || (n2 = void 0), r2.constructor === e2 && ("bytes" !== n2 || vd(r2)))
          return r2;
        if ("bytes" === n2) {
          var a2 = _d(r2, { type: n2 });
          return new e2(a2);
        }
        a2 = _d(r2);
        return new e2(a2);
      };
    }, createTransformStreamWrapper: function(e2) {
      return ld(function(e3) {
        return !!bd(e3) && !!wd(new e3());
      }(e2)), function(t2) {
        if (t2.constructor === e2)
          return t2;
        var r2 = Cd(t2);
        return new e2(r2);
      };
    }, createWrappingReadableSource: _d, createWrappingTransformer: Cd, createWrappingWritableSink: xd, createWritableStreamWrapper: function(e2) {
      return ld(function(e3) {
        return !!bd(e3) && !!gd(new e3());
      }(e2)), function(t2) {
        if (t2.constructor === e2)
          return t2;
        var r2 = xd(t2);
        return new e2(r2);
      };
    } });
    var Rd = bt(function(e2) {
      !function(e3, t2) {
        function r2(e4, t3) {
          if (!e4)
            throw Error(t3 || "Assertion failed");
        }
        function i2(e4, t3) {
          e4.super_ = t3;
          var r3 = function() {
          };
          r3.prototype = t3.prototype, e4.prototype = new r3(), e4.prototype.constructor = e4;
        }
        function n2(e4, t3, r3) {
          if (n2.isBN(e4))
            return e4;
          this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== e4 && ("le" !== t3 && "be" !== t3 || (r3 = t3, t3 = 10), this._init(e4 || 0, t3 || 10, r3 || "be"));
        }
        var a2;
        "object" == typeof e3 ? e3.exports = n2 : t2.BN = n2, n2.BN = n2, n2.wordSize = 26;
        try {
          a2 = u.default.Buffer;
        } catch (e4) {
        }
        function s2(e4, t3, r3) {
          for (var i3 = 0, n3 = Math.min(e4.length, r3), a3 = t3; a3 < n3; a3++) {
            var s3 = e4.charCodeAt(a3) - 48;
            i3 <<= 4, i3 |= s3 >= 49 && s3 <= 54 ? s3 - 49 + 10 : s3 >= 17 && s3 <= 22 ? s3 - 17 + 10 : 15 & s3;
          }
          return i3;
        }
        function o2(e4, t3, r3, i3) {
          for (var n3 = 0, a3 = Math.min(e4.length, r3), s3 = t3; s3 < a3; s3++) {
            var o3 = e4.charCodeAt(s3) - 48;
            n3 *= i3, n3 += o3 >= 49 ? o3 - 49 + 10 : o3 >= 17 ? o3 - 17 + 10 : o3;
          }
          return n3;
        }
        n2.isBN = function(e4) {
          return e4 instanceof n2 || null !== e4 && "object" == typeof e4 && e4.constructor.wordSize === n2.wordSize && Array.isArray(e4.words);
        }, n2.max = function(e4, t3) {
          return e4.cmp(t3) > 0 ? e4 : t3;
        }, n2.min = function(e4, t3) {
          return e4.cmp(t3) < 0 ? e4 : t3;
        }, n2.prototype._init = function(e4, t3, i3) {
          if ("number" == typeof e4)
            return this._initNumber(e4, t3, i3);
          if ("object" == typeof e4)
            return this._initArray(e4, t3, i3);
          "hex" === t3 && (t3 = 16), r2(t3 === (0 | t3) && t3 >= 2 && t3 <= 36);
          var n3 = 0;
          "-" === (e4 = e4.toString().replace(/\s+/g, ""))[0] && n3++, 16 === t3 ? this._parseHex(e4, n3) : this._parseBase(e4, t3, n3), "-" === e4[0] && (this.negative = 1), this.strip(), "le" === i3 && this._initArray(this.toArray(), t3, i3);
        }, n2.prototype._initNumber = function(e4, t3, i3) {
          e4 < 0 && (this.negative = 1, e4 = -e4), e4 < 67108864 ? (this.words = [67108863 & e4], this.length = 1) : e4 < 4503599627370496 ? (this.words = [67108863 & e4, e4 / 67108864 & 67108863], this.length = 2) : (r2(e4 < 9007199254740992), this.words = [67108863 & e4, e4 / 67108864 & 67108863, 1], this.length = 3), "le" === i3 && this._initArray(this.toArray(), t3, i3);
        }, n2.prototype._initArray = function(e4, t3, i3) {
          if (r2("number" == typeof e4.length), e4.length <= 0)
            return this.words = [0], this.length = 1, this;
          this.length = Math.ceil(e4.length / 3), this.words = Array(this.length);
          for (var n3 = 0; n3 < this.length; n3++)
            this.words[n3] = 0;
          var a3, s3, o3 = 0;
          if ("be" === i3)
            for (n3 = e4.length - 1, a3 = 0; n3 >= 0; n3 -= 3)
              s3 = e4[n3] | e4[n3 - 1] << 8 | e4[n3 - 2] << 16, this.words[a3] |= s3 << o3 & 67108863, this.words[a3 + 1] = s3 >>> 26 - o3 & 67108863, (o3 += 24) >= 26 && (o3 -= 26, a3++);
          else if ("le" === i3)
            for (n3 = 0, a3 = 0; n3 < e4.length; n3 += 3)
              s3 = e4[n3] | e4[n3 + 1] << 8 | e4[n3 + 2] << 16, this.words[a3] |= s3 << o3 & 67108863, this.words[a3 + 1] = s3 >>> 26 - o3 & 67108863, (o3 += 24) >= 26 && (o3 -= 26, a3++);
          return this.strip();
        }, n2.prototype._parseHex = function(e4, t3) {
          this.length = Math.ceil((e4.length - t3) / 6), this.words = Array(this.length);
          for (var r3 = 0; r3 < this.length; r3++)
            this.words[r3] = 0;
          var i3, n3, a3 = 0;
          for (r3 = e4.length - 6, i3 = 0; r3 >= t3; r3 -= 6)
            n3 = s2(e4, r3, r3 + 6), this.words[i3] |= n3 << a3 & 67108863, this.words[i3 + 1] |= n3 >>> 26 - a3 & 4194303, (a3 += 24) >= 26 && (a3 -= 26, i3++);
          r3 + 6 !== t3 && (n3 = s2(e4, t3, r3 + 6), this.words[i3] |= n3 << a3 & 67108863, this.words[i3 + 1] |= n3 >>> 26 - a3 & 4194303), this.strip();
        }, n2.prototype._parseBase = function(e4, t3, r3) {
          this.words = [0], this.length = 1;
          for (var i3 = 0, n3 = 1; n3 <= 67108863; n3 *= t3)
            i3++;
          i3--, n3 = n3 / t3 | 0;
          for (var a3 = e4.length - r3, s3 = a3 % i3, c3 = Math.min(a3, a3 - s3) + r3, u2 = 0, h3 = r3; h3 < c3; h3 += i3)
            u2 = o2(e4, h3, h3 + i3, t3), this.imuln(n3), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
          if (0 !== s3) {
            var f3 = 1;
            for (u2 = o2(e4, h3, e4.length, t3), h3 = 0; h3 < s3; h3++)
              f3 *= t3;
            this.imuln(f3), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
          }
        }, n2.prototype.copy = function(e4) {
          e4.words = Array(this.length);
          for (var t3 = 0; t3 < this.length; t3++)
            e4.words[t3] = this.words[t3];
          e4.length = this.length, e4.negative = this.negative, e4.red = this.red;
        }, n2.prototype.clone = function() {
          var e4 = new n2(null);
          return this.copy(e4), e4;
        }, n2.prototype._expand = function(e4) {
          for (; this.length < e4; )
            this.words[this.length++] = 0;
          return this;
        }, n2.prototype.strip = function() {
          for (; this.length > 1 && 0 === this.words[this.length - 1]; )
            this.length--;
          return this._normSign();
        }, n2.prototype._normSign = function() {
          return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
        }, n2.prototype.inspect = function() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var c2 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], h2 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], f2 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
        function d2(e4, t3, r3) {
          r3.negative = t3.negative ^ e4.negative;
          var i3 = e4.length + t3.length | 0;
          r3.length = i3, i3 = i3 - 1 | 0;
          var n3 = 0 | e4.words[0], a3 = 0 | t3.words[0], s3 = n3 * a3, o3 = 67108863 & s3, c3 = s3 / 67108864 | 0;
          r3.words[0] = o3;
          for (var u2 = 1; u2 < i3; u2++) {
            for (var h3 = c3 >>> 26, f3 = 67108863 & c3, d3 = Math.min(u2, t3.length - 1), l3 = Math.max(0, u2 - e4.length + 1); l3 <= d3; l3++) {
              var p3 = u2 - l3 | 0;
              h3 += (s3 = (n3 = 0 | e4.words[p3]) * (a3 = 0 | t3.words[l3]) + f3) / 67108864 | 0, f3 = 67108863 & s3;
            }
            r3.words[u2] = 0 | f3, c3 = 0 | h3;
          }
          return 0 !== c3 ? r3.words[u2] = 0 | c3 : r3.length--, r3.strip();
        }
        n2.prototype.toString = function(e4, t3) {
          var i3;
          if (t3 = 0 | t3 || 1, 16 === (e4 = e4 || 10) || "hex" === e4) {
            i3 = "";
            for (var n3 = 0, a3 = 0, s3 = 0; s3 < this.length; s3++) {
              var o3 = this.words[s3], u2 = (16777215 & (o3 << n3 | a3)).toString(16);
              i3 = 0 !== (a3 = o3 >>> 24 - n3 & 16777215) || s3 !== this.length - 1 ? c2[6 - u2.length] + u2 + i3 : u2 + i3, (n3 += 2) >= 26 && (n3 -= 26, s3--);
            }
            for (0 !== a3 && (i3 = a3.toString(16) + i3); i3.length % t3 != 0; )
              i3 = "0" + i3;
            return 0 !== this.negative && (i3 = "-" + i3), i3;
          }
          if (e4 === (0 | e4) && e4 >= 2 && e4 <= 36) {
            var d3 = h2[e4], l3 = f2[e4];
            i3 = "";
            var p3 = this.clone();
            for (p3.negative = 0; !p3.isZero(); ) {
              var y3 = p3.modn(l3).toString(e4);
              i3 = (p3 = p3.idivn(l3)).isZero() ? y3 + i3 : c2[d3 - y3.length] + y3 + i3;
            }
            for (this.isZero() && (i3 = "0" + i3); i3.length % t3 != 0; )
              i3 = "0" + i3;
            return 0 !== this.negative && (i3 = "-" + i3), i3;
          }
          r2(false, "Base should be between 2 and 36");
        }, n2.prototype.toNumber = function() {
          var e4 = this.words[0];
          return 2 === this.length ? e4 += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e4 += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && r2(false, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -e4 : e4;
        }, n2.prototype.toJSON = function() {
          return this.toString(16);
        }, n2.prototype.toBuffer = function(e4, t3) {
          return r2(void 0 !== a2), this.toArrayLike(a2, e4, t3);
        }, n2.prototype.toArray = function(e4, t3) {
          return this.toArrayLike(Array, e4, t3);
        }, n2.prototype.toArrayLike = function(e4, t3, i3) {
          var n3 = this.byteLength(), a3 = i3 || Math.max(1, n3);
          r2(n3 <= a3, "byte array longer than desired length"), r2(a3 > 0, "Requested array length <= 0"), this.strip();
          var s3, o3, c3 = "le" === t3, u2 = new e4(a3), h3 = this.clone();
          if (c3) {
            for (o3 = 0; !h3.isZero(); o3++)
              s3 = h3.andln(255), h3.iushrn(8), u2[o3] = s3;
            for (; o3 < a3; o3++)
              u2[o3] = 0;
          } else {
            for (o3 = 0; o3 < a3 - n3; o3++)
              u2[o3] = 0;
            for (o3 = 0; !h3.isZero(); o3++)
              s3 = h3.andln(255), h3.iushrn(8), u2[a3 - o3 - 1] = s3;
          }
          return u2;
        }, n2.prototype._countBits = Math.clz32 ? function(e4) {
          return 32 - Math.clz32(e4);
        } : function(e4) {
          var t3 = e4, r3 = 0;
          return t3 >= 4096 && (r3 += 13, t3 >>>= 13), t3 >= 64 && (r3 += 7, t3 >>>= 7), t3 >= 8 && (r3 += 4, t3 >>>= 4), t3 >= 2 && (r3 += 2, t3 >>>= 2), r3 + t3;
        }, n2.prototype._zeroBits = function(e4) {
          if (0 === e4)
            return 26;
          var t3 = e4, r3 = 0;
          return 0 == (8191 & t3) && (r3 += 13, t3 >>>= 13), 0 == (127 & t3) && (r3 += 7, t3 >>>= 7), 0 == (15 & t3) && (r3 += 4, t3 >>>= 4), 0 == (3 & t3) && (r3 += 2, t3 >>>= 2), 0 == (1 & t3) && r3++, r3;
        }, n2.prototype.bitLength = function() {
          var e4 = this.words[this.length - 1], t3 = this._countBits(e4);
          return 26 * (this.length - 1) + t3;
        }, n2.prototype.zeroBits = function() {
          if (this.isZero())
            return 0;
          for (var e4 = 0, t3 = 0; t3 < this.length; t3++) {
            var r3 = this._zeroBits(this.words[t3]);
            if (e4 += r3, 26 !== r3)
              break;
          }
          return e4;
        }, n2.prototype.byteLength = function() {
          return Math.ceil(this.bitLength() / 8);
        }, n2.prototype.toTwos = function(e4) {
          return 0 !== this.negative ? this.abs().inotn(e4).iaddn(1) : this.clone();
        }, n2.prototype.fromTwos = function(e4) {
          return this.testn(e4 - 1) ? this.notn(e4).iaddn(1).ineg() : this.clone();
        }, n2.prototype.isNeg = function() {
          return 0 !== this.negative;
        }, n2.prototype.neg = function() {
          return this.clone().ineg();
        }, n2.prototype.ineg = function() {
          return this.isZero() || (this.negative ^= 1), this;
        }, n2.prototype.iuor = function(e4) {
          for (; this.length < e4.length; )
            this.words[this.length++] = 0;
          for (var t3 = 0; t3 < e4.length; t3++)
            this.words[t3] = this.words[t3] | e4.words[t3];
          return this.strip();
        }, n2.prototype.ior = function(e4) {
          return r2(0 == (this.negative | e4.negative)), this.iuor(e4);
        }, n2.prototype.or = function(e4) {
          return this.length > e4.length ? this.clone().ior(e4) : e4.clone().ior(this);
        }, n2.prototype.uor = function(e4) {
          return this.length > e4.length ? this.clone().iuor(e4) : e4.clone().iuor(this);
        }, n2.prototype.iuand = function(e4) {
          var t3;
          t3 = this.length > e4.length ? e4 : this;
          for (var r3 = 0; r3 < t3.length; r3++)
            this.words[r3] = this.words[r3] & e4.words[r3];
          return this.length = t3.length, this.strip();
        }, n2.prototype.iand = function(e4) {
          return r2(0 == (this.negative | e4.negative)), this.iuand(e4);
        }, n2.prototype.and = function(e4) {
          return this.length > e4.length ? this.clone().iand(e4) : e4.clone().iand(this);
        }, n2.prototype.uand = function(e4) {
          return this.length > e4.length ? this.clone().iuand(e4) : e4.clone().iuand(this);
        }, n2.prototype.iuxor = function(e4) {
          var t3, r3;
          this.length > e4.length ? (t3 = this, r3 = e4) : (t3 = e4, r3 = this);
          for (var i3 = 0; i3 < r3.length; i3++)
            this.words[i3] = t3.words[i3] ^ r3.words[i3];
          if (this !== t3)
            for (; i3 < t3.length; i3++)
              this.words[i3] = t3.words[i3];
          return this.length = t3.length, this.strip();
        }, n2.prototype.ixor = function(e4) {
          return r2(0 == (this.negative | e4.negative)), this.iuxor(e4);
        }, n2.prototype.xor = function(e4) {
          return this.length > e4.length ? this.clone().ixor(e4) : e4.clone().ixor(this);
        }, n2.prototype.uxor = function(e4) {
          return this.length > e4.length ? this.clone().iuxor(e4) : e4.clone().iuxor(this);
        }, n2.prototype.inotn = function(e4) {
          r2("number" == typeof e4 && e4 >= 0);
          var t3 = 0 | Math.ceil(e4 / 26), i3 = e4 % 26;
          this._expand(t3), i3 > 0 && t3--;
          for (var n3 = 0; n3 < t3; n3++)
            this.words[n3] = 67108863 & ~this.words[n3];
          return i3 > 0 && (this.words[n3] = ~this.words[n3] & 67108863 >> 26 - i3), this.strip();
        }, n2.prototype.notn = function(e4) {
          return this.clone().inotn(e4);
        }, n2.prototype.setn = function(e4, t3) {
          r2("number" == typeof e4 && e4 >= 0);
          var i3 = e4 / 26 | 0, n3 = e4 % 26;
          return this._expand(i3 + 1), this.words[i3] = t3 ? this.words[i3] | 1 << n3 : this.words[i3] & ~(1 << n3), this.strip();
        }, n2.prototype.iadd = function(e4) {
          var t3, r3, i3;
          if (0 !== this.negative && 0 === e4.negative)
            return this.negative = 0, t3 = this.isub(e4), this.negative ^= 1, this._normSign();
          if (0 === this.negative && 0 !== e4.negative)
            return e4.negative = 0, t3 = this.isub(e4), e4.negative = 1, t3._normSign();
          this.length > e4.length ? (r3 = this, i3 = e4) : (r3 = e4, i3 = this);
          for (var n3 = 0, a3 = 0; a3 < i3.length; a3++)
            t3 = (0 | r3.words[a3]) + (0 | i3.words[a3]) + n3, this.words[a3] = 67108863 & t3, n3 = t3 >>> 26;
          for (; 0 !== n3 && a3 < r3.length; a3++)
            t3 = (0 | r3.words[a3]) + n3, this.words[a3] = 67108863 & t3, n3 = t3 >>> 26;
          if (this.length = r3.length, 0 !== n3)
            this.words[this.length] = n3, this.length++;
          else if (r3 !== this)
            for (; a3 < r3.length; a3++)
              this.words[a3] = r3.words[a3];
          return this;
        }, n2.prototype.add = function(e4) {
          var t3;
          return 0 !== e4.negative && 0 === this.negative ? (e4.negative = 0, t3 = this.sub(e4), e4.negative ^= 1, t3) : 0 === e4.negative && 0 !== this.negative ? (this.negative = 0, t3 = e4.sub(this), this.negative = 1, t3) : this.length > e4.length ? this.clone().iadd(e4) : e4.clone().iadd(this);
        }, n2.prototype.isub = function(e4) {
          if (0 !== e4.negative) {
            e4.negative = 0;
            var t3 = this.iadd(e4);
            return e4.negative = 1, t3._normSign();
          }
          if (0 !== this.negative)
            return this.negative = 0, this.iadd(e4), this.negative = 1, this._normSign();
          var r3, i3, n3 = this.cmp(e4);
          if (0 === n3)
            return this.negative = 0, this.length = 1, this.words[0] = 0, this;
          n3 > 0 ? (r3 = this, i3 = e4) : (r3 = e4, i3 = this);
          for (var a3 = 0, s3 = 0; s3 < i3.length; s3++)
            a3 = (t3 = (0 | r3.words[s3]) - (0 | i3.words[s3]) + a3) >> 26, this.words[s3] = 67108863 & t3;
          for (; 0 !== a3 && s3 < r3.length; s3++)
            a3 = (t3 = (0 | r3.words[s3]) + a3) >> 26, this.words[s3] = 67108863 & t3;
          if (0 === a3 && s3 < r3.length && r3 !== this)
            for (; s3 < r3.length; s3++)
              this.words[s3] = r3.words[s3];
          return this.length = Math.max(this.length, s3), r3 !== this && (this.negative = 1), this.strip();
        }, n2.prototype.sub = function(e4) {
          return this.clone().isub(e4);
        };
        var l2 = function(e4, t3, r3) {
          var i3, n3, a3, s3 = e4.words, o3 = t3.words, c3 = r3.words, u2 = 0, h3 = 0 | s3[0], f3 = 8191 & h3, d3 = h3 >>> 13, l3 = 0 | s3[1], p3 = 8191 & l3, y3 = l3 >>> 13, b3 = 0 | s3[2], m3 = 8191 & b3, g3 = b3 >>> 13, w3 = 0 | s3[3], v6 = 8191 & w3, _3 = w3 >>> 13, k3 = 0 | s3[4], A3 = 8191 & k3, S2 = k3 >>> 13, E2 = 0 | s3[5], P2 = 8191 & E2, x2 = E2 >>> 13, M2 = 0 | s3[6], C2 = 8191 & M2, K2 = M2 >>> 13, D2 = 0 | s3[7], R2 = 8191 & D2, U2 = D2 >>> 13, I2 = 0 | s3[8], B2 = 8191 & I2, T2 = I2 >>> 13, z2 = 0 | s3[9], q2 = 8191 & z2, O2 = z2 >>> 13, F2 = 0 | o3[0], N2 = 8191 & F2, j2 = F2 >>> 13, L2 = 0 | o3[1], W2 = 8191 & L2, H2 = L2 >>> 13, G2 = 0 | o3[2], V2 = 8191 & G2, $2 = G2 >>> 13, Z2 = 0 | o3[3], Y2 = 8191 & Z2, X2 = Z2 >>> 13, Q2 = 0 | o3[4], J2 = 8191 & Q2, ee2 = Q2 >>> 13, te2 = 0 | o3[5], re2 = 8191 & te2, ie2 = te2 >>> 13, ne2 = 0 | o3[6], ae2 = 8191 & ne2, se2 = ne2 >>> 13, oe2 = 0 | o3[7], ce2 = 8191 & oe2, ue2 = oe2 >>> 13, he2 = 0 | o3[8], fe2 = 8191 & he2, de2 = he2 >>> 13, le2 = 0 | o3[9], pe2 = 8191 & le2, ye2 = le2 >>> 13;
          r3.negative = e4.negative ^ t3.negative, r3.length = 19;
          var be2 = (u2 + (i3 = Math.imul(f3, N2)) | 0) + ((8191 & (n3 = (n3 = Math.imul(f3, j2)) + Math.imul(d3, N2) | 0)) << 13) | 0;
          u2 = ((a3 = Math.imul(d3, j2)) + (n3 >>> 13) | 0) + (be2 >>> 26) | 0, be2 &= 67108863, i3 = Math.imul(p3, N2), n3 = (n3 = Math.imul(p3, j2)) + Math.imul(y3, N2) | 0, a3 = Math.imul(y3, j2);
          var me2 = (u2 + (i3 = i3 + Math.imul(f3, W2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, H2) | 0) + Math.imul(d3, W2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, H2) | 0) + (n3 >>> 13) | 0) + (me2 >>> 26) | 0, me2 &= 67108863, i3 = Math.imul(m3, N2), n3 = (n3 = Math.imul(m3, j2)) + Math.imul(g3, N2) | 0, a3 = Math.imul(g3, j2), i3 = i3 + Math.imul(p3, W2) | 0, n3 = (n3 = n3 + Math.imul(p3, H2) | 0) + Math.imul(y3, W2) | 0, a3 = a3 + Math.imul(y3, H2) | 0;
          var ge2 = (u2 + (i3 = i3 + Math.imul(f3, V2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, $2) | 0) + Math.imul(d3, V2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, $2) | 0) + (n3 >>> 13) | 0) + (ge2 >>> 26) | 0, ge2 &= 67108863, i3 = Math.imul(v6, N2), n3 = (n3 = Math.imul(v6, j2)) + Math.imul(_3, N2) | 0, a3 = Math.imul(_3, j2), i3 = i3 + Math.imul(m3, W2) | 0, n3 = (n3 = n3 + Math.imul(m3, H2) | 0) + Math.imul(g3, W2) | 0, a3 = a3 + Math.imul(g3, H2) | 0, i3 = i3 + Math.imul(p3, V2) | 0, n3 = (n3 = n3 + Math.imul(p3, $2) | 0) + Math.imul(y3, V2) | 0, a3 = a3 + Math.imul(y3, $2) | 0;
          var we2 = (u2 + (i3 = i3 + Math.imul(f3, Y2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, X2) | 0) + Math.imul(d3, Y2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, X2) | 0) + (n3 >>> 13) | 0) + (we2 >>> 26) | 0, we2 &= 67108863, i3 = Math.imul(A3, N2), n3 = (n3 = Math.imul(A3, j2)) + Math.imul(S2, N2) | 0, a3 = Math.imul(S2, j2), i3 = i3 + Math.imul(v6, W2) | 0, n3 = (n3 = n3 + Math.imul(v6, H2) | 0) + Math.imul(_3, W2) | 0, a3 = a3 + Math.imul(_3, H2) | 0, i3 = i3 + Math.imul(m3, V2) | 0, n3 = (n3 = n3 + Math.imul(m3, $2) | 0) + Math.imul(g3, V2) | 0, a3 = a3 + Math.imul(g3, $2) | 0, i3 = i3 + Math.imul(p3, Y2) | 0, n3 = (n3 = n3 + Math.imul(p3, X2) | 0) + Math.imul(y3, Y2) | 0, a3 = a3 + Math.imul(y3, X2) | 0;
          var ve2 = (u2 + (i3 = i3 + Math.imul(f3, J2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, ee2) | 0) + Math.imul(d3, J2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, ee2) | 0) + (n3 >>> 13) | 0) + (ve2 >>> 26) | 0, ve2 &= 67108863, i3 = Math.imul(P2, N2), n3 = (n3 = Math.imul(P2, j2)) + Math.imul(x2, N2) | 0, a3 = Math.imul(x2, j2), i3 = i3 + Math.imul(A3, W2) | 0, n3 = (n3 = n3 + Math.imul(A3, H2) | 0) + Math.imul(S2, W2) | 0, a3 = a3 + Math.imul(S2, H2) | 0, i3 = i3 + Math.imul(v6, V2) | 0, n3 = (n3 = n3 + Math.imul(v6, $2) | 0) + Math.imul(_3, V2) | 0, a3 = a3 + Math.imul(_3, $2) | 0, i3 = i3 + Math.imul(m3, Y2) | 0, n3 = (n3 = n3 + Math.imul(m3, X2) | 0) + Math.imul(g3, Y2) | 0, a3 = a3 + Math.imul(g3, X2) | 0, i3 = i3 + Math.imul(p3, J2) | 0, n3 = (n3 = n3 + Math.imul(p3, ee2) | 0) + Math.imul(y3, J2) | 0, a3 = a3 + Math.imul(y3, ee2) | 0;
          var _e2 = (u2 + (i3 = i3 + Math.imul(f3, re2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, ie2) | 0) + Math.imul(d3, re2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, ie2) | 0) + (n3 >>> 13) | 0) + (_e2 >>> 26) | 0, _e2 &= 67108863, i3 = Math.imul(C2, N2), n3 = (n3 = Math.imul(C2, j2)) + Math.imul(K2, N2) | 0, a3 = Math.imul(K2, j2), i3 = i3 + Math.imul(P2, W2) | 0, n3 = (n3 = n3 + Math.imul(P2, H2) | 0) + Math.imul(x2, W2) | 0, a3 = a3 + Math.imul(x2, H2) | 0, i3 = i3 + Math.imul(A3, V2) | 0, n3 = (n3 = n3 + Math.imul(A3, $2) | 0) + Math.imul(S2, V2) | 0, a3 = a3 + Math.imul(S2, $2) | 0, i3 = i3 + Math.imul(v6, Y2) | 0, n3 = (n3 = n3 + Math.imul(v6, X2) | 0) + Math.imul(_3, Y2) | 0, a3 = a3 + Math.imul(_3, X2) | 0, i3 = i3 + Math.imul(m3, J2) | 0, n3 = (n3 = n3 + Math.imul(m3, ee2) | 0) + Math.imul(g3, J2) | 0, a3 = a3 + Math.imul(g3, ee2) | 0, i3 = i3 + Math.imul(p3, re2) | 0, n3 = (n3 = n3 + Math.imul(p3, ie2) | 0) + Math.imul(y3, re2) | 0, a3 = a3 + Math.imul(y3, ie2) | 0;
          var ke2 = (u2 + (i3 = i3 + Math.imul(f3, ae2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, se2) | 0) + Math.imul(d3, ae2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, se2) | 0) + (n3 >>> 13) | 0) + (ke2 >>> 26) | 0, ke2 &= 67108863, i3 = Math.imul(R2, N2), n3 = (n3 = Math.imul(R2, j2)) + Math.imul(U2, N2) | 0, a3 = Math.imul(U2, j2), i3 = i3 + Math.imul(C2, W2) | 0, n3 = (n3 = n3 + Math.imul(C2, H2) | 0) + Math.imul(K2, W2) | 0, a3 = a3 + Math.imul(K2, H2) | 0, i3 = i3 + Math.imul(P2, V2) | 0, n3 = (n3 = n3 + Math.imul(P2, $2) | 0) + Math.imul(x2, V2) | 0, a3 = a3 + Math.imul(x2, $2) | 0, i3 = i3 + Math.imul(A3, Y2) | 0, n3 = (n3 = n3 + Math.imul(A3, X2) | 0) + Math.imul(S2, Y2) | 0, a3 = a3 + Math.imul(S2, X2) | 0, i3 = i3 + Math.imul(v6, J2) | 0, n3 = (n3 = n3 + Math.imul(v6, ee2) | 0) + Math.imul(_3, J2) | 0, a3 = a3 + Math.imul(_3, ee2) | 0, i3 = i3 + Math.imul(m3, re2) | 0, n3 = (n3 = n3 + Math.imul(m3, ie2) | 0) + Math.imul(g3, re2) | 0, a3 = a3 + Math.imul(g3, ie2) | 0, i3 = i3 + Math.imul(p3, ae2) | 0, n3 = (n3 = n3 + Math.imul(p3, se2) | 0) + Math.imul(y3, ae2) | 0, a3 = a3 + Math.imul(y3, se2) | 0;
          var Ae2 = (u2 + (i3 = i3 + Math.imul(f3, ce2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, ue2) | 0) + Math.imul(d3, ce2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, ue2) | 0) + (n3 >>> 13) | 0) + (Ae2 >>> 26) | 0, Ae2 &= 67108863, i3 = Math.imul(B2, N2), n3 = (n3 = Math.imul(B2, j2)) + Math.imul(T2, N2) | 0, a3 = Math.imul(T2, j2), i3 = i3 + Math.imul(R2, W2) | 0, n3 = (n3 = n3 + Math.imul(R2, H2) | 0) + Math.imul(U2, W2) | 0, a3 = a3 + Math.imul(U2, H2) | 0, i3 = i3 + Math.imul(C2, V2) | 0, n3 = (n3 = n3 + Math.imul(C2, $2) | 0) + Math.imul(K2, V2) | 0, a3 = a3 + Math.imul(K2, $2) | 0, i3 = i3 + Math.imul(P2, Y2) | 0, n3 = (n3 = n3 + Math.imul(P2, X2) | 0) + Math.imul(x2, Y2) | 0, a3 = a3 + Math.imul(x2, X2) | 0, i3 = i3 + Math.imul(A3, J2) | 0, n3 = (n3 = n3 + Math.imul(A3, ee2) | 0) + Math.imul(S2, J2) | 0, a3 = a3 + Math.imul(S2, ee2) | 0, i3 = i3 + Math.imul(v6, re2) | 0, n3 = (n3 = n3 + Math.imul(v6, ie2) | 0) + Math.imul(_3, re2) | 0, a3 = a3 + Math.imul(_3, ie2) | 0, i3 = i3 + Math.imul(m3, ae2) | 0, n3 = (n3 = n3 + Math.imul(m3, se2) | 0) + Math.imul(g3, ae2) | 0, a3 = a3 + Math.imul(g3, se2) | 0, i3 = i3 + Math.imul(p3, ce2) | 0, n3 = (n3 = n3 + Math.imul(p3, ue2) | 0) + Math.imul(y3, ce2) | 0, a3 = a3 + Math.imul(y3, ue2) | 0;
          var Se2 = (u2 + (i3 = i3 + Math.imul(f3, fe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, de2) | 0) + Math.imul(d3, fe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, de2) | 0) + (n3 >>> 13) | 0) + (Se2 >>> 26) | 0, Se2 &= 67108863, i3 = Math.imul(q2, N2), n3 = (n3 = Math.imul(q2, j2)) + Math.imul(O2, N2) | 0, a3 = Math.imul(O2, j2), i3 = i3 + Math.imul(B2, W2) | 0, n3 = (n3 = n3 + Math.imul(B2, H2) | 0) + Math.imul(T2, W2) | 0, a3 = a3 + Math.imul(T2, H2) | 0, i3 = i3 + Math.imul(R2, V2) | 0, n3 = (n3 = n3 + Math.imul(R2, $2) | 0) + Math.imul(U2, V2) | 0, a3 = a3 + Math.imul(U2, $2) | 0, i3 = i3 + Math.imul(C2, Y2) | 0, n3 = (n3 = n3 + Math.imul(C2, X2) | 0) + Math.imul(K2, Y2) | 0, a3 = a3 + Math.imul(K2, X2) | 0, i3 = i3 + Math.imul(P2, J2) | 0, n3 = (n3 = n3 + Math.imul(P2, ee2) | 0) + Math.imul(x2, J2) | 0, a3 = a3 + Math.imul(x2, ee2) | 0, i3 = i3 + Math.imul(A3, re2) | 0, n3 = (n3 = n3 + Math.imul(A3, ie2) | 0) + Math.imul(S2, re2) | 0, a3 = a3 + Math.imul(S2, ie2) | 0, i3 = i3 + Math.imul(v6, ae2) | 0, n3 = (n3 = n3 + Math.imul(v6, se2) | 0) + Math.imul(_3, ae2) | 0, a3 = a3 + Math.imul(_3, se2) | 0, i3 = i3 + Math.imul(m3, ce2) | 0, n3 = (n3 = n3 + Math.imul(m3, ue2) | 0) + Math.imul(g3, ce2) | 0, a3 = a3 + Math.imul(g3, ue2) | 0, i3 = i3 + Math.imul(p3, fe2) | 0, n3 = (n3 = n3 + Math.imul(p3, de2) | 0) + Math.imul(y3, fe2) | 0, a3 = a3 + Math.imul(y3, de2) | 0;
          var Ee2 = (u2 + (i3 = i3 + Math.imul(f3, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(f3, ye2) | 0) + Math.imul(d3, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(d3, ye2) | 0) + (n3 >>> 13) | 0) + (Ee2 >>> 26) | 0, Ee2 &= 67108863, i3 = Math.imul(q2, W2), n3 = (n3 = Math.imul(q2, H2)) + Math.imul(O2, W2) | 0, a3 = Math.imul(O2, H2), i3 = i3 + Math.imul(B2, V2) | 0, n3 = (n3 = n3 + Math.imul(B2, $2) | 0) + Math.imul(T2, V2) | 0, a3 = a3 + Math.imul(T2, $2) | 0, i3 = i3 + Math.imul(R2, Y2) | 0, n3 = (n3 = n3 + Math.imul(R2, X2) | 0) + Math.imul(U2, Y2) | 0, a3 = a3 + Math.imul(U2, X2) | 0, i3 = i3 + Math.imul(C2, J2) | 0, n3 = (n3 = n3 + Math.imul(C2, ee2) | 0) + Math.imul(K2, J2) | 0, a3 = a3 + Math.imul(K2, ee2) | 0, i3 = i3 + Math.imul(P2, re2) | 0, n3 = (n3 = n3 + Math.imul(P2, ie2) | 0) + Math.imul(x2, re2) | 0, a3 = a3 + Math.imul(x2, ie2) | 0, i3 = i3 + Math.imul(A3, ae2) | 0, n3 = (n3 = n3 + Math.imul(A3, se2) | 0) + Math.imul(S2, ae2) | 0, a3 = a3 + Math.imul(S2, se2) | 0, i3 = i3 + Math.imul(v6, ce2) | 0, n3 = (n3 = n3 + Math.imul(v6, ue2) | 0) + Math.imul(_3, ce2) | 0, a3 = a3 + Math.imul(_3, ue2) | 0, i3 = i3 + Math.imul(m3, fe2) | 0, n3 = (n3 = n3 + Math.imul(m3, de2) | 0) + Math.imul(g3, fe2) | 0, a3 = a3 + Math.imul(g3, de2) | 0;
          var Pe2 = (u2 + (i3 = i3 + Math.imul(p3, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(p3, ye2) | 0) + Math.imul(y3, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(y3, ye2) | 0) + (n3 >>> 13) | 0) + (Pe2 >>> 26) | 0, Pe2 &= 67108863, i3 = Math.imul(q2, V2), n3 = (n3 = Math.imul(q2, $2)) + Math.imul(O2, V2) | 0, a3 = Math.imul(O2, $2), i3 = i3 + Math.imul(B2, Y2) | 0, n3 = (n3 = n3 + Math.imul(B2, X2) | 0) + Math.imul(T2, Y2) | 0, a3 = a3 + Math.imul(T2, X2) | 0, i3 = i3 + Math.imul(R2, J2) | 0, n3 = (n3 = n3 + Math.imul(R2, ee2) | 0) + Math.imul(U2, J2) | 0, a3 = a3 + Math.imul(U2, ee2) | 0, i3 = i3 + Math.imul(C2, re2) | 0, n3 = (n3 = n3 + Math.imul(C2, ie2) | 0) + Math.imul(K2, re2) | 0, a3 = a3 + Math.imul(K2, ie2) | 0, i3 = i3 + Math.imul(P2, ae2) | 0, n3 = (n3 = n3 + Math.imul(P2, se2) | 0) + Math.imul(x2, ae2) | 0, a3 = a3 + Math.imul(x2, se2) | 0, i3 = i3 + Math.imul(A3, ce2) | 0, n3 = (n3 = n3 + Math.imul(A3, ue2) | 0) + Math.imul(S2, ce2) | 0, a3 = a3 + Math.imul(S2, ue2) | 0, i3 = i3 + Math.imul(v6, fe2) | 0, n3 = (n3 = n3 + Math.imul(v6, de2) | 0) + Math.imul(_3, fe2) | 0, a3 = a3 + Math.imul(_3, de2) | 0;
          var xe2 = (u2 + (i3 = i3 + Math.imul(m3, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(m3, ye2) | 0) + Math.imul(g3, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(g3, ye2) | 0) + (n3 >>> 13) | 0) + (xe2 >>> 26) | 0, xe2 &= 67108863, i3 = Math.imul(q2, Y2), n3 = (n3 = Math.imul(q2, X2)) + Math.imul(O2, Y2) | 0, a3 = Math.imul(O2, X2), i3 = i3 + Math.imul(B2, J2) | 0, n3 = (n3 = n3 + Math.imul(B2, ee2) | 0) + Math.imul(T2, J2) | 0, a3 = a3 + Math.imul(T2, ee2) | 0, i3 = i3 + Math.imul(R2, re2) | 0, n3 = (n3 = n3 + Math.imul(R2, ie2) | 0) + Math.imul(U2, re2) | 0, a3 = a3 + Math.imul(U2, ie2) | 0, i3 = i3 + Math.imul(C2, ae2) | 0, n3 = (n3 = n3 + Math.imul(C2, se2) | 0) + Math.imul(K2, ae2) | 0, a3 = a3 + Math.imul(K2, se2) | 0, i3 = i3 + Math.imul(P2, ce2) | 0, n3 = (n3 = n3 + Math.imul(P2, ue2) | 0) + Math.imul(x2, ce2) | 0, a3 = a3 + Math.imul(x2, ue2) | 0, i3 = i3 + Math.imul(A3, fe2) | 0, n3 = (n3 = n3 + Math.imul(A3, de2) | 0) + Math.imul(S2, fe2) | 0, a3 = a3 + Math.imul(S2, de2) | 0;
          var Me2 = (u2 + (i3 = i3 + Math.imul(v6, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(v6, ye2) | 0) + Math.imul(_3, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(_3, ye2) | 0) + (n3 >>> 13) | 0) + (Me2 >>> 26) | 0, Me2 &= 67108863, i3 = Math.imul(q2, J2), n3 = (n3 = Math.imul(q2, ee2)) + Math.imul(O2, J2) | 0, a3 = Math.imul(O2, ee2), i3 = i3 + Math.imul(B2, re2) | 0, n3 = (n3 = n3 + Math.imul(B2, ie2) | 0) + Math.imul(T2, re2) | 0, a3 = a3 + Math.imul(T2, ie2) | 0, i3 = i3 + Math.imul(R2, ae2) | 0, n3 = (n3 = n3 + Math.imul(R2, se2) | 0) + Math.imul(U2, ae2) | 0, a3 = a3 + Math.imul(U2, se2) | 0, i3 = i3 + Math.imul(C2, ce2) | 0, n3 = (n3 = n3 + Math.imul(C2, ue2) | 0) + Math.imul(K2, ce2) | 0, a3 = a3 + Math.imul(K2, ue2) | 0, i3 = i3 + Math.imul(P2, fe2) | 0, n3 = (n3 = n3 + Math.imul(P2, de2) | 0) + Math.imul(x2, fe2) | 0, a3 = a3 + Math.imul(x2, de2) | 0;
          var Ce2 = (u2 + (i3 = i3 + Math.imul(A3, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(A3, ye2) | 0) + Math.imul(S2, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(S2, ye2) | 0) + (n3 >>> 13) | 0) + (Ce2 >>> 26) | 0, Ce2 &= 67108863, i3 = Math.imul(q2, re2), n3 = (n3 = Math.imul(q2, ie2)) + Math.imul(O2, re2) | 0, a3 = Math.imul(O2, ie2), i3 = i3 + Math.imul(B2, ae2) | 0, n3 = (n3 = n3 + Math.imul(B2, se2) | 0) + Math.imul(T2, ae2) | 0, a3 = a3 + Math.imul(T2, se2) | 0, i3 = i3 + Math.imul(R2, ce2) | 0, n3 = (n3 = n3 + Math.imul(R2, ue2) | 0) + Math.imul(U2, ce2) | 0, a3 = a3 + Math.imul(U2, ue2) | 0, i3 = i3 + Math.imul(C2, fe2) | 0, n3 = (n3 = n3 + Math.imul(C2, de2) | 0) + Math.imul(K2, fe2) | 0, a3 = a3 + Math.imul(K2, de2) | 0;
          var Ke2 = (u2 + (i3 = i3 + Math.imul(P2, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(P2, ye2) | 0) + Math.imul(x2, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(x2, ye2) | 0) + (n3 >>> 13) | 0) + (Ke2 >>> 26) | 0, Ke2 &= 67108863, i3 = Math.imul(q2, ae2), n3 = (n3 = Math.imul(q2, se2)) + Math.imul(O2, ae2) | 0, a3 = Math.imul(O2, se2), i3 = i3 + Math.imul(B2, ce2) | 0, n3 = (n3 = n3 + Math.imul(B2, ue2) | 0) + Math.imul(T2, ce2) | 0, a3 = a3 + Math.imul(T2, ue2) | 0, i3 = i3 + Math.imul(R2, fe2) | 0, n3 = (n3 = n3 + Math.imul(R2, de2) | 0) + Math.imul(U2, fe2) | 0, a3 = a3 + Math.imul(U2, de2) | 0;
          var De2 = (u2 + (i3 = i3 + Math.imul(C2, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(C2, ye2) | 0) + Math.imul(K2, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(K2, ye2) | 0) + (n3 >>> 13) | 0) + (De2 >>> 26) | 0, De2 &= 67108863, i3 = Math.imul(q2, ce2), n3 = (n3 = Math.imul(q2, ue2)) + Math.imul(O2, ce2) | 0, a3 = Math.imul(O2, ue2), i3 = i3 + Math.imul(B2, fe2) | 0, n3 = (n3 = n3 + Math.imul(B2, de2) | 0) + Math.imul(T2, fe2) | 0, a3 = a3 + Math.imul(T2, de2) | 0;
          var Re2 = (u2 + (i3 = i3 + Math.imul(R2, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(R2, ye2) | 0) + Math.imul(U2, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(U2, ye2) | 0) + (n3 >>> 13) | 0) + (Re2 >>> 26) | 0, Re2 &= 67108863, i3 = Math.imul(q2, fe2), n3 = (n3 = Math.imul(q2, de2)) + Math.imul(O2, fe2) | 0, a3 = Math.imul(O2, de2);
          var Ue2 = (u2 + (i3 = i3 + Math.imul(B2, pe2) | 0) | 0) + ((8191 & (n3 = (n3 = n3 + Math.imul(B2, ye2) | 0) + Math.imul(T2, pe2) | 0)) << 13) | 0;
          u2 = ((a3 = a3 + Math.imul(T2, ye2) | 0) + (n3 >>> 13) | 0) + (Ue2 >>> 26) | 0, Ue2 &= 67108863;
          var Ie2 = (u2 + (i3 = Math.imul(q2, pe2)) | 0) + ((8191 & (n3 = (n3 = Math.imul(q2, ye2)) + Math.imul(O2, pe2) | 0)) << 13) | 0;
          return u2 = ((a3 = Math.imul(O2, ye2)) + (n3 >>> 13) | 0) + (Ie2 >>> 26) | 0, Ie2 &= 67108863, c3[0] = be2, c3[1] = me2, c3[2] = ge2, c3[3] = we2, c3[4] = ve2, c3[5] = _e2, c3[6] = ke2, c3[7] = Ae2, c3[8] = Se2, c3[9] = Ee2, c3[10] = Pe2, c3[11] = xe2, c3[12] = Me2, c3[13] = Ce2, c3[14] = Ke2, c3[15] = De2, c3[16] = Re2, c3[17] = Ue2, c3[18] = Ie2, 0 !== u2 && (c3[19] = u2, r3.length++), r3;
        };
        function p2(e4, t3, r3) {
          return new y2().mulp(e4, t3, r3);
        }
        function y2(e4, t3) {
          this.x = e4, this.y = t3;
        }
        Math.imul || (l2 = d2), n2.prototype.mulTo = function(e4, t3) {
          var r3 = this.length + e4.length;
          return 10 === this.length && 10 === e4.length ? l2(this, e4, t3) : r3 < 63 ? d2(this, e4, t3) : r3 < 1024 ? function(e5, t4, r4) {
            r4.negative = t4.negative ^ e5.negative, r4.length = e5.length + t4.length;
            for (var i3 = 0, n3 = 0, a3 = 0; a3 < r4.length - 1; a3++) {
              var s3 = n3;
              n3 = 0;
              for (var o3 = 67108863 & i3, c3 = Math.min(a3, t4.length - 1), u2 = Math.max(0, a3 - e5.length + 1); u2 <= c3; u2++) {
                var h3 = a3 - u2, f3 = (0 | e5.words[h3]) * (0 | t4.words[u2]), d3 = 67108863 & f3;
                o3 = 67108863 & (d3 = d3 + o3 | 0), n3 += (s3 = (s3 = s3 + (f3 / 67108864 | 0) | 0) + (d3 >>> 26) | 0) >>> 26, s3 &= 67108863;
              }
              r4.words[a3] = o3, i3 = s3, s3 = n3;
            }
            return 0 !== i3 ? r4.words[a3] = i3 : r4.length--, r4.strip();
          }(this, e4, t3) : p2(this, e4, t3);
        }, y2.prototype.makeRBT = function(e4) {
          for (var t3 = Array(e4), r3 = n2.prototype._countBits(e4) - 1, i3 = 0; i3 < e4; i3++)
            t3[i3] = this.revBin(i3, r3, e4);
          return t3;
        }, y2.prototype.revBin = function(e4, t3, r3) {
          if (0 === e4 || e4 === r3 - 1)
            return e4;
          for (var i3 = 0, n3 = 0; n3 < t3; n3++)
            i3 |= (1 & e4) << t3 - n3 - 1, e4 >>= 1;
          return i3;
        }, y2.prototype.permute = function(e4, t3, r3, i3, n3, a3) {
          for (var s3 = 0; s3 < a3; s3++)
            i3[s3] = t3[e4[s3]], n3[s3] = r3[e4[s3]];
        }, y2.prototype.transform = function(e4, t3, r3, i3, n3, a3) {
          this.permute(a3, e4, t3, r3, i3, n3);
          for (var s3 = 1; s3 < n3; s3 <<= 1)
            for (var o3 = s3 << 1, c3 = Math.cos(2 * Math.PI / o3), u2 = Math.sin(2 * Math.PI / o3), h3 = 0; h3 < n3; h3 += o3)
              for (var f3 = c3, d3 = u2, l3 = 0; l3 < s3; l3++) {
                var p3 = r3[h3 + l3], y3 = i3[h3 + l3], b3 = r3[h3 + l3 + s3], m3 = i3[h3 + l3 + s3], g3 = f3 * b3 - d3 * m3;
                m3 = f3 * m3 + d3 * b3, b3 = g3, r3[h3 + l3] = p3 + b3, i3[h3 + l3] = y3 + m3, r3[h3 + l3 + s3] = p3 - b3, i3[h3 + l3 + s3] = y3 - m3, l3 !== o3 && (g3 = c3 * f3 - u2 * d3, d3 = c3 * d3 + u2 * f3, f3 = g3);
              }
        }, y2.prototype.guessLen13b = function(e4, t3) {
          var r3 = 1 | Math.max(t3, e4), i3 = 1 & r3, n3 = 0;
          for (r3 = r3 / 2 | 0; r3; r3 >>>= 1)
            n3++;
          return 1 << n3 + 1 + i3;
        }, y2.prototype.conjugate = function(e4, t3, r3) {
          if (!(r3 <= 1))
            for (var i3 = 0; i3 < r3 / 2; i3++) {
              var n3 = e4[i3];
              e4[i3] = e4[r3 - i3 - 1], e4[r3 - i3 - 1] = n3, n3 = t3[i3], t3[i3] = -t3[r3 - i3 - 1], t3[r3 - i3 - 1] = -n3;
            }
        }, y2.prototype.normalize13b = function(e4, t3) {
          for (var r3 = 0, i3 = 0; i3 < t3 / 2; i3++) {
            var n3 = 8192 * Math.round(e4[2 * i3 + 1] / t3) + Math.round(e4[2 * i3] / t3) + r3;
            e4[i3] = 67108863 & n3, r3 = n3 < 67108864 ? 0 : n3 / 67108864 | 0;
          }
          return e4;
        }, y2.prototype.convert13b = function(e4, t3, i3, n3) {
          for (var a3 = 0, s3 = 0; s3 < t3; s3++)
            a3 += 0 | e4[s3], i3[2 * s3] = 8191 & a3, a3 >>>= 13, i3[2 * s3 + 1] = 8191 & a3, a3 >>>= 13;
          for (s3 = 2 * t3; s3 < n3; ++s3)
            i3[s3] = 0;
          r2(0 === a3), r2(0 == (-8192 & a3));
        }, y2.prototype.stub = function(e4) {
          for (var t3 = Array(e4), r3 = 0; r3 < e4; r3++)
            t3[r3] = 0;
          return t3;
        }, y2.prototype.mulp = function(e4, t3, r3) {
          var i3 = 2 * this.guessLen13b(e4.length, t3.length), n3 = this.makeRBT(i3), a3 = this.stub(i3), s3 = Array(i3), o3 = Array(i3), c3 = Array(i3), u2 = Array(i3), h3 = Array(i3), f3 = Array(i3), d3 = r3.words;
          d3.length = i3, this.convert13b(e4.words, e4.length, s3, i3), this.convert13b(t3.words, t3.length, u2, i3), this.transform(s3, a3, o3, c3, i3, n3), this.transform(u2, a3, h3, f3, i3, n3);
          for (var l3 = 0; l3 < i3; l3++) {
            var p3 = o3[l3] * h3[l3] - c3[l3] * f3[l3];
            c3[l3] = o3[l3] * f3[l3] + c3[l3] * h3[l3], o3[l3] = p3;
          }
          return this.conjugate(o3, c3, i3), this.transform(o3, c3, d3, a3, i3, n3), this.conjugate(d3, a3, i3), this.normalize13b(d3, i3), r3.negative = e4.negative ^ t3.negative, r3.length = e4.length + t3.length, r3.strip();
        }, n2.prototype.mul = function(e4) {
          var t3 = new n2(null);
          return t3.words = Array(this.length + e4.length), this.mulTo(e4, t3);
        }, n2.prototype.mulf = function(e4) {
          var t3 = new n2(null);
          return t3.words = Array(this.length + e4.length), p2(this, e4, t3);
        }, n2.prototype.imul = function(e4) {
          return this.clone().mulTo(e4, this);
        }, n2.prototype.imuln = function(e4) {
          r2("number" == typeof e4), r2(e4 < 67108864);
          for (var t3 = 0, i3 = 0; i3 < this.length; i3++) {
            var n3 = (0 | this.words[i3]) * e4, a3 = (67108863 & n3) + (67108863 & t3);
            t3 >>= 26, t3 += n3 / 67108864 | 0, t3 += a3 >>> 26, this.words[i3] = 67108863 & a3;
          }
          return 0 !== t3 && (this.words[i3] = t3, this.length++), this;
        }, n2.prototype.muln = function(e4) {
          return this.clone().imuln(e4);
        }, n2.prototype.sqr = function() {
          return this.mul(this);
        }, n2.prototype.isqr = function() {
          return this.imul(this.clone());
        }, n2.prototype.pow = function(e4) {
          var t3 = function(e5) {
            for (var t4 = Array(e5.bitLength()), r4 = 0; r4 < t4.length; r4++) {
              var i4 = r4 / 26 | 0, n3 = r4 % 26;
              t4[r4] = (e5.words[i4] & 1 << n3) >>> n3;
            }
            return t4;
          }(e4);
          if (0 === t3.length)
            return new n2(1);
          for (var r3 = this, i3 = 0; i3 < t3.length && 0 === t3[i3]; i3++, r3 = r3.sqr())
            ;
          if (++i3 < t3.length)
            for (var a3 = r3.sqr(); i3 < t3.length; i3++, a3 = a3.sqr())
              0 !== t3[i3] && (r3 = r3.mul(a3));
          return r3;
        }, n2.prototype.iushln = function(e4) {
          r2("number" == typeof e4 && e4 >= 0);
          var t3, i3 = e4 % 26, n3 = (e4 - i3) / 26, a3 = 67108863 >>> 26 - i3 << 26 - i3;
          if (0 !== i3) {
            var s3 = 0;
            for (t3 = 0; t3 < this.length; t3++) {
              var o3 = this.words[t3] & a3, c3 = (0 | this.words[t3]) - o3 << i3;
              this.words[t3] = c3 | s3, s3 = o3 >>> 26 - i3;
            }
            s3 && (this.words[t3] = s3, this.length++);
          }
          if (0 !== n3) {
            for (t3 = this.length - 1; t3 >= 0; t3--)
              this.words[t3 + n3] = this.words[t3];
            for (t3 = 0; t3 < n3; t3++)
              this.words[t3] = 0;
            this.length += n3;
          }
          return this.strip();
        }, n2.prototype.ishln = function(e4) {
          return r2(0 === this.negative), this.iushln(e4);
        }, n2.prototype.iushrn = function(e4, t3, i3) {
          var n3;
          r2("number" == typeof e4 && e4 >= 0), n3 = t3 ? (t3 - t3 % 26) / 26 : 0;
          var a3 = e4 % 26, s3 = Math.min((e4 - a3) / 26, this.length), o3 = 67108863 ^ 67108863 >>> a3 << a3, c3 = i3;
          if (n3 = Math.max(0, n3 -= s3), c3) {
            for (var u2 = 0; u2 < s3; u2++)
              c3.words[u2] = this.words[u2];
            c3.length = s3;
          }
          if (0 === s3)
            ;
          else if (this.length > s3)
            for (this.length -= s3, u2 = 0; u2 < this.length; u2++)
              this.words[u2] = this.words[u2 + s3];
          else
            this.words[0] = 0, this.length = 1;
          var h3 = 0;
          for (u2 = this.length - 1; u2 >= 0 && (0 !== h3 || u2 >= n3); u2--) {
            var f3 = 0 | this.words[u2];
            this.words[u2] = h3 << 26 - a3 | f3 >>> a3, h3 = f3 & o3;
          }
          return c3 && 0 !== h3 && (c3.words[c3.length++] = h3), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
        }, n2.prototype.ishrn = function(e4, t3, i3) {
          return r2(0 === this.negative), this.iushrn(e4, t3, i3);
        }, n2.prototype.shln = function(e4) {
          return this.clone().ishln(e4);
        }, n2.prototype.ushln = function(e4) {
          return this.clone().iushln(e4);
        }, n2.prototype.shrn = function(e4) {
          return this.clone().ishrn(e4);
        }, n2.prototype.ushrn = function(e4) {
          return this.clone().iushrn(e4);
        }, n2.prototype.testn = function(e4) {
          r2("number" == typeof e4 && e4 >= 0);
          var t3 = e4 % 26, i3 = (e4 - t3) / 26, n3 = 1 << t3;
          return !(this.length <= i3) && !!(this.words[i3] & n3);
        }, n2.prototype.imaskn = function(e4) {
          r2("number" == typeof e4 && e4 >= 0);
          var t3 = e4 % 26, i3 = (e4 - t3) / 26;
          if (r2(0 === this.negative, "imaskn works only with positive numbers"), this.length <= i3)
            return this;
          if (0 !== t3 && i3++, this.length = Math.min(i3, this.length), 0 !== t3) {
            var n3 = 67108863 ^ 67108863 >>> t3 << t3;
            this.words[this.length - 1] &= n3;
          }
          return this.strip();
        }, n2.prototype.maskn = function(e4) {
          return this.clone().imaskn(e4);
        }, n2.prototype.iaddn = function(e4) {
          return r2("number" == typeof e4), r2(e4 < 67108864), e4 < 0 ? this.isubn(-e4) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < e4 ? (this.words[0] = e4 - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(e4), this.negative = 1, this) : this._iaddn(e4);
        }, n2.prototype._iaddn = function(e4) {
          this.words[0] += e4;
          for (var t3 = 0; t3 < this.length && this.words[t3] >= 67108864; t3++)
            this.words[t3] -= 67108864, t3 === this.length - 1 ? this.words[t3 + 1] = 1 : this.words[t3 + 1]++;
          return this.length = Math.max(this.length, t3 + 1), this;
        }, n2.prototype.isubn = function(e4) {
          if (r2("number" == typeof e4), r2(e4 < 67108864), e4 < 0)
            return this.iaddn(-e4);
          if (0 !== this.negative)
            return this.negative = 0, this.iaddn(e4), this.negative = 1, this;
          if (this.words[0] -= e4, 1 === this.length && this.words[0] < 0)
            this.words[0] = -this.words[0], this.negative = 1;
          else
            for (var t3 = 0; t3 < this.length && this.words[t3] < 0; t3++)
              this.words[t3] += 67108864, this.words[t3 + 1] -= 1;
          return this.strip();
        }, n2.prototype.addn = function(e4) {
          return this.clone().iaddn(e4);
        }, n2.prototype.subn = function(e4) {
          return this.clone().isubn(e4);
        }, n2.prototype.iabs = function() {
          return this.negative = 0, this;
        }, n2.prototype.abs = function() {
          return this.clone().iabs();
        }, n2.prototype._ishlnsubmul = function(e4, t3, i3) {
          var n3, a3, s3 = e4.length + i3;
          this._expand(s3);
          var o3 = 0;
          for (n3 = 0; n3 < e4.length; n3++) {
            a3 = (0 | this.words[n3 + i3]) + o3;
            var c3 = (0 | e4.words[n3]) * t3;
            o3 = ((a3 -= 67108863 & c3) >> 26) - (c3 / 67108864 | 0), this.words[n3 + i3] = 67108863 & a3;
          }
          for (; n3 < this.length - i3; n3++)
            o3 = (a3 = (0 | this.words[n3 + i3]) + o3) >> 26, this.words[n3 + i3] = 67108863 & a3;
          if (0 === o3)
            return this.strip();
          for (r2(-1 === o3), o3 = 0, n3 = 0; n3 < this.length; n3++)
            o3 = (a3 = -(0 | this.words[n3]) + o3) >> 26, this.words[n3] = 67108863 & a3;
          return this.negative = 1, this.strip();
        }, n2.prototype._wordDiv = function(e4, t3) {
          var r3 = (this.length, e4.length), i3 = this.clone(), a3 = e4, s3 = 0 | a3.words[a3.length - 1];
          0 !== (r3 = 26 - this._countBits(s3)) && (a3 = a3.ushln(r3), i3.iushln(r3), s3 = 0 | a3.words[a3.length - 1]);
          var o3, c3 = i3.length - a3.length;
          if ("mod" !== t3) {
            (o3 = new n2(null)).length = c3 + 1, o3.words = Array(o3.length);
            for (var u2 = 0; u2 < o3.length; u2++)
              o3.words[u2] = 0;
          }
          var h3 = i3.clone()._ishlnsubmul(a3, 1, c3);
          0 === h3.negative && (i3 = h3, o3 && (o3.words[c3] = 1));
          for (var f3 = c3 - 1; f3 >= 0; f3--) {
            var d3 = 67108864 * (0 | i3.words[a3.length + f3]) + (0 | i3.words[a3.length + f3 - 1]);
            for (d3 = Math.min(d3 / s3 | 0, 67108863), i3._ishlnsubmul(a3, d3, f3); 0 !== i3.negative; )
              d3--, i3.negative = 0, i3._ishlnsubmul(a3, 1, f3), i3.isZero() || (i3.negative ^= 1);
            o3 && (o3.words[f3] = d3);
          }
          return o3 && o3.strip(), i3.strip(), "div" !== t3 && 0 !== r3 && i3.iushrn(r3), { div: o3 || null, mod: i3 };
        }, n2.prototype.divmod = function(e4, t3, i3) {
          return r2(!e4.isZero()), this.isZero() ? { div: new n2(0), mod: new n2(0) } : 0 !== this.negative && 0 === e4.negative ? (o3 = this.neg().divmod(e4, t3), "mod" !== t3 && (a3 = o3.div.neg()), "div" !== t3 && (s3 = o3.mod.neg(), i3 && 0 !== s3.negative && s3.iadd(e4)), { div: a3, mod: s3 }) : 0 === this.negative && 0 !== e4.negative ? (o3 = this.divmod(e4.neg(), t3), "mod" !== t3 && (a3 = o3.div.neg()), { div: a3, mod: o3.mod }) : 0 != (this.negative & e4.negative) ? (o3 = this.neg().divmod(e4.neg(), t3), "div" !== t3 && (s3 = o3.mod.neg(), i3 && 0 !== s3.negative && s3.isub(e4)), { div: o3.div, mod: s3 }) : e4.length > this.length || this.cmp(e4) < 0 ? { div: new n2(0), mod: this } : 1 === e4.length ? "div" === t3 ? { div: this.divn(e4.words[0]), mod: null } : "mod" === t3 ? { div: null, mod: new n2(this.modn(e4.words[0])) } : { div: this.divn(e4.words[0]), mod: new n2(this.modn(e4.words[0])) } : this._wordDiv(e4, t3);
          var a3, s3, o3;
        }, n2.prototype.div = function(e4) {
          return this.divmod(e4, "div", false).div;
        }, n2.prototype.mod = function(e4) {
          return this.divmod(e4, "mod", false).mod;
        }, n2.prototype.umod = function(e4) {
          return this.divmod(e4, "mod", true).mod;
        }, n2.prototype.divRound = function(e4) {
          var t3 = this.divmod(e4);
          if (t3.mod.isZero())
            return t3.div;
          var r3 = 0 !== t3.div.negative ? t3.mod.isub(e4) : t3.mod, i3 = e4.ushrn(1), n3 = e4.andln(1), a3 = r3.cmp(i3);
          return a3 < 0 || 1 === n3 && 0 === a3 ? t3.div : 0 !== t3.div.negative ? t3.div.isubn(1) : t3.div.iaddn(1);
        }, n2.prototype.modn = function(e4) {
          r2(e4 <= 67108863);
          for (var t3 = (1 << 26) % e4, i3 = 0, n3 = this.length - 1; n3 >= 0; n3--)
            i3 = (t3 * i3 + (0 | this.words[n3])) % e4;
          return i3;
        }, n2.prototype.idivn = function(e4) {
          r2(e4 <= 67108863);
          for (var t3 = 0, i3 = this.length - 1; i3 >= 0; i3--) {
            var n3 = (0 | this.words[i3]) + 67108864 * t3;
            this.words[i3] = n3 / e4 | 0, t3 = n3 % e4;
          }
          return this.strip();
        }, n2.prototype.divn = function(e4) {
          return this.clone().idivn(e4);
        }, n2.prototype.egcd = function(e4) {
          r2(0 === e4.negative), r2(!e4.isZero());
          var t3 = this, i3 = e4.clone();
          t3 = 0 !== t3.negative ? t3.umod(e4) : t3.clone();
          for (var a3 = new n2(1), s3 = new n2(0), o3 = new n2(0), c3 = new n2(1), u2 = 0; t3.isEven() && i3.isEven(); )
            t3.iushrn(1), i3.iushrn(1), ++u2;
          for (var h3 = i3.clone(), f3 = t3.clone(); !t3.isZero(); ) {
            for (var d3 = 0, l3 = 1; 0 == (t3.words[0] & l3) && d3 < 26; ++d3, l3 <<= 1)
              ;
            if (d3 > 0)
              for (t3.iushrn(d3); d3-- > 0; )
                (a3.isOdd() || s3.isOdd()) && (a3.iadd(h3), s3.isub(f3)), a3.iushrn(1), s3.iushrn(1);
            for (var p3 = 0, y3 = 1; 0 == (i3.words[0] & y3) && p3 < 26; ++p3, y3 <<= 1)
              ;
            if (p3 > 0)
              for (i3.iushrn(p3); p3-- > 0; )
                (o3.isOdd() || c3.isOdd()) && (o3.iadd(h3), c3.isub(f3)), o3.iushrn(1), c3.iushrn(1);
            t3.cmp(i3) >= 0 ? (t3.isub(i3), a3.isub(o3), s3.isub(c3)) : (i3.isub(t3), o3.isub(a3), c3.isub(s3));
          }
          return { a: o3, b: c3, gcd: i3.iushln(u2) };
        }, n2.prototype._invmp = function(e4) {
          r2(0 === e4.negative), r2(!e4.isZero());
          var t3 = this, i3 = e4.clone();
          t3 = 0 !== t3.negative ? t3.umod(e4) : t3.clone();
          for (var a3, s3 = new n2(1), o3 = new n2(0), c3 = i3.clone(); t3.cmpn(1) > 0 && i3.cmpn(1) > 0; ) {
            for (var u2 = 0, h3 = 1; 0 == (t3.words[0] & h3) && u2 < 26; ++u2, h3 <<= 1)
              ;
            if (u2 > 0)
              for (t3.iushrn(u2); u2-- > 0; )
                s3.isOdd() && s3.iadd(c3), s3.iushrn(1);
            for (var f3 = 0, d3 = 1; 0 == (i3.words[0] & d3) && f3 < 26; ++f3, d3 <<= 1)
              ;
            if (f3 > 0)
              for (i3.iushrn(f3); f3-- > 0; )
                o3.isOdd() && o3.iadd(c3), o3.iushrn(1);
            t3.cmp(i3) >= 0 ? (t3.isub(i3), s3.isub(o3)) : (i3.isub(t3), o3.isub(s3));
          }
          return (a3 = 0 === t3.cmpn(1) ? s3 : o3).cmpn(0) < 0 && a3.iadd(e4), a3;
        }, n2.prototype.gcd = function(e4) {
          if (this.isZero())
            return e4.abs();
          if (e4.isZero())
            return this.abs();
          var t3 = this.clone(), r3 = e4.clone();
          t3.negative = 0, r3.negative = 0;
          for (var i3 = 0; t3.isEven() && r3.isEven(); i3++)
            t3.iushrn(1), r3.iushrn(1);
          for (; ; ) {
            for (; t3.isEven(); )
              t3.iushrn(1);
            for (; r3.isEven(); )
              r3.iushrn(1);
            var n3 = t3.cmp(r3);
            if (n3 < 0) {
              var a3 = t3;
              t3 = r3, r3 = a3;
            } else if (0 === n3 || 0 === r3.cmpn(1))
              break;
            t3.isub(r3);
          }
          return r3.iushln(i3);
        }, n2.prototype.invm = function(e4) {
          return this.egcd(e4).a.umod(e4);
        }, n2.prototype.isEven = function() {
          return 0 == (1 & this.words[0]);
        }, n2.prototype.isOdd = function() {
          return 1 == (1 & this.words[0]);
        }, n2.prototype.andln = function(e4) {
          return this.words[0] & e4;
        }, n2.prototype.bincn = function(e4) {
          r2("number" == typeof e4);
          var t3 = e4 % 26, i3 = (e4 - t3) / 26, n3 = 1 << t3;
          if (this.length <= i3)
            return this._expand(i3 + 1), this.words[i3] |= n3, this;
          for (var a3 = n3, s3 = i3; 0 !== a3 && s3 < this.length; s3++) {
            var o3 = 0 | this.words[s3];
            a3 = (o3 += a3) >>> 26, o3 &= 67108863, this.words[s3] = o3;
          }
          return 0 !== a3 && (this.words[s3] = a3, this.length++), this;
        }, n2.prototype.isZero = function() {
          return 1 === this.length && 0 === this.words[0];
        }, n2.prototype.cmpn = function(e4) {
          var t3, i3 = e4 < 0;
          if (0 !== this.negative && !i3)
            return -1;
          if (0 === this.negative && i3)
            return 1;
          if (this.strip(), this.length > 1)
            t3 = 1;
          else {
            i3 && (e4 = -e4), r2(e4 <= 67108863, "Number is too big");
            var n3 = 0 | this.words[0];
            t3 = n3 === e4 ? 0 : n3 < e4 ? -1 : 1;
          }
          return 0 !== this.negative ? 0 | -t3 : t3;
        }, n2.prototype.cmp = function(e4) {
          if (0 !== this.negative && 0 === e4.negative)
            return -1;
          if (0 === this.negative && 0 !== e4.negative)
            return 1;
          var t3 = this.ucmp(e4);
          return 0 !== this.negative ? 0 | -t3 : t3;
        }, n2.prototype.ucmp = function(e4) {
          if (this.length > e4.length)
            return 1;
          if (this.length < e4.length)
            return -1;
          for (var t3 = 0, r3 = this.length - 1; r3 >= 0; r3--) {
            var i3 = 0 | this.words[r3], n3 = 0 | e4.words[r3];
            if (i3 !== n3) {
              i3 < n3 ? t3 = -1 : i3 > n3 && (t3 = 1);
              break;
            }
          }
          return t3;
        }, n2.prototype.gtn = function(e4) {
          return 1 === this.cmpn(e4);
        }, n2.prototype.gt = function(e4) {
          return 1 === this.cmp(e4);
        }, n2.prototype.gten = function(e4) {
          return this.cmpn(e4) >= 0;
        }, n2.prototype.gte = function(e4) {
          return this.cmp(e4) >= 0;
        }, n2.prototype.ltn = function(e4) {
          return -1 === this.cmpn(e4);
        }, n2.prototype.lt = function(e4) {
          return -1 === this.cmp(e4);
        }, n2.prototype.lten = function(e4) {
          return this.cmpn(e4) <= 0;
        }, n2.prototype.lte = function(e4) {
          return this.cmp(e4) <= 0;
        }, n2.prototype.eqn = function(e4) {
          return 0 === this.cmpn(e4);
        }, n2.prototype.eq = function(e4) {
          return 0 === this.cmp(e4);
        }, n2.red = function(e4) {
          return new k2(e4);
        }, n2.prototype.toRed = function(e4) {
          return r2(!this.red, "Already a number in reduction context"), r2(0 === this.negative, "red works only with positives"), e4.convertTo(this)._forceRed(e4);
        }, n2.prototype.fromRed = function() {
          return r2(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
        }, n2.prototype._forceRed = function(e4) {
          return this.red = e4, this;
        }, n2.prototype.forceRed = function(e4) {
          return r2(!this.red, "Already a number in reduction context"), this._forceRed(e4);
        }, n2.prototype.redAdd = function(e4) {
          return r2(this.red, "redAdd works only with red numbers"), this.red.add(this, e4);
        }, n2.prototype.redIAdd = function(e4) {
          return r2(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e4);
        }, n2.prototype.redSub = function(e4) {
          return r2(this.red, "redSub works only with red numbers"), this.red.sub(this, e4);
        }, n2.prototype.redISub = function(e4) {
          return r2(this.red, "redISub works only with red numbers"), this.red.isub(this, e4);
        }, n2.prototype.redShl = function(e4) {
          return r2(this.red, "redShl works only with red numbers"), this.red.shl(this, e4);
        }, n2.prototype.redMul = function(e4) {
          return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, e4), this.red.mul(this, e4);
        }, n2.prototype.redIMul = function(e4) {
          return r2(this.red, "redMul works only with red numbers"), this.red._verify2(this, e4), this.red.imul(this, e4);
        }, n2.prototype.redSqr = function() {
          return r2(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
        }, n2.prototype.redISqr = function() {
          return r2(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
        }, n2.prototype.redSqrt = function() {
          return r2(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
        }, n2.prototype.redInvm = function() {
          return r2(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
        }, n2.prototype.redNeg = function() {
          return r2(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
        }, n2.prototype.redPow = function(e4) {
          return r2(this.red && !e4.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e4);
        };
        var b2 = { k256: null, p224: null, p192: null, p25519: null };
        function m2(e4, t3) {
          this.name = e4, this.p = new n2(t3, 16), this.n = this.p.bitLength(), this.k = new n2(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
        }
        function g2() {
          m2.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        function w2() {
          m2.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        function v2() {
          m2.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        function _2() {
          m2.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        function k2(e4) {
          if ("string" == typeof e4) {
            var t3 = n2._prime(e4);
            this.m = t3.p, this.prime = t3;
          } else
            r2(e4.gtn(1), "modulus must be greater than 1"), this.m = e4, this.prime = null;
        }
        function A2(e4) {
          k2.call(this, e4), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new n2(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
        }
        m2.prototype._tmp = function() {
          var e4 = new n2(null);
          return e4.words = Array(Math.ceil(this.n / 13)), e4;
        }, m2.prototype.ireduce = function(e4) {
          var t3, r3 = e4;
          do {
            this.split(r3, this.tmp), t3 = (r3 = (r3 = this.imulK(r3)).iadd(this.tmp)).bitLength();
          } while (t3 > this.n);
          var i3 = t3 < this.n ? -1 : r3.ucmp(this.p);
          return 0 === i3 ? (r3.words[0] = 0, r3.length = 1) : i3 > 0 ? r3.isub(this.p) : r3.strip(), r3;
        }, m2.prototype.split = function(e4, t3) {
          e4.iushrn(this.n, 0, t3);
        }, m2.prototype.imulK = function(e4) {
          return e4.imul(this.k);
        }, i2(g2, m2), g2.prototype.split = function(e4, t3) {
          for (var r3 = 4194303, i3 = Math.min(e4.length, 9), n3 = 0; n3 < i3; n3++)
            t3.words[n3] = e4.words[n3];
          if (t3.length = i3, e4.length <= 9)
            return e4.words[0] = 0, void (e4.length = 1);
          var a3 = e4.words[9];
          for (t3.words[t3.length++] = a3 & r3, n3 = 10; n3 < e4.length; n3++) {
            var s3 = 0 | e4.words[n3];
            e4.words[n3 - 10] = (s3 & r3) << 4 | a3 >>> 22, a3 = s3;
          }
          a3 >>>= 22, e4.words[n3 - 10] = a3, 0 === a3 && e4.length > 10 ? e4.length -= 10 : e4.length -= 9;
        }, g2.prototype.imulK = function(e4) {
          e4.words[e4.length] = 0, e4.words[e4.length + 1] = 0, e4.length += 2;
          for (var t3 = 0, r3 = 0; r3 < e4.length; r3++) {
            var i3 = 0 | e4.words[r3];
            t3 += 977 * i3, e4.words[r3] = 67108863 & t3, t3 = 64 * i3 + (t3 / 67108864 | 0);
          }
          return 0 === e4.words[e4.length - 1] && (e4.length--, 0 === e4.words[e4.length - 1] && e4.length--), e4;
        }, i2(w2, m2), i2(v2, m2), i2(_2, m2), _2.prototype.imulK = function(e4) {
          for (var t3 = 0, r3 = 0; r3 < e4.length; r3++) {
            var i3 = 19 * (0 | e4.words[r3]) + t3, n3 = 67108863 & i3;
            i3 >>>= 26, e4.words[r3] = n3, t3 = i3;
          }
          return 0 !== t3 && (e4.words[e4.length++] = t3), e4;
        }, n2._prime = function(e4) {
          if (b2[e4])
            return b2[e4];
          var t3;
          if ("k256" === e4)
            t3 = new g2();
          else if ("p224" === e4)
            t3 = new w2();
          else if ("p192" === e4)
            t3 = new v2();
          else {
            if ("p25519" !== e4)
              throw Error("Unknown prime " + e4);
            t3 = new _2();
          }
          return b2[e4] = t3, t3;
        }, k2.prototype._verify1 = function(e4) {
          r2(0 === e4.negative, "red works only with positives"), r2(e4.red, "red works only with red numbers");
        }, k2.prototype._verify2 = function(e4, t3) {
          r2(0 == (e4.negative | t3.negative), "red works only with positives"), r2(e4.red && e4.red === t3.red, "red works only with red numbers");
        }, k2.prototype.imod = function(e4) {
          return this.prime ? this.prime.ireduce(e4)._forceRed(this) : e4.umod(this.m)._forceRed(this);
        }, k2.prototype.neg = function(e4) {
          return e4.isZero() ? e4.clone() : this.m.sub(e4)._forceRed(this);
        }, k2.prototype.add = function(e4, t3) {
          this._verify2(e4, t3);
          var r3 = e4.add(t3);
          return r3.cmp(this.m) >= 0 && r3.isub(this.m), r3._forceRed(this);
        }, k2.prototype.iadd = function(e4, t3) {
          this._verify2(e4, t3);
          var r3 = e4.iadd(t3);
          return r3.cmp(this.m) >= 0 && r3.isub(this.m), r3;
        }, k2.prototype.sub = function(e4, t3) {
          this._verify2(e4, t3);
          var r3 = e4.sub(t3);
          return r3.cmpn(0) < 0 && r3.iadd(this.m), r3._forceRed(this);
        }, k2.prototype.isub = function(e4, t3) {
          this._verify2(e4, t3);
          var r3 = e4.isub(t3);
          return r3.cmpn(0) < 0 && r3.iadd(this.m), r3;
        }, k2.prototype.shl = function(e4, t3) {
          return this._verify1(e4), this.imod(e4.ushln(t3));
        }, k2.prototype.imul = function(e4, t3) {
          return this._verify2(e4, t3), this.imod(e4.imul(t3));
        }, k2.prototype.mul = function(e4, t3) {
          return this._verify2(e4, t3), this.imod(e4.mul(t3));
        }, k2.prototype.isqr = function(e4) {
          return this.imul(e4, e4.clone());
        }, k2.prototype.sqr = function(e4) {
          return this.mul(e4, e4);
        }, k2.prototype.sqrt = function(e4) {
          if (e4.isZero())
            return e4.clone();
          var t3 = this.m.andln(3);
          if (r2(t3 % 2 == 1), 3 === t3) {
            var i3 = this.m.add(new n2(1)).iushrn(2);
            return this.pow(e4, i3);
          }
          for (var a3 = this.m.subn(1), s3 = 0; !a3.isZero() && 0 === a3.andln(1); )
            s3++, a3.iushrn(1);
          r2(!a3.isZero());
          var o3 = new n2(1).toRed(this), c3 = o3.redNeg(), u2 = this.m.subn(1).iushrn(1), h3 = this.m.bitLength();
          for (h3 = new n2(2 * h3 * h3).toRed(this); 0 !== this.pow(h3, u2).cmp(c3); )
            h3.redIAdd(c3);
          for (var f3 = this.pow(h3, a3), d3 = this.pow(e4, a3.addn(1).iushrn(1)), l3 = this.pow(e4, a3), p3 = s3; 0 !== l3.cmp(o3); ) {
            for (var y3 = l3, b3 = 0; 0 !== y3.cmp(o3); b3++)
              y3 = y3.redSqr();
            r2(b3 < p3);
            var m3 = this.pow(f3, new n2(1).iushln(p3 - b3 - 1));
            d3 = d3.redMul(m3), f3 = m3.redSqr(), l3 = l3.redMul(f3), p3 = b3;
          }
          return d3;
        }, k2.prototype.invm = function(e4) {
          var t3 = e4._invmp(this.m);
          return 0 !== t3.negative ? (t3.negative = 0, this.imod(t3).redNeg()) : this.imod(t3);
        }, k2.prototype.pow = function(e4, t3) {
          if (t3.isZero())
            return new n2(1).toRed(this);
          if (0 === t3.cmpn(1))
            return e4.clone();
          var r3 = Array(16);
          r3[0] = new n2(1).toRed(this), r3[1] = e4;
          for (var i3 = 2; i3 < r3.length; i3++)
            r3[i3] = this.mul(r3[i3 - 1], e4);
          var a3 = r3[0], s3 = 0, o3 = 0, c3 = t3.bitLength() % 26;
          for (0 === c3 && (c3 = 26), i3 = t3.length - 1; i3 >= 0; i3--) {
            for (var u2 = t3.words[i3], h3 = c3 - 1; h3 >= 0; h3--) {
              var f3 = u2 >> h3 & 1;
              a3 !== r3[0] && (a3 = this.sqr(a3)), 0 !== f3 || 0 !== s3 ? (s3 <<= 1, s3 |= f3, (4 === ++o3 || 0 === i3 && 0 === h3) && (a3 = this.mul(a3, r3[s3]), o3 = 0, s3 = 0)) : o3 = 0;
            }
            c3 = 26;
          }
          return a3;
        }, k2.prototype.convertTo = function(e4) {
          var t3 = e4.umod(this.m);
          return t3 === e4 ? t3.clone() : t3;
        }, k2.prototype.convertFrom = function(e4) {
          var t3 = e4.clone();
          return t3.red = null, t3;
        }, n2.mont = function(e4) {
          return new A2(e4);
        }, i2(A2, k2), A2.prototype.convertTo = function(e4) {
          return this.imod(e4.ushln(this.shift));
        }, A2.prototype.convertFrom = function(e4) {
          var t3 = this.imod(e4.mul(this.rinv));
          return t3.red = null, t3;
        }, A2.prototype.imul = function(e4, t3) {
          if (e4.isZero() || t3.isZero())
            return e4.words[0] = 0, e4.length = 1, e4;
          var r3 = e4.imul(t3), i3 = r3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), n3 = r3.isub(i3).iushrn(this.shift), a3 = n3;
          return n3.cmp(this.m) >= 0 ? a3 = n3.isub(this.m) : n3.cmpn(0) < 0 && (a3 = n3.iadd(this.m)), a3._forceRed(this);
        }, A2.prototype.mul = function(e4, t3) {
          if (e4.isZero() || t3.isZero())
            return new n2(0)._forceRed(this);
          var r3 = e4.mul(t3), i3 = r3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), a3 = r3.isub(i3).iushrn(this.shift), s3 = a3;
          return a3.cmp(this.m) >= 0 ? s3 = a3.isub(this.m) : a3.cmpn(0) < 0 && (s3 = a3.iadd(this.m)), s3._forceRed(this);
        }, A2.prototype.invm = function(e4) {
          return this.imod(e4._invmp(this.m).mul(this.r2))._forceRed(this);
        };
      }(e2, yt);
    });
    var Ud = /* @__PURE__ */ Object.freeze({ __proto__: null, default: Rd, __moduleExports: Rd });
    var Id = class {
      constructor(e2) {
        if (void 0 === e2)
          throw Error("Invalid BigInteger input");
        this.value = new Rd(e2);
      }
      clone() {
        const e2 = new Id(null);
        return this.value.copy(e2.value), e2;
      }
      iinc() {
        return this.value.iadd(new Rd(1)), this;
      }
      inc() {
        return this.clone().iinc();
      }
      idec() {
        return this.value.isub(new Rd(1)), this;
      }
      dec() {
        return this.clone().idec();
      }
      iadd(e2) {
        return this.value.iadd(e2.value), this;
      }
      add(e2) {
        return this.clone().iadd(e2);
      }
      isub(e2) {
        return this.value.isub(e2.value), this;
      }
      sub(e2) {
        return this.clone().isub(e2);
      }
      imul(e2) {
        return this.value.imul(e2.value), this;
      }
      mul(e2) {
        return this.clone().imul(e2);
      }
      imod(e2) {
        return this.value = this.value.umod(e2.value), this;
      }
      mod(e2) {
        return this.clone().imod(e2);
      }
      modExp(e2, t2) {
        const r2 = t2.isEven() ? Rd.red(t2.value) : Rd.mont(t2.value), i2 = this.clone();
        return i2.value = i2.value.toRed(r2).redPow(e2.value).fromRed(), i2;
      }
      modInv(e2) {
        if (!this.gcd(e2).isOne())
          throw Error("Inverse does not exist");
        return new Id(this.value.invm(e2.value));
      }
      gcd(e2) {
        return new Id(this.value.gcd(e2.value));
      }
      ileftShift(e2) {
        return this.value.ishln(e2.value.toNumber()), this;
      }
      leftShift(e2) {
        return this.clone().ileftShift(e2);
      }
      irightShift(e2) {
        return this.value.ishrn(e2.value.toNumber()), this;
      }
      rightShift(e2) {
        return this.clone().irightShift(e2);
      }
      equal(e2) {
        return this.value.eq(e2.value);
      }
      lt(e2) {
        return this.value.lt(e2.value);
      }
      lte(e2) {
        return this.value.lte(e2.value);
      }
      gt(e2) {
        return this.value.gt(e2.value);
      }
      gte(e2) {
        return this.value.gte(e2.value);
      }
      isZero() {
        return this.value.isZero();
      }
      isOne() {
        return this.value.eq(new Rd(1));
      }
      isNegative() {
        return this.value.isNeg();
      }
      isEven() {
        return this.value.isEven();
      }
      abs() {
        const e2 = this.clone();
        return e2.value = e2.value.abs(), e2;
      }
      toString() {
        return this.value.toString();
      }
      toNumber() {
        return this.value.toNumber();
      }
      getBit(e2) {
        return this.value.testn(e2) ? 1 : 0;
      }
      bitLength() {
        return this.value.bitLength();
      }
      byteLength() {
        return this.value.byteLength();
      }
      toUint8Array(e2 = "be", t2) {
        return this.value.toArrayLike(Uint8Array, e2, t2);
      }
    };
    var Bd;
    var Td = /* @__PURE__ */ Object.freeze({ __proto__: null, default: Id });
    var zd = bt(function(e2, t2) {
      var r2 = t2;
      function i2(e3) {
        return 1 === e3.length ? "0" + e3 : e3;
      }
      function n2(e3) {
        for (var t3 = "", r3 = 0; r3 < e3.length; r3++)
          t3 += i2(e3[r3].toString(16));
        return t3;
      }
      r2.toArray = function(e3, t3) {
        if (Array.isArray(e3))
          return e3.slice();
        if (!e3)
          return [];
        var r3 = [];
        if ("string" != typeof e3) {
          for (var i3 = 0; i3 < e3.length; i3++)
            r3[i3] = 0 | e3[i3];
          return r3;
        }
        if ("hex" === t3) {
          (e3 = e3.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e3 = "0" + e3);
          for (i3 = 0; i3 < e3.length; i3 += 2)
            r3.push(parseInt(e3[i3] + e3[i3 + 1], 16));
        } else
          for (i3 = 0; i3 < e3.length; i3++) {
            var n3 = e3.charCodeAt(i3), a2 = n3 >> 8, s2 = 255 & n3;
            a2 ? r3.push(a2, s2) : r3.push(s2);
          }
        return r3;
      }, r2.zero2 = i2, r2.toHex = n2, r2.encode = function(e3, t3) {
        return "hex" === t3 ? n2(e3) : e3;
      };
    });
    var qd = bt(function(e2, t2) {
      var r2 = t2;
      r2.assert = lt, r2.toArray = zd.toArray, r2.zero2 = zd.zero2, r2.toHex = zd.toHex, r2.encode = zd.encode, r2.getNAF = function(e3, t3) {
        for (var r3 = [], i2 = 1 << t3 + 1, n2 = e3.clone(); n2.cmpn(1) >= 0; ) {
          var a2;
          if (n2.isOdd()) {
            var s2 = n2.andln(i2 - 1);
            a2 = s2 > (i2 >> 1) - 1 ? (i2 >> 1) - s2 : s2, n2.isubn(a2);
          } else
            a2 = 0;
          r3.push(a2);
          for (var o2 = 0 !== n2.cmpn(0) && 0 === n2.andln(i2 - 1) ? t3 + 1 : 1, c2 = 1; c2 < o2; c2++)
            r3.push(0);
          n2.iushrn(o2);
        }
        return r3;
      }, r2.getJSF = function(e3, t3) {
        var r3 = [[], []];
        e3 = e3.clone(), t3 = t3.clone();
        for (var i2 = 0, n2 = 0; e3.cmpn(-i2) > 0 || t3.cmpn(-n2) > 0; ) {
          var a2, s2, o2, c2 = e3.andln(3) + i2 & 3, u2 = t3.andln(3) + n2 & 3;
          if (3 === c2 && (c2 = -1), 3 === u2 && (u2 = -1), 0 == (1 & c2))
            a2 = 0;
          else
            a2 = 3 !== (o2 = e3.andln(7) + i2 & 7) && 5 !== o2 || 2 !== u2 ? c2 : -c2;
          if (r3[0].push(a2), 0 == (1 & u2))
            s2 = 0;
          else
            s2 = 3 !== (o2 = t3.andln(7) + n2 & 7) && 5 !== o2 || 2 !== c2 ? u2 : -u2;
          r3[1].push(s2), 2 * i2 === a2 + 1 && (i2 = 1 - i2), 2 * n2 === s2 + 1 && (n2 = 1 - n2), e3.iushrn(1), t3.iushrn(1);
        }
        return r3;
      }, r2.cachedProperty = function(e3, t3, r3) {
        var i2 = "_" + t3;
        e3.prototype[t3] = function() {
          return void 0 !== this[i2] ? this[i2] : this[i2] = r3.call(this);
        };
      }, r2.parseBytes = function(e3) {
        return "string" == typeof e3 ? r2.toArray(e3, "hex") : e3;
      }, r2.intFromLE = function(e3) {
        return new Rd(e3, "hex", "le");
      };
    });
    var Od = function(e2) {
      return Bd || (Bd = new Fd(null)), Bd.generate(e2);
    };
    function Fd(e2) {
      this.rand = e2;
    }
    var Nd = Fd;
    if (Fd.prototype.generate = function(e2) {
      return this._rand(e2);
    }, Fd.prototype._rand = function(e2) {
      if (this.rand.getBytes)
        return this.rand.getBytes(e2);
      for (var t2 = new Uint8Array(e2), r2 = 0; r2 < t2.length; r2++)
        t2[r2] = this.rand.getByte();
      return t2;
    }, "object" == typeof self)
      self.crypto && self.crypto.getRandomValues ? Fd.prototype._rand = function(e2) {
        var t2 = new Uint8Array(e2);
        return self.crypto.getRandomValues(t2), t2;
      } : self.msCrypto && self.msCrypto.getRandomValues ? Fd.prototype._rand = function(e2) {
        var t2 = new Uint8Array(e2);
        return self.msCrypto.getRandomValues(t2), t2;
      } : "object" == typeof window && (Fd.prototype._rand = function() {
        throw Error("Not implemented yet");
      });
    else
      try {
        jd = f.default;
        if ("function" != typeof jd.randomBytes)
          throw Error("Not supported");
        Fd.prototype._rand = function(e2) {
          return jd.randomBytes(e2);
        };
      } catch (e2) {
      }
    var jd;
    Od.Rand = Nd;
    var Ld = qd.getNAF;
    var Wd = qd.getJSF;
    var Hd = qd.assert;
    function Gd(e2, t2) {
      this.type = e2, this.p = new Rd(t2.p, 16), this.red = t2.prime ? Rd.red(t2.prime) : Rd.mont(this.p), this.zero = new Rd(0).toRed(this.red), this.one = new Rd(1).toRed(this.red), this.two = new Rd(2).toRed(this.red), this.n = t2.n && new Rd(t2.n, 16), this.g = t2.g && this.pointFromJSON(t2.g, t2.gRed), this._wnafT1 = [, , , ,], this._wnafT2 = [, , , ,], this._wnafT3 = [, , , ,], this._wnafT4 = [, , , ,];
      var r2 = this.n && this.p.div(this.n);
      !r2 || r2.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
    }
    var Vd = Gd;
    function $d(e2, t2) {
      this.curve = e2, this.type = t2, this.precomputed = null;
    }
    Gd.prototype.point = function() {
      throw Error("Not implemented");
    }, Gd.prototype.validate = function() {
      throw Error("Not implemented");
    }, Gd.prototype._fixedNafMul = function(e2, t2) {
      Hd(e2.precomputed);
      var r2 = e2._getDoubles(), i2 = Ld(t2, 1), n2 = (1 << r2.step + 1) - (r2.step % 2 == 0 ? 2 : 1);
      n2 /= 3;
      for (var a2 = [], s2 = 0; s2 < i2.length; s2 += r2.step) {
        var o2 = 0;
        for (t2 = s2 + r2.step - 1; t2 >= s2; t2--)
          o2 = (o2 << 1) + i2[t2];
        a2.push(o2);
      }
      for (var c2 = this.jpoint(null, null, null), u2 = this.jpoint(null, null, null), h2 = n2; h2 > 0; h2--) {
        for (s2 = 0; s2 < a2.length; s2++) {
          (o2 = a2[s2]) === h2 ? u2 = u2.mixedAdd(r2.points[s2]) : o2 === -h2 && (u2 = u2.mixedAdd(r2.points[s2].neg()));
        }
        c2 = c2.add(u2);
      }
      return c2.toP();
    }, Gd.prototype._wnafMul = function(e2, t2) {
      var r2 = 4, i2 = e2._getNAFPoints(r2);
      r2 = i2.wnd;
      for (var n2 = i2.points, a2 = Ld(t2, r2), s2 = this.jpoint(null, null, null), o2 = a2.length - 1; o2 >= 0; o2--) {
        for (t2 = 0; o2 >= 0 && 0 === a2[o2]; o2--)
          t2++;
        if (o2 >= 0 && t2++, s2 = s2.dblp(t2), o2 < 0)
          break;
        var c2 = a2[o2];
        Hd(0 !== c2), s2 = "affine" === e2.type ? c2 > 0 ? s2.mixedAdd(n2[c2 - 1 >> 1]) : s2.mixedAdd(n2[-c2 - 1 >> 1].neg()) : c2 > 0 ? s2.add(n2[c2 - 1 >> 1]) : s2.add(n2[-c2 - 1 >> 1].neg());
      }
      return "affine" === e2.type ? s2.toP() : s2;
    }, Gd.prototype._wnafMulAdd = function(e2, t2, r2, i2, n2) {
      for (var a2 = this._wnafT1, s2 = this._wnafT2, o2 = this._wnafT3, c2 = 0, u2 = 0; u2 < i2; u2++) {
        var h2 = (A2 = t2[u2])._getNAFPoints(e2);
        a2[u2] = h2.wnd, s2[u2] = h2.points;
      }
      for (u2 = i2 - 1; u2 >= 1; u2 -= 2) {
        var f2 = u2 - 1, d2 = u2;
        if (1 === a2[f2] && 1 === a2[d2]) {
          var l2 = [t2[f2], null, null, t2[d2]];
          0 === t2[f2].y.cmp(t2[d2].y) ? (l2[1] = t2[f2].add(t2[d2]), l2[2] = t2[f2].toJ().mixedAdd(t2[d2].neg())) : 0 === t2[f2].y.cmp(t2[d2].y.redNeg()) ? (l2[1] = t2[f2].toJ().mixedAdd(t2[d2]), l2[2] = t2[f2].add(t2[d2].neg())) : (l2[1] = t2[f2].toJ().mixedAdd(t2[d2]), l2[2] = t2[f2].toJ().mixedAdd(t2[d2].neg()));
          var p2 = [-3, -1, -5, -7, 0, 7, 5, 1, 3], y2 = Wd(r2[f2], r2[d2]);
          c2 = Math.max(y2[0].length, c2), o2[f2] = Array(c2), o2[d2] = Array(c2);
          for (var b2 = 0; b2 < c2; b2++) {
            var m2 = 0 | y2[0][b2], g2 = 0 | y2[1][b2];
            o2[f2][b2] = p2[3 * (m2 + 1) + (g2 + 1)], o2[d2][b2] = 0, s2[f2] = l2;
          }
        } else
          o2[f2] = Ld(r2[f2], a2[f2]), o2[d2] = Ld(r2[d2], a2[d2]), c2 = Math.max(o2[f2].length, c2), c2 = Math.max(o2[d2].length, c2);
      }
      var w2 = this.jpoint(null, null, null), v2 = this._wnafT4;
      for (u2 = c2; u2 >= 0; u2--) {
        for (var _2 = 0; u2 >= 0; ) {
          var k2 = true;
          for (b2 = 0; b2 < i2; b2++)
            v2[b2] = 0 | o2[b2][u2], 0 !== v2[b2] && (k2 = false);
          if (!k2)
            break;
          _2++, u2--;
        }
        if (u2 >= 0 && _2++, w2 = w2.dblp(_2), u2 < 0)
          break;
        for (b2 = 0; b2 < i2; b2++) {
          var A2, S2 = v2[b2];
          0 !== S2 && (S2 > 0 ? A2 = s2[b2][S2 - 1 >> 1] : S2 < 0 && (A2 = s2[b2][-S2 - 1 >> 1].neg()), w2 = "affine" === A2.type ? w2.mixedAdd(A2) : w2.add(A2));
        }
      }
      for (u2 = 0; u2 < i2; u2++)
        s2[u2] = null;
      return n2 ? w2 : w2.toP();
    }, Gd.BasePoint = $d, $d.prototype.eq = function() {
      throw Error("Not implemented");
    }, $d.prototype.validate = function() {
      return this.curve.validate(this);
    }, Gd.prototype.decodePoint = function(e2, t2) {
      e2 = qd.toArray(e2, t2);
      var r2 = this.p.byteLength();
      if ((4 === e2[0] || 6 === e2[0] || 7 === e2[0]) && e2.length - 1 == 2 * r2)
        return 6 === e2[0] ? Hd(e2[e2.length - 1] % 2 == 0) : 7 === e2[0] && Hd(e2[e2.length - 1] % 2 == 1), this.point(e2.slice(1, 1 + r2), e2.slice(1 + r2, 1 + 2 * r2));
      if ((2 === e2[0] || 3 === e2[0]) && e2.length - 1 === r2)
        return this.pointFromX(e2.slice(1, 1 + r2), 3 === e2[0]);
      throw Error("Unknown point format");
    }, $d.prototype.encodeCompressed = function(e2) {
      return this.encode(e2, true);
    }, $d.prototype._encode = function(e2) {
      var t2 = this.curve.p.byteLength(), r2 = this.getX().toArray("be", t2);
      return e2 ? [this.getY().isEven() ? 2 : 3].concat(r2) : [4].concat(r2, this.getY().toArray("be", t2));
    }, $d.prototype.encode = function(e2, t2) {
      return qd.encode(this._encode(t2), e2);
    }, $d.prototype.precompute = function(e2) {
      if (this.precomputed)
        return this;
      var t2 = { doubles: null, naf: null, beta: null };
      return t2.naf = this._getNAFPoints(8), t2.doubles = this._getDoubles(4, e2), t2.beta = this._getBeta(), this.precomputed = t2, this;
    }, $d.prototype._hasDoubles = function(e2) {
      if (!this.precomputed)
        return false;
      var t2 = this.precomputed.doubles;
      return !!t2 && t2.points.length >= Math.ceil((e2.bitLength() + 1) / t2.step);
    }, $d.prototype._getDoubles = function(e2, t2) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      for (var r2 = [this], i2 = this, n2 = 0; n2 < t2; n2 += e2) {
        for (var a2 = 0; a2 < e2; a2++)
          i2 = i2.dbl();
        r2.push(i2);
      }
      return { step: e2, points: r2 };
    }, $d.prototype._getNAFPoints = function(e2) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      for (var t2 = [this], r2 = (1 << e2) - 1, i2 = 1 === r2 ? null : this.dbl(), n2 = 1; n2 < r2; n2++)
        t2[n2] = t2[n2 - 1].add(i2);
      return { wnd: e2, points: t2 };
    }, $d.prototype._getBeta = function() {
      return null;
    }, $d.prototype.dblp = function(e2) {
      for (var t2 = this, r2 = 0; r2 < e2; r2++)
        t2 = t2.dbl();
      return t2;
    };
    var Zd = qd.assert;
    function Yd(e2) {
      Vd.call(this, "short", e2), this.a = new Rd(e2.a, 16).toRed(this.red), this.b = new Rd(e2.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e2), this._endoWnafT1 = [, , , ,], this._endoWnafT2 = [, , , ,];
    }
    gt(Yd, Vd);
    var Xd = Yd;
    function Qd(e2, t2, r2, i2) {
      Vd.BasePoint.call(this, e2, "affine"), null === t2 && null === r2 ? (this.x = null, this.y = null, this.inf = true) : (this.x = new Rd(t2, 16), this.y = new Rd(r2, 16), i2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
    }
    function Jd(e2, t2, r2, i2) {
      Vd.BasePoint.call(this, e2, "jacobian"), null === t2 && null === r2 && null === i2 ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new Rd(0)) : (this.x = new Rd(t2, 16), this.y = new Rd(r2, 16), this.z = new Rd(i2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
    }
    function el(e2) {
      Vd.call(this, "mont", e2), this.a = new Rd(e2.a, 16).toRed(this.red), this.b = new Rd(e2.b, 16).toRed(this.red), this.i4 = new Rd(4).toRed(this.red).redInvm(), this.two = new Rd(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    Yd.prototype._getEndomorphism = function(e2) {
      if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
        var t2, r2;
        if (e2.beta)
          t2 = new Rd(e2.beta, 16).toRed(this.red);
        else {
          var i2 = this._getEndoRoots(this.p);
          t2 = (t2 = i2[0].cmp(i2[1]) < 0 ? i2[0] : i2[1]).toRed(this.red);
        }
        if (e2.lambda)
          r2 = new Rd(e2.lambda, 16);
        else {
          var n2 = this._getEndoRoots(this.n);
          0 === this.g.mul(n2[0]).x.cmp(this.g.x.redMul(t2)) ? r2 = n2[0] : (r2 = n2[1], Zd(0 === this.g.mul(r2).x.cmp(this.g.x.redMul(t2))));
        }
        return { beta: t2, lambda: r2, basis: e2.basis ? e2.basis.map(function(e3) {
          return { a: new Rd(e3.a, 16), b: new Rd(e3.b, 16) };
        }) : this._getEndoBasis(r2) };
      }
    }, Yd.prototype._getEndoRoots = function(e2) {
      var t2 = e2 === this.p ? this.red : Rd.mont(e2), r2 = new Rd(2).toRed(t2).redInvm(), i2 = r2.redNeg(), n2 = new Rd(3).toRed(t2).redNeg().redSqrt().redMul(r2);
      return [i2.redAdd(n2).fromRed(), i2.redSub(n2).fromRed()];
    }, Yd.prototype._getEndoBasis = function(e2) {
      for (var t2, r2, i2, n2, a2, s2, o2, c2, u2, h2 = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), f2 = e2, d2 = this.n.clone(), l2 = new Rd(1), p2 = new Rd(0), y2 = new Rd(0), b2 = new Rd(1), m2 = 0; 0 !== f2.cmpn(0); ) {
        var g2 = d2.div(f2);
        c2 = d2.sub(g2.mul(f2)), u2 = y2.sub(g2.mul(l2));
        var w2 = b2.sub(g2.mul(p2));
        if (!i2 && c2.cmp(h2) < 0)
          t2 = o2.neg(), r2 = l2, i2 = c2.neg(), n2 = u2;
        else if (i2 && 2 == ++m2)
          break;
        o2 = c2, d2 = f2, f2 = c2, y2 = l2, l2 = u2, b2 = p2, p2 = w2;
      }
      a2 = c2.neg(), s2 = u2;
      var v2 = i2.sqr().add(n2.sqr());
      return a2.sqr().add(s2.sqr()).cmp(v2) >= 0 && (a2 = t2, s2 = r2), i2.negative && (i2 = i2.neg(), n2 = n2.neg()), a2.negative && (a2 = a2.neg(), s2 = s2.neg()), [{ a: i2, b: n2 }, { a: a2, b: s2 }];
    }, Yd.prototype._endoSplit = function(e2) {
      var t2 = this.endo.basis, r2 = t2[0], i2 = t2[1], n2 = i2.b.mul(e2).divRound(this.n), a2 = r2.b.neg().mul(e2).divRound(this.n), s2 = n2.mul(r2.a), o2 = a2.mul(i2.a), c2 = n2.mul(r2.b), u2 = a2.mul(i2.b);
      return { k1: e2.sub(s2).sub(o2), k2: c2.add(u2).neg() };
    }, Yd.prototype.pointFromX = function(e2, t2) {
      (e2 = new Rd(e2, 16)).red || (e2 = e2.toRed(this.red));
      var r2 = e2.redSqr().redMul(e2).redIAdd(e2.redMul(this.a)).redIAdd(this.b), i2 = r2.redSqrt();
      if (0 !== i2.redSqr().redSub(r2).cmp(this.zero))
        throw Error("invalid point");
      var n2 = i2.fromRed().isOdd();
      return (t2 && !n2 || !t2 && n2) && (i2 = i2.redNeg()), this.point(e2, i2);
    }, Yd.prototype.validate = function(e2) {
      if (e2.inf)
        return true;
      var t2 = e2.x, r2 = e2.y, i2 = this.a.redMul(t2), n2 = t2.redSqr().redMul(t2).redIAdd(i2).redIAdd(this.b);
      return 0 === r2.redSqr().redISub(n2).cmpn(0);
    }, Yd.prototype._endoWnafMulAdd = function(e2, t2, r2) {
      for (var i2 = this._endoWnafT1, n2 = this._endoWnafT2, a2 = 0; a2 < e2.length; a2++) {
        var s2 = this._endoSplit(t2[a2]), o2 = e2[a2], c2 = o2._getBeta();
        s2.k1.negative && (s2.k1.ineg(), o2 = o2.neg(true)), s2.k2.negative && (s2.k2.ineg(), c2 = c2.neg(true)), i2[2 * a2] = o2, i2[2 * a2 + 1] = c2, n2[2 * a2] = s2.k1, n2[2 * a2 + 1] = s2.k2;
      }
      for (var u2 = this._wnafMulAdd(1, i2, n2, 2 * a2, r2), h2 = 0; h2 < 2 * a2; h2++)
        i2[h2] = null, n2[h2] = null;
      return u2;
    }, gt(Qd, Vd.BasePoint), Yd.prototype.point = function(e2, t2, r2) {
      return new Qd(this, e2, t2, r2);
    }, Yd.prototype.pointFromJSON = function(e2, t2) {
      return Qd.fromJSON(this, e2, t2);
    }, Qd.prototype._getBeta = function() {
      if (this.curve.endo) {
        var e2 = this.precomputed;
        if (e2 && e2.beta)
          return e2.beta;
        var t2 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (e2) {
          var r2 = this.curve, i2 = function(e3) {
            return r2.point(e3.x.redMul(r2.endo.beta), e3.y);
          };
          e2.beta = t2, t2.precomputed = { beta: null, naf: e2.naf && { wnd: e2.naf.wnd, points: e2.naf.points.map(i2) }, doubles: e2.doubles && { step: e2.doubles.step, points: e2.doubles.points.map(i2) } };
        }
        return t2;
      }
    }, Qd.prototype.toJSON = function() {
      return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
    }, Qd.fromJSON = function(e2, t2, r2) {
      "string" == typeof t2 && (t2 = JSON.parse(t2));
      var i2 = e2.point(t2[0], t2[1], r2);
      if (!t2[2])
        return i2;
      function n2(t3) {
        return e2.point(t3[0], t3[1], r2);
      }
      var a2 = t2[2];
      return i2.precomputed = { beta: null, doubles: a2.doubles && { step: a2.doubles.step, points: [i2].concat(a2.doubles.points.map(n2)) }, naf: a2.naf && { wnd: a2.naf.wnd, points: [i2].concat(a2.naf.points.map(n2)) } }, i2;
    }, Qd.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    }, Qd.prototype.isInfinity = function() {
      return this.inf;
    }, Qd.prototype.add = function(e2) {
      if (this.inf)
        return e2;
      if (e2.inf)
        return this;
      if (this.eq(e2))
        return this.dbl();
      if (this.neg().eq(e2))
        return this.curve.point(null, null);
      if (0 === this.x.cmp(e2.x))
        return this.curve.point(null, null);
      var t2 = this.y.redSub(e2.y);
      0 !== t2.cmpn(0) && (t2 = t2.redMul(this.x.redSub(e2.x).redInvm()));
      var r2 = t2.redSqr().redISub(this.x).redISub(e2.x), i2 = t2.redMul(this.x.redSub(r2)).redISub(this.y);
      return this.curve.point(r2, i2);
    }, Qd.prototype.dbl = function() {
      if (this.inf)
        return this;
      var e2 = this.y.redAdd(this.y);
      if (0 === e2.cmpn(0))
        return this.curve.point(null, null);
      var t2 = this.curve.a, r2 = this.x.redSqr(), i2 = e2.redInvm(), n2 = r2.redAdd(r2).redIAdd(r2).redIAdd(t2).redMul(i2), a2 = n2.redSqr().redISub(this.x.redAdd(this.x)), s2 = n2.redMul(this.x.redSub(a2)).redISub(this.y);
      return this.curve.point(a2, s2);
    }, Qd.prototype.getX = function() {
      return this.x.fromRed();
    }, Qd.prototype.getY = function() {
      return this.y.fromRed();
    }, Qd.prototype.mul = function(e2) {
      return e2 = new Rd(e2, 16), this.isInfinity() ? this : this._hasDoubles(e2) ? this.curve._fixedNafMul(this, e2) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e2]) : this.curve._wnafMul(this, e2);
    }, Qd.prototype.mulAdd = function(e2, t2, r2) {
      var i2 = [this, t2], n2 = [e2, r2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(i2, n2) : this.curve._wnafMulAdd(1, i2, n2, 2);
    }, Qd.prototype.jmulAdd = function(e2, t2, r2) {
      var i2 = [this, t2], n2 = [e2, r2];
      return this.curve.endo ? this.curve._endoWnafMulAdd(i2, n2, true) : this.curve._wnafMulAdd(1, i2, n2, 2, true);
    }, Qd.prototype.eq = function(e2) {
      return this === e2 || this.inf === e2.inf && (this.inf || 0 === this.x.cmp(e2.x) && 0 === this.y.cmp(e2.y));
    }, Qd.prototype.neg = function(e2) {
      if (this.inf)
        return this;
      var t2 = this.curve.point(this.x, this.y.redNeg());
      if (e2 && this.precomputed) {
        var r2 = this.precomputed, i2 = function(e3) {
          return e3.neg();
        };
        t2.precomputed = { naf: r2.naf && { wnd: r2.naf.wnd, points: r2.naf.points.map(i2) }, doubles: r2.doubles && { step: r2.doubles.step, points: r2.doubles.points.map(i2) } };
      }
      return t2;
    }, Qd.prototype.toJ = function() {
      return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
    }, gt(Jd, Vd.BasePoint), Yd.prototype.jpoint = function(e2, t2, r2) {
      return new Jd(this, e2, t2, r2);
    }, Jd.prototype.toP = function() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var e2 = this.z.redInvm(), t2 = e2.redSqr(), r2 = this.x.redMul(t2), i2 = this.y.redMul(t2).redMul(e2);
      return this.curve.point(r2, i2);
    }, Jd.prototype.neg = function() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    }, Jd.prototype.add = function(e2) {
      if (this.isInfinity())
        return e2;
      if (e2.isInfinity())
        return this;
      var t2 = e2.z.redSqr(), r2 = this.z.redSqr(), i2 = this.x.redMul(t2), n2 = e2.x.redMul(r2), a2 = this.y.redMul(t2.redMul(e2.z)), s2 = e2.y.redMul(r2.redMul(this.z)), o2 = i2.redSub(n2), c2 = a2.redSub(s2);
      if (0 === o2.cmpn(0))
        return 0 !== c2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
      var u2 = o2.redSqr(), h2 = u2.redMul(o2), f2 = i2.redMul(u2), d2 = c2.redSqr().redIAdd(h2).redISub(f2).redISub(f2), l2 = c2.redMul(f2.redISub(d2)).redISub(a2.redMul(h2)), p2 = this.z.redMul(e2.z).redMul(o2);
      return this.curve.jpoint(d2, l2, p2);
    }, Jd.prototype.mixedAdd = function(e2) {
      if (this.isInfinity())
        return e2.toJ();
      if (e2.isInfinity())
        return this;
      var t2 = this.z.redSqr(), r2 = this.x, i2 = e2.x.redMul(t2), n2 = this.y, a2 = e2.y.redMul(t2).redMul(this.z), s2 = r2.redSub(i2), o2 = n2.redSub(a2);
      if (0 === s2.cmpn(0))
        return 0 !== o2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
      var c2 = s2.redSqr(), u2 = c2.redMul(s2), h2 = r2.redMul(c2), f2 = o2.redSqr().redIAdd(u2).redISub(h2).redISub(h2), d2 = o2.redMul(h2.redISub(f2)).redISub(n2.redMul(u2)), l2 = this.z.redMul(s2);
      return this.curve.jpoint(f2, d2, l2);
    }, Jd.prototype.dblp = function(e2) {
      if (0 === e2)
        return this;
      if (this.isInfinity())
        return this;
      if (!e2)
        return this.dbl();
      if (this.curve.zeroA || this.curve.threeA) {
        for (var t2 = this, r2 = 0; r2 < e2; r2++)
          t2 = t2.dbl();
        return t2;
      }
      var i2 = this.curve.a, n2 = this.curve.tinv, a2 = this.x, s2 = this.y, o2 = this.z, c2 = o2.redSqr().redSqr(), u2 = s2.redAdd(s2);
      for (r2 = 0; r2 < e2; r2++) {
        var h2 = a2.redSqr(), f2 = u2.redSqr(), d2 = f2.redSqr(), l2 = h2.redAdd(h2).redIAdd(h2).redIAdd(i2.redMul(c2)), p2 = a2.redMul(f2), y2 = l2.redSqr().redISub(p2.redAdd(p2)), b2 = p2.redISub(y2), m2 = l2.redMul(b2);
        m2 = m2.redIAdd(m2).redISub(d2);
        var g2 = u2.redMul(o2);
        r2 + 1 < e2 && (c2 = c2.redMul(d2)), a2 = y2, o2 = g2, u2 = m2;
      }
      return this.curve.jpoint(a2, u2.redMul(n2), o2);
    }, Jd.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    }, Jd.prototype._zeroDbl = function() {
      var e2, t2, r2;
      if (this.zOne) {
        var i2 = this.x.redSqr(), n2 = this.y.redSqr(), a2 = n2.redSqr(), s2 = this.x.redAdd(n2).redSqr().redISub(i2).redISub(a2);
        s2 = s2.redIAdd(s2);
        var o2 = i2.redAdd(i2).redIAdd(i2), c2 = o2.redSqr().redISub(s2).redISub(s2), u2 = a2.redIAdd(a2);
        u2 = (u2 = u2.redIAdd(u2)).redIAdd(u2), e2 = c2, t2 = o2.redMul(s2.redISub(c2)).redISub(u2), r2 = this.y.redAdd(this.y);
      } else {
        var h2 = this.x.redSqr(), f2 = this.y.redSqr(), d2 = f2.redSqr(), l2 = this.x.redAdd(f2).redSqr().redISub(h2).redISub(d2);
        l2 = l2.redIAdd(l2);
        var p2 = h2.redAdd(h2).redIAdd(h2), y2 = p2.redSqr(), b2 = d2.redIAdd(d2);
        b2 = (b2 = b2.redIAdd(b2)).redIAdd(b2), e2 = y2.redISub(l2).redISub(l2), t2 = p2.redMul(l2.redISub(e2)).redISub(b2), r2 = (r2 = this.y.redMul(this.z)).redIAdd(r2);
      }
      return this.curve.jpoint(e2, t2, r2);
    }, Jd.prototype._threeDbl = function() {
      var e2, t2, r2;
      if (this.zOne) {
        var i2 = this.x.redSqr(), n2 = this.y.redSqr(), a2 = n2.redSqr(), s2 = this.x.redAdd(n2).redSqr().redISub(i2).redISub(a2);
        s2 = s2.redIAdd(s2);
        var o2 = i2.redAdd(i2).redIAdd(i2).redIAdd(this.curve.a), c2 = o2.redSqr().redISub(s2).redISub(s2);
        e2 = c2;
        var u2 = a2.redIAdd(a2);
        u2 = (u2 = u2.redIAdd(u2)).redIAdd(u2), t2 = o2.redMul(s2.redISub(c2)).redISub(u2), r2 = this.y.redAdd(this.y);
      } else {
        var h2 = this.z.redSqr(), f2 = this.y.redSqr(), d2 = this.x.redMul(f2), l2 = this.x.redSub(h2).redMul(this.x.redAdd(h2));
        l2 = l2.redAdd(l2).redIAdd(l2);
        var p2 = d2.redIAdd(d2), y2 = (p2 = p2.redIAdd(p2)).redAdd(p2);
        e2 = l2.redSqr().redISub(y2), r2 = this.y.redAdd(this.z).redSqr().redISub(f2).redISub(h2);
        var b2 = f2.redSqr();
        b2 = (b2 = (b2 = b2.redIAdd(b2)).redIAdd(b2)).redIAdd(b2), t2 = l2.redMul(p2.redISub(e2)).redISub(b2);
      }
      return this.curve.jpoint(e2, t2, r2);
    }, Jd.prototype._dbl = function() {
      var e2 = this.curve.a, t2 = this.x, r2 = this.y, i2 = this.z, n2 = i2.redSqr().redSqr(), a2 = t2.redSqr(), s2 = r2.redSqr(), o2 = a2.redAdd(a2).redIAdd(a2).redIAdd(e2.redMul(n2)), c2 = t2.redAdd(t2), u2 = (c2 = c2.redIAdd(c2)).redMul(s2), h2 = o2.redSqr().redISub(u2.redAdd(u2)), f2 = u2.redISub(h2), d2 = s2.redSqr();
      d2 = (d2 = (d2 = d2.redIAdd(d2)).redIAdd(d2)).redIAdd(d2);
      var l2 = o2.redMul(f2).redISub(d2), p2 = r2.redAdd(r2).redMul(i2);
      return this.curve.jpoint(h2, l2, p2);
    }, Jd.prototype.trpl = function() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var e2 = this.x.redSqr(), t2 = this.y.redSqr(), r2 = this.z.redSqr(), i2 = t2.redSqr(), n2 = e2.redAdd(e2).redIAdd(e2), a2 = n2.redSqr(), s2 = this.x.redAdd(t2).redSqr().redISub(e2).redISub(i2), o2 = (s2 = (s2 = (s2 = s2.redIAdd(s2)).redAdd(s2).redIAdd(s2)).redISub(a2)).redSqr(), c2 = i2.redIAdd(i2);
      c2 = (c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2)).redIAdd(c2);
      var u2 = n2.redIAdd(s2).redSqr().redISub(a2).redISub(o2).redISub(c2), h2 = t2.redMul(u2);
      h2 = (h2 = h2.redIAdd(h2)).redIAdd(h2);
      var f2 = this.x.redMul(o2).redISub(h2);
      f2 = (f2 = f2.redIAdd(f2)).redIAdd(f2);
      var d2 = this.y.redMul(u2.redMul(c2.redISub(u2)).redISub(s2.redMul(o2)));
      d2 = (d2 = (d2 = d2.redIAdd(d2)).redIAdd(d2)).redIAdd(d2);
      var l2 = this.z.redAdd(s2).redSqr().redISub(r2).redISub(o2);
      return this.curve.jpoint(f2, d2, l2);
    }, Jd.prototype.mul = function(e2, t2) {
      return e2 = new Rd(e2, t2), this.curve._wnafMul(this, e2);
    }, Jd.prototype.eq = function(e2) {
      if ("affine" === e2.type)
        return this.eq(e2.toJ());
      if (this === e2)
        return true;
      var t2 = this.z.redSqr(), r2 = e2.z.redSqr();
      if (0 !== this.x.redMul(r2).redISub(e2.x.redMul(t2)).cmpn(0))
        return false;
      var i2 = t2.redMul(this.z), n2 = r2.redMul(e2.z);
      return 0 === this.y.redMul(n2).redISub(e2.y.redMul(i2)).cmpn(0);
    }, Jd.prototype.eqXToP = function(e2) {
      var t2 = this.z.redSqr(), r2 = e2.toRed(this.curve.red).redMul(t2);
      if (0 === this.x.cmp(r2))
        return true;
      for (var i2 = e2.clone(), n2 = this.curve.redN.redMul(t2); ; ) {
        if (i2.iadd(this.curve.n), i2.cmp(this.curve.p) >= 0)
          return false;
        if (r2.redIAdd(n2), 0 === this.x.cmp(r2))
          return true;
      }
    }, Jd.prototype.inspect = function() {
      return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    }, Jd.prototype.isInfinity = function() {
      return 0 === this.z.cmpn(0);
    }, gt(el, Vd);
    var tl = el;
    function rl(e2, t2, r2) {
      Vd.BasePoint.call(this, e2, "projective"), null === t2 && null === r2 ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new Rd(t2, 16), this.z = new Rd(r2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
    }
    el.prototype.validate = function(e2) {
      var t2 = e2.normalize().x, r2 = t2.redSqr(), i2 = r2.redMul(t2).redAdd(r2.redMul(this.a)).redAdd(t2);
      return 0 === i2.redSqrt().redSqr().cmp(i2);
    }, gt(rl, Vd.BasePoint), el.prototype.decodePoint = function(e2, t2) {
      if (33 === (e2 = qd.toArray(e2, t2)).length && 64 === e2[0] && (e2 = e2.slice(1, 33).reverse()), 32 !== e2.length)
        throw Error("Unknown point compression format");
      return this.point(e2, 1);
    }, el.prototype.point = function(e2, t2) {
      return new rl(this, e2, t2);
    }, el.prototype.pointFromJSON = function(e2) {
      return rl.fromJSON(this, e2);
    }, rl.prototype.precompute = function() {
    }, rl.prototype._encode = function(e2) {
      var t2 = this.curve.p.byteLength();
      return e2 ? [64].concat(this.getX().toArray("le", t2)) : this.getX().toArray("be", t2);
    }, rl.fromJSON = function(e2, t2) {
      return new rl(e2, t2[0], t2[1] || e2.one);
    }, rl.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    }, rl.prototype.isInfinity = function() {
      return 0 === this.z.cmpn(0);
    }, rl.prototype.dbl = function() {
      var e2 = this.x.redAdd(this.z).redSqr(), t2 = this.x.redSub(this.z).redSqr(), r2 = e2.redSub(t2), i2 = e2.redMul(t2), n2 = r2.redMul(t2.redAdd(this.curve.a24.redMul(r2)));
      return this.curve.point(i2, n2);
    }, rl.prototype.add = function() {
      throw Error("Not supported on Montgomery curve");
    }, rl.prototype.diffAdd = function(e2, t2) {
      var r2 = this.x.redAdd(this.z), i2 = this.x.redSub(this.z), n2 = e2.x.redAdd(e2.z), a2 = e2.x.redSub(e2.z).redMul(r2), s2 = n2.redMul(i2), o2 = t2.z.redMul(a2.redAdd(s2).redSqr()), c2 = t2.x.redMul(a2.redISub(s2).redSqr());
      return this.curve.point(o2, c2);
    }, rl.prototype.mul = function(e2) {
      for (var t2 = (e2 = new Rd(e2, 16)).clone(), r2 = this, i2 = this.curve.point(null, null), n2 = []; 0 !== t2.cmpn(0); t2.iushrn(1))
        n2.push(t2.andln(1));
      for (var a2 = n2.length - 1; a2 >= 0; a2--)
        0 === n2[a2] ? (r2 = r2.diffAdd(i2, this), i2 = i2.dbl()) : (i2 = r2.diffAdd(i2, this), r2 = r2.dbl());
      return i2;
    }, rl.prototype.mulAdd = function() {
      throw Error("Not supported on Montgomery curve");
    }, rl.prototype.jumlAdd = function() {
      throw Error("Not supported on Montgomery curve");
    }, rl.prototype.eq = function(e2) {
      return 0 === this.getX().cmp(e2.getX());
    }, rl.prototype.normalize = function() {
      return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
    }, rl.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
    var il = qd.assert;
    function nl(e2) {
      this.twisted = 1 != (0 | e2.a), this.mOneA = this.twisted && -1 == (0 | e2.a), this.extended = this.mOneA, Vd.call(this, "edwards", e2), this.a = new Rd(e2.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new Rd(e2.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new Rd(e2.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), il(!this.twisted || 0 === this.c.fromRed().cmpn(1)), this.oneC = 1 == (0 | e2.c);
    }
    gt(nl, Vd);
    var al = nl;
    function sl(e2, t2, r2, i2, n2) {
      Vd.BasePoint.call(this, e2, "projective"), null === t2 && null === r2 && null === i2 ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = true) : (this.x = new Rd(t2, 16), this.y = new Rd(r2, 16), this.z = i2 ? new Rd(i2, 16) : this.curve.one, this.t = n2 && new Rd(n2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
    }
    nl.prototype._mulA = function(e2) {
      return this.mOneA ? e2.redNeg() : this.a.redMul(e2);
    }, nl.prototype._mulC = function(e2) {
      return this.oneC ? e2 : this.c.redMul(e2);
    }, nl.prototype.jpoint = function(e2, t2, r2, i2) {
      return this.point(e2, t2, r2, i2);
    }, nl.prototype.pointFromX = function(e2, t2) {
      (e2 = new Rd(e2, 16)).red || (e2 = e2.toRed(this.red));
      var r2 = e2.redSqr(), i2 = this.c2.redSub(this.a.redMul(r2)), n2 = this.one.redSub(this.c2.redMul(this.d).redMul(r2)), a2 = i2.redMul(n2.redInvm()), s2 = a2.redSqrt();
      if (0 !== s2.redSqr().redSub(a2).cmp(this.zero))
        throw Error("invalid point");
      var o2 = s2.fromRed().isOdd();
      return (t2 && !o2 || !t2 && o2) && (s2 = s2.redNeg()), this.point(e2, s2);
    }, nl.prototype.pointFromY = function(e2, t2) {
      (e2 = new Rd(e2, 16)).red || (e2 = e2.toRed(this.red));
      var r2 = e2.redSqr(), i2 = r2.redSub(this.c2), n2 = r2.redMul(this.d).redMul(this.c2).redSub(this.a), a2 = i2.redMul(n2.redInvm());
      if (0 === a2.cmp(this.zero)) {
        if (t2)
          throw Error("invalid point");
        return this.point(this.zero, e2);
      }
      var s2 = a2.redSqrt();
      if (0 !== s2.redSqr().redSub(a2).cmp(this.zero))
        throw Error("invalid point");
      return s2.fromRed().isOdd() !== t2 && (s2 = s2.redNeg()), this.point(s2, e2);
    }, nl.prototype.validate = function(e2) {
      if (e2.isInfinity())
        return true;
      e2.normalize();
      var t2 = e2.x.redSqr(), r2 = e2.y.redSqr(), i2 = t2.redMul(this.a).redAdd(r2), n2 = this.c2.redMul(this.one.redAdd(this.d.redMul(t2).redMul(r2)));
      return 0 === i2.cmp(n2);
    }, gt(sl, Vd.BasePoint), nl.prototype.pointFromJSON = function(e2) {
      return sl.fromJSON(this, e2);
    }, nl.prototype.point = function(e2, t2, r2, i2) {
      return new sl(this, e2, t2, r2, i2);
    }, sl.fromJSON = function(e2, t2) {
      return new sl(e2, t2[0], t2[1], t2[2]);
    }, sl.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    }, sl.prototype.isInfinity = function() {
      return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
    }, sl.prototype._extDbl = function() {
      var e2 = this.x.redSqr(), t2 = this.y.redSqr(), r2 = this.z.redSqr();
      r2 = r2.redIAdd(r2);
      var i2 = this.curve._mulA(e2), n2 = this.x.redAdd(this.y).redSqr().redISub(e2).redISub(t2), a2 = i2.redAdd(t2), s2 = a2.redSub(r2), o2 = i2.redSub(t2), c2 = n2.redMul(s2), u2 = a2.redMul(o2), h2 = n2.redMul(o2), f2 = s2.redMul(a2);
      return this.curve.point(c2, u2, f2, h2);
    }, sl.prototype._projDbl = function() {
      var e2, t2, r2, i2 = this.x.redAdd(this.y).redSqr(), n2 = this.x.redSqr(), a2 = this.y.redSqr();
      if (this.curve.twisted) {
        var s2 = (u2 = this.curve._mulA(n2)).redAdd(a2);
        if (this.zOne)
          e2 = i2.redSub(n2).redSub(a2).redMul(s2.redSub(this.curve.two)), t2 = s2.redMul(u2.redSub(a2)), r2 = s2.redSqr().redSub(s2).redSub(s2);
        else {
          var o2 = this.z.redSqr(), c2 = s2.redSub(o2).redISub(o2);
          e2 = i2.redSub(n2).redISub(a2).redMul(c2), t2 = s2.redMul(u2.redSub(a2)), r2 = s2.redMul(c2);
        }
      } else {
        var u2 = n2.redAdd(a2);
        o2 = this.curve._mulC(this.z).redSqr(), c2 = u2.redSub(o2).redSub(o2);
        e2 = this.curve._mulC(i2.redISub(u2)).redMul(c2), t2 = this.curve._mulC(u2).redMul(n2.redISub(a2)), r2 = u2.redMul(c2);
      }
      return this.curve.point(e2, t2, r2);
    }, sl.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
    }, sl.prototype._extAdd = function(e2) {
      var t2 = this.y.redSub(this.x).redMul(e2.y.redSub(e2.x)), r2 = this.y.redAdd(this.x).redMul(e2.y.redAdd(e2.x)), i2 = this.t.redMul(this.curve.dd).redMul(e2.t), n2 = this.z.redMul(e2.z.redAdd(e2.z)), a2 = r2.redSub(t2), s2 = n2.redSub(i2), o2 = n2.redAdd(i2), c2 = r2.redAdd(t2), u2 = a2.redMul(s2), h2 = o2.redMul(c2), f2 = a2.redMul(c2), d2 = s2.redMul(o2);
      return this.curve.point(u2, h2, d2, f2);
    }, sl.prototype._projAdd = function(e2) {
      var t2, r2, i2 = this.z.redMul(e2.z), n2 = i2.redSqr(), a2 = this.x.redMul(e2.x), s2 = this.y.redMul(e2.y), o2 = this.curve.d.redMul(a2).redMul(s2), c2 = n2.redSub(o2), u2 = n2.redAdd(o2), h2 = this.x.redAdd(this.y).redMul(e2.x.redAdd(e2.y)).redISub(a2).redISub(s2), f2 = i2.redMul(c2).redMul(h2);
      return this.curve.twisted ? (t2 = i2.redMul(u2).redMul(s2.redSub(this.curve._mulA(a2))), r2 = c2.redMul(u2)) : (t2 = i2.redMul(u2).redMul(s2.redSub(a2)), r2 = this.curve._mulC(c2).redMul(u2)), this.curve.point(f2, t2, r2);
    }, sl.prototype.add = function(e2) {
      return this.isInfinity() ? e2 : e2.isInfinity() ? this : this.curve.extended ? this._extAdd(e2) : this._projAdd(e2);
    }, sl.prototype.mul = function(e2) {
      return this._hasDoubles(e2) ? this.curve._fixedNafMul(this, e2) : this.curve._wnafMul(this, e2);
    }, sl.prototype.mulAdd = function(e2, t2, r2) {
      return this.curve._wnafMulAdd(1, [this, t2], [e2, r2], 2, false);
    }, sl.prototype.jmulAdd = function(e2, t2, r2) {
      return this.curve._wnafMulAdd(1, [this, t2], [e2, r2], 2, true);
    }, sl.prototype.normalize = function() {
      if (this.zOne)
        return this;
      var e2 = this.z.redInvm();
      return this.x = this.x.redMul(e2), this.y = this.y.redMul(e2), this.t && (this.t = this.t.redMul(e2)), this.z = this.curve.one, this.zOne = true, this;
    }, sl.prototype.neg = function() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    }, sl.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    }, sl.prototype.getY = function() {
      return this.normalize(), this.y.fromRed();
    }, sl.prototype.eq = function(e2) {
      return this === e2 || 0 === this.getX().cmp(e2.getX()) && 0 === this.getY().cmp(e2.getY());
    }, sl.prototype.eqXToP = function(e2) {
      var t2 = e2.toRed(this.curve.red).redMul(this.z);
      if (0 === this.x.cmp(t2))
        return true;
      for (var r2 = e2.clone(), i2 = this.curve.redN.redMul(this.z); ; ) {
        if (r2.iadd(this.curve.n), r2.cmp(this.curve.p) >= 0)
          return false;
        if (t2.redIAdd(i2), 0 === this.x.cmp(t2))
          return true;
      }
    }, sl.prototype.toP = sl.prototype.normalize, sl.prototype.mixedAdd = sl.prototype.add;
    var ol = bt(function(e2, t2) {
      var r2 = t2;
      r2.base = Vd, r2.short = Xd, r2.mont = tl, r2.edwards = al;
    });
    var cl = kt.rotl32;
    var ul = kt.sum32;
    var hl = kt.sum32_5;
    var fl = Kt.ft_1;
    var dl = Et.BlockHash;
    var ll = [1518500249, 1859775393, 2400959708, 3395469782];
    function pl() {
      if (!(this instanceof pl))
        return new pl();
      dl.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = Array(80);
    }
    kt.inherits(pl, dl);
    var yl = pl;
    pl.blockSize = 512, pl.outSize = 160, pl.hmacStrength = 80, pl.padLength = 64, pl.prototype._update = function(e2, t2) {
      for (var r2 = this.W, i2 = 0; i2 < 16; i2++)
        r2[i2] = e2[t2 + i2];
      for (; i2 < r2.length; i2++)
        r2[i2] = cl(r2[i2 - 3] ^ r2[i2 - 8] ^ r2[i2 - 14] ^ r2[i2 - 16], 1);
      var n2 = this.h[0], a2 = this.h[1], s2 = this.h[2], o2 = this.h[3], c2 = this.h[4];
      for (i2 = 0; i2 < r2.length; i2++) {
        var u2 = ~~(i2 / 20), h2 = hl(cl(n2, 5), fl(u2, a2, s2, o2), c2, r2[i2], ll[u2]);
        c2 = o2, o2 = s2, s2 = cl(a2, 30), a2 = n2, n2 = h2;
      }
      this.h[0] = ul(this.h[0], n2), this.h[1] = ul(this.h[1], a2), this.h[2] = ul(this.h[2], s2), this.h[3] = ul(this.h[3], o2), this.h[4] = ul(this.h[4], c2);
    }, pl.prototype._digest = function(e2) {
      return "hex" === e2 ? kt.toHex32(this.h, "big") : kt.split32(this.h, "big");
    };
    var bl = { sha1: yl, sha224: Ht, sha256: Lt, sha384: vr, sha512: sr };
    function ml(e2, t2, r2) {
      if (!(this instanceof ml))
        return new ml(e2, t2, r2);
      this.Hash = e2, this.blockSize = e2.blockSize / 8, this.outSize = e2.outSize / 8, this.inner = null, this.outer = null, this._init(kt.toArray(t2, r2));
    }
    var gl = ml;
    ml.prototype._init = function(e2) {
      e2.length > this.blockSize && (e2 = new this.Hash().update(e2).digest()), lt(e2.length <= this.blockSize);
      for (var t2 = e2.length; t2 < this.blockSize; t2++)
        e2.push(0);
      for (t2 = 0; t2 < e2.length; t2++)
        e2[t2] ^= 54;
      for (this.inner = new this.Hash().update(e2), t2 = 0; t2 < e2.length; t2++)
        e2[t2] ^= 106;
      this.outer = new this.Hash().update(e2);
    }, ml.prototype.update = function(e2, t2) {
      return this.inner.update(e2, t2), this;
    }, ml.prototype.digest = function(e2) {
      return this.outer.update(this.inner.digest()), this.outer.digest(e2);
    };
    var wl = bt(function(e2, t2) {
      var r2 = t2;
      r2.utils = kt, r2.common = Et, r2.sha = bl, r2.ripemd = Br, r2.hmac = gl, r2.sha1 = r2.sha.sha1, r2.sha256 = r2.sha.sha256, r2.sha224 = r2.sha.sha224, r2.sha384 = r2.sha.sha384, r2.sha512 = r2.sha.sha512, r2.ripemd160 = r2.ripemd.ripemd160;
    });
    var vl = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
    var _l = bt(function(e2, t2) {
      var r2, i2 = t2, n2 = qd.assert;
      function a2(e3) {
        if ("short" === e3.type)
          this.curve = new ol.short(e3);
        else if ("edwards" === e3.type)
          this.curve = new ol.edwards(e3);
        else {
          if ("mont" !== e3.type)
            throw Error("Unknown curve type.");
          this.curve = new ol.mont(e3);
        }
        this.g = this.curve.g, this.n = this.curve.n, this.hash = e3.hash, n2(this.g.validate(), "Invalid curve"), n2(this.g.mul(this.n).isInfinity(), "Invalid curve, n*G != O");
      }
      function s2(e3, t3) {
        Object.defineProperty(i2, e3, { configurable: true, enumerable: true, get: function() {
          var r3 = new a2(t3);
          return Object.defineProperty(i2, e3, { configurable: true, enumerable: true, value: r3 }), r3;
        } });
      }
      i2.PresetCurve = a2, s2("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: wl.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] }), s2("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: wl.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] }), s2("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: wl.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] }), s2("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: wl.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] }), s2("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: wl.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] }), s2("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", cofactor: "8", hash: wl.sha256, gRed: false, g: ["9"] }), s2("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", cofactor: "8", hash: wl.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] }), s2("brainpoolP256r1", { type: "short", prime: null, p: "A9FB57DB A1EEA9BC 3E660A90 9D838D72 6E3BF623 D5262028 2013481D 1F6E5377", a: "7D5A0975 FC2C3057 EEF67530 417AFFE7 FB8055C1 26DC5C6C E94A4B44 F330B5D9", b: "26DC5C6C E94A4B44 F330B5D9 BBD77CBF 95841629 5CF7E1CE 6BCCDC18 FF8C07B6", n: "A9FB57DB A1EEA9BC 3E660A90 9D838D71 8C397AA3 B561A6F7 901E0E82 974856A7", hash: wl.sha256, gRed: false, g: ["8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262", "547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997"] }), s2("brainpoolP384r1", { type: "short", prime: null, p: "8CB91E82 A3386D28 0F5D6F7E 50E641DF 152F7109 ED5456B4 12B1DA19 7FB71123ACD3A729 901D1A71 87470013 3107EC53", a: "7BC382C6 3D8C150C 3C72080A CE05AFA0 C2BEA28E 4FB22787 139165EF BA91F90F8AA5814A 503AD4EB 04A8C7DD 22CE2826", b: "04A8C7DD 22CE2826 8B39B554 16F0447C 2FB77DE1 07DCD2A6 2E880EA5 3EEB62D57CB43902 95DBC994 3AB78696 FA504C11", n: "8CB91E82 A3386D28 0F5D6F7E 50E641DF 152F7109 ED5456B3 1F166E6C AC0425A7CF3AB6AF 6B7FC310 3B883202 E9046565", hash: wl.sha384, gRed: false, g: ["1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E", "8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315"] }), s2("brainpoolP512r1", { type: "short", prime: null, p: "AADD9DB8 DBE9C48B 3FD4E6AE 33C9FC07 CB308DB3 B3C9D20E D6639CCA 703308717D4D9B00 9BC66842 AECDA12A E6A380E6 2881FF2F 2D82C685 28AA6056 583A48F3", a: "7830A331 8B603B89 E2327145 AC234CC5 94CBDD8D 3DF91610 A83441CA EA9863BC2DED5D5A A8253AA1 0A2EF1C9 8B9AC8B5 7F1117A7 2BF2C7B9 E7C1AC4D 77FC94CA", b: "3DF91610 A83441CA EA9863BC 2DED5D5A A8253AA1 0A2EF1C9 8B9AC8B5 7F1117A72BF2C7B9 E7C1AC4D 77FC94CA DC083E67 984050B7 5EBAE5DD 2809BD63 8016F723", n: "AADD9DB8 DBE9C48B 3FD4E6AE 33C9FC07 CB308DB3 B3C9D20E D6639CCA 70330870553E5C41 4CA92619 41866119 7FAC1047 1DB1D381 085DDADD B5879682 9CA90069", hash: wl.sha512, gRed: false, g: ["81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822", "7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892"] });
      try {
        r2 = vl;
      } catch (e3) {
        r2 = void 0;
      }
      s2("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: wl.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", r2] });
    });
    function kl(e2) {
      if (!(this instanceof kl))
        return new kl(e2);
      this.hash = e2.hash, this.predResist = !!e2.predResist, this.outLen = this.hash.outSize, this.minEntropy = e2.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
      var t2 = zd.toArray(e2.entropy, e2.entropyEnc || "hex"), r2 = zd.toArray(e2.nonce, e2.nonceEnc || "hex"), i2 = zd.toArray(e2.pers, e2.persEnc || "hex");
      lt(t2.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t2, r2, i2);
    }
    var Al = kl;
    kl.prototype._init = function(e2, t2, r2) {
      var i2 = e2.concat(t2).concat(r2);
      this.K = Array(this.outLen / 8), this.V = Array(this.outLen / 8);
      for (var n2 = 0; n2 < this.V.length; n2++)
        this.K[n2] = 0, this.V[n2] = 1;
      this._update(i2), this._reseed = 1, this.reseedInterval = 281474976710656;
    }, kl.prototype._hmac = function() {
      return new wl.hmac(this.hash, this.K);
    }, kl.prototype._update = function(e2) {
      var t2 = this._hmac().update(this.V).update([0]);
      e2 && (t2 = t2.update(e2)), this.K = t2.digest(), this.V = this._hmac().update(this.V).digest(), e2 && (this.K = this._hmac().update(this.V).update([1]).update(e2).digest(), this.V = this._hmac().update(this.V).digest());
    }, kl.prototype.reseed = function(e2, t2, r2, i2) {
      "string" != typeof t2 && (i2 = r2, r2 = t2, t2 = null), e2 = zd.toArray(e2, t2), r2 = zd.toArray(r2, i2), lt(e2.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e2.concat(r2 || [])), this._reseed = 1;
    }, kl.prototype.generate = function(e2, t2, r2, i2) {
      if (this._reseed > this.reseedInterval)
        throw Error("Reseed is required");
      "string" != typeof t2 && (i2 = r2, r2 = t2, t2 = null), r2 && (r2 = zd.toArray(r2, i2 || "hex"), this._update(r2));
      for (var n2 = []; n2.length < e2; )
        this.V = this._hmac().update(this.V).digest(), n2 = n2.concat(this.V);
      var a2 = n2.slice(0, e2);
      return this._update(r2), this._reseed++, zd.encode(a2, t2);
    };
    var Sl = qd.assert;
    function El(e2, t2) {
      this.ec = e2, this.priv = null, this.pub = null, t2.priv && this._importPrivate(t2.priv, t2.privEnc), t2.pub && this._importPublic(t2.pub, t2.pubEnc);
    }
    var Pl = El;
    El.fromPublic = function(e2, t2, r2) {
      return t2 instanceof El ? t2 : new El(e2, { pub: t2, pubEnc: r2 });
    }, El.fromPrivate = function(e2, t2, r2) {
      return t2 instanceof El ? t2 : new El(e2, { priv: t2, privEnc: r2 });
    }, El.prototype.validate = function() {
      var e2 = this.getPublic();
      return e2.isInfinity() ? { result: false, reason: "Invalid public key" } : e2.validate() ? e2.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
    }, El.prototype.getPublic = function(e2, t2) {
      return this.pub || (this.pub = this.ec.g.mul(this.priv)), e2 ? this.pub.encode(e2, t2) : this.pub;
    }, El.prototype.getPrivate = function(e2) {
      return "hex" === e2 ? this.priv.toString(16, 2) : this.priv;
    }, El.prototype._importPrivate = function(e2, t2) {
      if (this.priv = new Rd(e2, t2 || 16), "mont" === this.ec.curve.type) {
        var r2 = this.ec.curve.one, i2 = r2.ushln(252).sub(r2).ushln(3);
        this.priv = this.priv.or(r2.ushln(254)), this.priv = this.priv.and(i2);
      } else
        this.priv = this.priv.umod(this.ec.curve.n);
    }, El.prototype._importPublic = function(e2, t2) {
      if (e2.x || e2.y)
        return "mont" === this.ec.curve.type ? Sl(e2.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || Sl(e2.x && e2.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e2.x, e2.y));
      this.pub = this.ec.curve.decodePoint(e2, t2);
    }, El.prototype.derive = function(e2) {
      return e2.mul(this.priv).getX();
    }, El.prototype.sign = function(e2, t2, r2) {
      return this.ec.sign(e2, this, t2, r2);
    }, El.prototype.verify = function(e2, t2) {
      return this.ec.verify(e2, t2, this);
    }, El.prototype.inspect = function() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    var xl = qd.assert;
    function Ml(e2, t2) {
      if (e2 instanceof Ml)
        return e2;
      this._importDER(e2, t2) || (xl(e2.r && e2.s, "Signature without r or s"), this.r = new Rd(e2.r, 16), this.s = new Rd(e2.s, 16), void 0 === e2.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e2.recoveryParam);
    }
    var Cl = Ml;
    function Kl() {
      this.place = 0;
    }
    function Dl(e2, t2) {
      var r2 = e2[t2.place++];
      if (!(128 & r2))
        return r2;
      for (var i2 = 15 & r2, n2 = 0, a2 = 0, s2 = t2.place; a2 < i2; a2++, s2++)
        n2 <<= 8, n2 |= e2[s2];
      return t2.place = s2, n2;
    }
    function Rl(e2) {
      for (var t2 = 0, r2 = e2.length - 1; !e2[t2] && !(128 & e2[t2 + 1]) && t2 < r2; )
        t2++;
      return 0 === t2 ? e2 : e2.slice(t2);
    }
    function Ul(e2, t2) {
      if (t2 < 128)
        e2.push(t2);
      else {
        var r2 = 1 + (Math.log(t2) / Math.LN2 >>> 3);
        for (e2.push(128 | r2); --r2; )
          e2.push(t2 >>> (r2 << 3) & 255);
        e2.push(t2);
      }
    }
    Ml.prototype._importDER = function(e2, t2) {
      e2 = qd.toArray(e2, t2);
      var r2 = new Kl();
      if (48 !== e2[r2.place++])
        return false;
      if (Dl(e2, r2) + r2.place !== e2.length)
        return false;
      if (2 !== e2[r2.place++])
        return false;
      var i2 = Dl(e2, r2), n2 = e2.slice(r2.place, i2 + r2.place);
      if (r2.place += i2, 2 !== e2[r2.place++])
        return false;
      var a2 = Dl(e2, r2);
      if (e2.length !== a2 + r2.place)
        return false;
      var s2 = e2.slice(r2.place, a2 + r2.place);
      return 0 === n2[0] && 128 & n2[1] && (n2 = n2.slice(1)), 0 === s2[0] && 128 & s2[1] && (s2 = s2.slice(1)), this.r = new Rd(n2), this.s = new Rd(s2), this.recoveryParam = null, true;
    }, Ml.prototype.toDER = function(e2) {
      var t2 = this.r.toArray(), r2 = this.s.toArray();
      for (128 & t2[0] && (t2 = [0].concat(t2)), 128 & r2[0] && (r2 = [0].concat(r2)), t2 = Rl(t2), r2 = Rl(r2); !(r2[0] || 128 & r2[1]); )
        r2 = r2.slice(1);
      var i2 = [2];
      Ul(i2, t2.length), (i2 = i2.concat(t2)).push(2), Ul(i2, r2.length);
      var n2 = i2.concat(r2), a2 = [48];
      return Ul(a2, n2.length), a2 = a2.concat(n2), qd.encode(a2, e2);
    };
    var Il = qd.assert;
    function Bl(e2) {
      if (!(this instanceof Bl))
        return new Bl(e2);
      "string" == typeof e2 && (Il(_l.hasOwnProperty(e2), "Unknown curve " + e2), e2 = _l[e2]), e2 instanceof _l.PresetCurve && (e2 = { curve: e2 }), this.curve = e2.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e2.curve.g, this.g.precompute(e2.curve.n.bitLength() + 1), this.hash = e2.hash || e2.curve.hash;
    }
    var Tl = Bl;
    Bl.prototype.keyPair = function(e2) {
      return new Pl(this, e2);
    }, Bl.prototype.keyFromPrivate = function(e2, t2) {
      return Pl.fromPrivate(this, e2, t2);
    }, Bl.prototype.keyFromPublic = function(e2, t2) {
      return Pl.fromPublic(this, e2, t2);
    }, Bl.prototype.genKeyPair = function(e2) {
      e2 || (e2 = {});
      var t2 = new Al({ hash: this.hash, pers: e2.pers, persEnc: e2.persEnc || "utf8", entropy: e2.entropy || Od(this.hash.hmacStrength), entropyEnc: e2.entropy && e2.entropyEnc || "utf8", nonce: this.n.toArray() });
      if ("mont" === this.curve.type) {
        var r2 = new Rd(t2.generate(32));
        return this.keyFromPrivate(r2);
      }
      for (var i2 = this.n.byteLength(), n2 = this.n.sub(new Rd(2)); ; ) {
        if (!((r2 = new Rd(t2.generate(i2))).cmp(n2) > 0))
          return r2.iaddn(1), this.keyFromPrivate(r2);
      }
    }, Bl.prototype._truncateToN = function(e2, t2, r2) {
      var i2 = (r2 = r2 || 8 * e2.byteLength()) - this.n.bitLength();
      return i2 > 0 && (e2 = e2.ushrn(i2)), !t2 && e2.cmp(this.n) >= 0 ? e2.sub(this.n) : e2;
    }, Bl.prototype.truncateMsg = function(e2) {
      var t2;
      return e2 instanceof Uint8Array ? (t2 = 8 * e2.byteLength, e2 = this._truncateToN(new Rd(e2, 16), false, t2)) : "string" == typeof e2 ? (t2 = 4 * e2.length, e2 = this._truncateToN(new Rd(e2, 16), false, t2)) : e2 = this._truncateToN(new Rd(e2, 16)), e2;
    }, Bl.prototype.sign = function(e2, t2, r2, i2) {
      "object" == typeof r2 && (i2 = r2, r2 = null), i2 || (i2 = {}), t2 = this.keyFromPrivate(t2, r2), e2 = this.truncateMsg(e2);
      for (var n2 = this.n.byteLength(), a2 = t2.getPrivate().toArray("be", n2), s2 = e2.toArray("be", n2), o2 = new Al({ hash: this.hash, entropy: a2, nonce: s2, pers: i2.pers, persEnc: i2.persEnc || "utf8" }), c2 = this.n.sub(new Rd(1)), u2 = 0; ; u2++) {
        var h2 = i2.k ? i2.k(u2) : new Rd(o2.generate(this.n.byteLength()));
        if (!((h2 = this._truncateToN(h2, true)).cmpn(1) <= 0 || h2.cmp(c2) >= 0)) {
          var f2 = this.g.mul(h2);
          if (!f2.isInfinity()) {
            var d2 = f2.getX(), l2 = d2.umod(this.n);
            if (0 !== l2.cmpn(0)) {
              var p2 = h2.invm(this.n).mul(l2.mul(t2.getPrivate()).iadd(e2));
              if (0 !== (p2 = p2.umod(this.n)).cmpn(0)) {
                var y2 = (f2.getY().isOdd() ? 1 : 0) | (0 !== d2.cmp(l2) ? 2 : 0);
                return i2.canonical && p2.cmp(this.nh) > 0 && (p2 = this.n.sub(p2), y2 ^= 1), new Cl({ r: l2, s: p2, recoveryParam: y2 });
              }
            }
          }
        }
      }
    }, Bl.prototype.verify = function(e2, t2, r2, i2) {
      return r2 = this.keyFromPublic(r2, i2), t2 = new Cl(t2, "hex"), this._verify(this.truncateMsg(e2), t2, r2) || this._verify(this._truncateToN(new Rd(e2, 16)), t2, r2);
    }, Bl.prototype._verify = function(e2, t2, r2) {
      var i2 = t2.r, n2 = t2.s;
      if (i2.cmpn(1) < 0 || i2.cmp(this.n) >= 0)
        return false;
      if (n2.cmpn(1) < 0 || n2.cmp(this.n) >= 0)
        return false;
      var a2, s2 = n2.invm(this.n), o2 = s2.mul(e2).umod(this.n), c2 = s2.mul(i2).umod(this.n);
      return this.curve._maxwellTrick ? !(a2 = this.g.jmulAdd(o2, r2.getPublic(), c2)).isInfinity() && a2.eqXToP(i2) : !(a2 = this.g.mulAdd(o2, r2.getPublic(), c2)).isInfinity() && 0 === a2.getX().umod(this.n).cmp(i2);
    }, Bl.prototype.recoverPubKey = function(e2, t2, r2, i2) {
      Il((3 & r2) === r2, "The recovery param is more than two bits"), t2 = new Cl(t2, i2);
      var n2 = this.n, a2 = new Rd(e2), s2 = t2.r, o2 = t2.s, c2 = 1 & r2, u2 = r2 >> 1;
      if (s2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && u2)
        throw Error("Unable to find sencond key candinate");
      s2 = u2 ? this.curve.pointFromX(s2.add(this.curve.n), c2) : this.curve.pointFromX(s2, c2);
      var h2 = t2.r.invm(n2), f2 = n2.sub(a2).mul(h2).umod(n2), d2 = o2.mul(h2).umod(n2);
      return this.g.mulAdd(f2, s2, d2);
    }, Bl.prototype.getKeyRecoveryParam = function(e2, t2, r2, i2) {
      if (null !== (t2 = new Cl(t2, i2)).recoveryParam)
        return t2.recoveryParam;
      for (var n2 = 0; n2 < 4; n2++) {
        var a2;
        try {
          a2 = this.recoverPubKey(e2, t2, n2);
        } catch (e3) {
          continue;
        }
        if (a2.eq(r2))
          return n2;
      }
      throw Error("Unable to find valid recovery factor");
    };
    var zl = qd.assert;
    var ql = qd.parseBytes;
    var Ol = qd.cachedProperty;
    function Fl(e2, t2) {
      if (this.eddsa = e2, t2.hasOwnProperty("secret") && (this._secret = ql(t2.secret)), e2.isPoint(t2.pub))
        this._pub = t2.pub;
      else if (this._pubBytes = ql(t2.pub), this._pubBytes && 33 === this._pubBytes.length && 64 === this._pubBytes[0] && (this._pubBytes = this._pubBytes.slice(1, 33)), this._pubBytes && 32 !== this._pubBytes.length)
        throw Error("Unknown point compression format");
    }
    Fl.fromPublic = function(e2, t2) {
      return t2 instanceof Fl ? t2 : new Fl(e2, { pub: t2 });
    }, Fl.fromSecret = function(e2, t2) {
      return t2 instanceof Fl ? t2 : new Fl(e2, { secret: t2 });
    }, Fl.prototype.secret = function() {
      return this._secret;
    }, Ol(Fl, "pubBytes", function() {
      return this.eddsa.encodePoint(this.pub());
    }), Ol(Fl, "pub", function() {
      return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
    }), Ol(Fl, "privBytes", function() {
      var e2 = this.eddsa, t2 = this.hash(), r2 = e2.encodingLength - 1, i2 = t2.slice(0, e2.encodingLength);
      return i2[0] &= 248, i2[r2] &= 127, i2[r2] |= 64, i2;
    }), Ol(Fl, "priv", function() {
      return this.eddsa.decodeInt(this.privBytes());
    }), Ol(Fl, "hash", function() {
      return this.eddsa.hash().update(this.secret()).digest();
    }), Ol(Fl, "messagePrefix", function() {
      return this.hash().slice(this.eddsa.encodingLength);
    }), Fl.prototype.sign = function(e2) {
      return zl(this._secret, "KeyPair can only verify"), this.eddsa.sign(e2, this);
    }, Fl.prototype.verify = function(e2, t2) {
      return this.eddsa.verify(e2, t2, this);
    }, Fl.prototype.getSecret = function(e2) {
      return zl(this._secret, "KeyPair is public only"), qd.encode(this.secret(), e2);
    }, Fl.prototype.getPublic = function(e2, t2) {
      return qd.encode((t2 ? [64] : []).concat(this.pubBytes()), e2);
    };
    var Nl = Fl;
    var jl = qd.assert;
    var Ll = qd.cachedProperty;
    var Wl = qd.parseBytes;
    function Hl(e2, t2) {
      this.eddsa = e2, "object" != typeof t2 && (t2 = Wl(t2)), Array.isArray(t2) && (t2 = { R: t2.slice(0, e2.encodingLength), S: t2.slice(e2.encodingLength) }), jl(t2.R && t2.S, "Signature without R or S"), e2.isPoint(t2.R) && (this._R = t2.R), t2.S instanceof Rd && (this._S = t2.S), this._Rencoded = Array.isArray(t2.R) ? t2.R : t2.Rencoded, this._Sencoded = Array.isArray(t2.S) ? t2.S : t2.Sencoded;
    }
    Ll(Hl, "S", function() {
      return this.eddsa.decodeInt(this.Sencoded());
    }), Ll(Hl, "R", function() {
      return this.eddsa.decodePoint(this.Rencoded());
    }), Ll(Hl, "Rencoded", function() {
      return this.eddsa.encodePoint(this.R());
    }), Ll(Hl, "Sencoded", function() {
      return this.eddsa.encodeInt(this.S());
    }), Hl.prototype.toBytes = function() {
      return this.Rencoded().concat(this.Sencoded());
    }, Hl.prototype.toHex = function() {
      return qd.encode(this.toBytes(), "hex").toUpperCase();
    };
    var Gl = Hl;
    var Vl = qd.assert;
    var $l = qd.parseBytes;
    function Zl(e2) {
      if (Vl("ed25519" === e2, "only tested with ed25519 so far"), !(this instanceof Zl))
        return new Zl(e2);
      e2 = _l[e2].curve;
      this.curve = e2, this.g = e2.g, this.g.precompute(e2.n.bitLength() + 1), this.pointClass = e2.point().constructor, this.encodingLength = Math.ceil(e2.n.bitLength() / 8), this.hash = wl.sha512;
    }
    var Yl = Zl;
    Zl.prototype.sign = function(e2, t2) {
      e2 = $l(e2);
      var r2 = this.keyFromSecret(t2), i2 = this.hashInt(r2.messagePrefix(), e2), n2 = this.g.mul(i2), a2 = this.encodePoint(n2), s2 = this.hashInt(a2, r2.pubBytes(), e2).mul(r2.priv()), o2 = i2.add(s2).umod(this.curve.n);
      return this.makeSignature({ R: n2, S: o2, Rencoded: a2 });
    }, Zl.prototype.verify = function(e2, t2, r2) {
      e2 = $l(e2), t2 = this.makeSignature(t2);
      var i2 = this.keyFromPublic(r2), n2 = this.hashInt(t2.Rencoded(), i2.pubBytes(), e2), a2 = this.g.mul(t2.S());
      return t2.R().add(i2.pub().mul(n2)).eq(a2);
    }, Zl.prototype.hashInt = function() {
      for (var e2 = this.hash(), t2 = 0; t2 < arguments.length; t2++)
        e2.update(arguments[t2]);
      return qd.intFromLE(e2.digest()).umod(this.curve.n);
    }, Zl.prototype.keyPair = function(e2) {
      return new Nl(this, e2);
    }, Zl.prototype.keyFromPublic = function(e2) {
      return Nl.fromPublic(this, e2);
    }, Zl.prototype.keyFromSecret = function(e2) {
      return Nl.fromSecret(this, e2);
    }, Zl.prototype.genKeyPair = function(e2) {
      e2 || (e2 = {});
      var t2 = new Al({ hash: this.hash, pers: e2.pers, persEnc: e2.persEnc || "utf8", entropy: e2.entropy || Od(this.hash.hmacStrength), entropyEnc: e2.entropy && e2.entropyEnc || "utf8", nonce: this.curve.n.toArray() });
      return this.keyFromSecret(t2.generate(32));
    }, Zl.prototype.makeSignature = function(e2) {
      return e2 instanceof Gl ? e2 : new Gl(this, e2);
    }, Zl.prototype.encodePoint = function(e2) {
      var t2 = e2.getY().toArray("le", this.encodingLength);
      return t2[this.encodingLength - 1] |= e2.getX().isOdd() ? 128 : 0, t2;
    }, Zl.prototype.decodePoint = function(e2) {
      var t2 = (e2 = qd.parseBytes(e2)).length - 1, r2 = e2.slice(0, t2).concat(-129 & e2[t2]), i2 = 0 != (128 & e2[t2]), n2 = qd.intFromLE(r2);
      return this.curve.pointFromY(n2, i2);
    }, Zl.prototype.encodeInt = function(e2) {
      return e2.toArray("le", this.encodingLength);
    }, Zl.prototype.decodeInt = function(e2) {
      return qd.intFromLE(e2);
    }, Zl.prototype.isPoint = function(e2) {
      return e2 instanceof this.pointClass;
    };
    var Xl = bt(function(e2, t2) {
      var r2 = t2;
      r2.utils = qd, r2.rand = Od, r2.curve = ol, r2.curves = _l, r2.ec = Tl, r2.eddsa = Yl;
    });
    var Ql = /* @__PURE__ */ Object.freeze({ __proto__: null, default: Xl, __moduleExports: Xl });
    exports.AEADEncryptedDataPacket = Ao, exports.CleartextMessage = wc, exports.CompressedDataPacket = fo, exports.LiteralDataPacket = ro, exports.MarkerPacket = class {
      static get tag() {
        return me.packet.marker;
      }
      read(e2) {
        return 80 === e2[0] && 71 === e2[1] && 80 === e2[2];
      }
      write() {
        return new Uint8Array([80, 71, 80]);
      }
    }, exports.Message = yc, exports.OnePassSignaturePacket = oo, exports.PacketList = uo, exports.PrivateKey = uc, exports.PublicKey = cc, exports.PublicKeyEncryptedSessionKeyPacket = So, exports.PublicKeyPacket = xo, exports.PublicSubkeyPacket = Ko, exports.SecretKeyPacket = Ro, exports.SecretSubkeyPacket = To, exports.Signature = qo, exports.SignaturePacket = ao, exports.Subkey = rc, exports.SymEncryptedIntegrityProtectedDataPacket = _o, exports.SymEncryptedSessionKeyPacket = Po, exports.SymmetricallyEncryptedDataPacket = Co, exports.TrustPacket = class {
      static get tag() {
        return me.packet.trust;
      }
      read() {
        throw new Ui("Trust packets are not supported");
      }
      write() {
        throw new Ui("Trust packets are not supported");
      }
    }, exports.UnparseablePacket = Ii, exports.UserAttributePacket = Do, exports.UserIDPacket = Bo, exports.armor = xe, exports.config = ge, exports.createCleartextMessage = async function({ text: e2, ...t2 }) {
      if (!e2)
        throw Error("createCleartextMessage: must pass options object containing `text`");
      if (!ce.isString(e2))
        throw Error("createCleartextMessage: options.text must be a string");
      const r2 = Object.keys(t2);
      if (r2.length > 0)
        throw Error("Unknown option: " + r2.join(", "));
      return new wc(e2);
    }, exports.createMessage = async function({ text: e2, binary: t2, filename: r2, date: i2 = new Date(), format: n2 = void 0 !== e2 ? "utf8" : "binary", ...a2 }) {
      let s2 = void 0 !== e2 ? e2 : t2;
      if (void 0 === s2)
        throw Error("createMessage: must pass options object containing `text` or `binary`");
      if (e2 && !ce.isString(e2) && !ce.isStream(e2))
        throw Error("createMessage: options.text must be a string or stream");
      if (t2 && !ce.isUint8Array(t2) && !ce.isStream(t2))
        throw Error("createMessage: options.binary must be a Uint8Array or stream");
      const o2 = Object.keys(a2);
      if (o2.length > 0)
        throw Error("Unknown option: " + o2.join(", "));
      const c2 = ce.isStream(s2);
      c2 && (await F(), s2 = j(s2));
      const u2 = new ro(i2);
      void 0 !== e2 ? u2.setText(s2, me.write(me.literal, n2)) : u2.setBytes(s2, me.write(me.literal, n2)), void 0 !== r2 && u2.setFilename(r2);
      const h2 = new uo();
      h2.push(u2);
      const f2 = new yc(h2);
      return f2.fromStream = c2, f2;
    }, exports.decrypt = async function({ message: e2, decryptionKeys: t2, passwords: r2, sessionKeys: i2, verificationKeys: n2, expectSigned: a2 = false, format: s2 = "utf8", signature: o2 = null, date: c2 = new Date(), config: u2, ...h2 }) {
      if (Sc(u2 = { ...ge, ...u2 }), vc(e2), n2 = Ec(n2), t2 = Ec(t2), r2 = Ec(r2), i2 = Ec(i2), h2.privateKeys)
        throw Error("The `privateKeys` option has been removed from openpgp.decrypt, pass `decryptionKeys` instead");
      if (h2.publicKeys)
        throw Error("The `publicKeys` option has been removed from openpgp.decrypt, pass `verificationKeys` instead");
      const f2 = Object.keys(h2);
      if (f2.length > 0)
        throw Error("Unknown option: " + f2.join(", "));
      try {
        const h3 = await e2.decrypt(t2, r2, i2, c2, u2);
        n2 || (n2 = []);
        const f3 = {};
        if (f3.signatures = o2 ? await h3.verifyDetached(o2, n2, c2, u2) : await h3.verify(n2, c2, u2), f3.data = "binary" === s2 ? h3.getLiteralData() : h3.getText(), f3.filename = h3.getFilename(), xc(f3, e2), a2) {
          if (0 === n2.length)
            throw Error("Verification keys are required to verify message signatures");
          if (0 === f3.signatures.length)
            throw Error("Message is not signed");
          f3.data = W([f3.data, ae(async () => {
            await ce.anyPromise(f3.signatures.map((e3) => e3.verified));
          })]);
        }
        return f3.data = await Pc(f3.data, e2.fromStream, s2), f3;
      } catch (e3) {
        throw ce.wrapError("Error decrypting message", e3);
      }
    }, exports.decryptKey = async function({ privateKey: e2, passphrase: t2, config: r2, ...i2 }) {
      Sc(r2 = { ...ge, ...r2 });
      const n2 = Object.keys(i2);
      if (n2.length > 0)
        throw Error("Unknown option: " + n2.join(", "));
      if (!e2.isPrivate())
        throw Error("Cannot decrypt a public key");
      const a2 = e2.clone(true), s2 = ce.isArray(t2) ? t2 : [t2];
      try {
        return await Promise.all(a2.getKeys().map((e3) => ce.anyPromise(s2.map((t3) => e3.keyPacket.decrypt(t3))))), await a2.validate(r2), a2;
      } catch (e3) {
        throw a2.clearPrivateParams(), ce.wrapError("Error decrypting private key", e3);
      }
    }, exports.decryptSessionKeys = async function({ message: e2, decryptionKeys: t2, passwords: r2, date: i2 = new Date(), config: n2, ...a2 }) {
      if (Sc(n2 = { ...ge, ...n2 }), vc(e2), t2 = Ec(t2), r2 = Ec(r2), a2.privateKeys)
        throw Error("The `privateKeys` option has been removed from openpgp.decryptSessionKeys, pass `decryptionKeys` instead");
      const s2 = Object.keys(a2);
      if (s2.length > 0)
        throw Error("Unknown option: " + s2.join(", "));
      try {
        return await e2.decryptSessionKeys(t2, r2, i2, n2);
      } catch (e3) {
        throw ce.wrapError("Error decrypting session keys", e3);
      }
    }, exports.encrypt = async function({ message: e2, encryptionKeys: t2, signingKeys: r2, passwords: i2, sessionKey: n2, format: a2 = "armored", signature: s2 = null, wildcard: o2 = false, signingKeyIDs: c2 = [], encryptionKeyIDs: u2 = [], date: h2 = new Date(), signingUserIDs: f2 = [], encryptionUserIDs: d2 = [], config: l2, ...p2 }) {
      if (Sc(l2 = { ...ge, ...l2 }), vc(e2), kc(a2), t2 = Ec(t2), r2 = Ec(r2), i2 = Ec(i2), c2 = Ec(c2), u2 = Ec(u2), f2 = Ec(f2), d2 = Ec(d2), p2.detached)
        throw Error("The `detached` option has been removed from openpgp.encrypt, separately call openpgp.sign instead. Don't forget to remove the `privateKeys` option as well.");
      if (p2.publicKeys)
        throw Error("The `publicKeys` option has been removed from openpgp.encrypt, pass `encryptionKeys` instead");
      if (p2.privateKeys)
        throw Error("The `privateKeys` option has been removed from openpgp.encrypt, pass `signingKeys` instead");
      if (void 0 !== p2.armor)
        throw Error("The `armor` option has been removed from openpgp.encrypt, pass `format` instead.");
      const y2 = Object.keys(p2);
      if (y2.length > 0)
        throw Error("Unknown option: " + y2.join(", "));
      r2 || (r2 = []);
      const b2 = e2.fromStream;
      try {
        if ((r2.length || s2) && (e2 = await e2.sign(r2, s2, c2, h2, f2, l2)), e2 = e2.compress(await Ho("compression", t2, h2, d2, l2), l2), e2 = await e2.encrypt(t2, i2, n2, o2, u2, h2, d2, l2), "object" === a2)
          return e2;
        const p3 = "armored" === a2;
        return Pc(p3 ? e2.armor(l2) : e2.write(), b2, p3 ? "utf8" : "binary");
      } catch (e3) {
        throw ce.wrapError("Error encrypting message", e3);
      }
    }, exports.encryptKey = async function({ privateKey: e2, passphrase: t2, config: r2, ...i2 }) {
      Sc(r2 = { ...ge, ...r2 });
      const n2 = Object.keys(i2);
      if (n2.length > 0)
        throw Error("Unknown option: " + n2.join(", "));
      if (!e2.isPrivate())
        throw Error("Cannot encrypt a public key");
      const a2 = e2.clone(true), s2 = a2.getKeys(), o2 = ce.isArray(t2) ? t2 : Array(s2.length).fill(t2);
      if (o2.length !== s2.length)
        throw Error("Invalid number of passphrases given for key encryption");
      try {
        return await Promise.all(s2.map(async (e3, t3) => {
          const { keyPacket: i3 } = e3;
          await i3.encrypt(o2[t3], r2), i3.clearPrivateParams();
        })), a2;
      } catch (e3) {
        throw a2.clearPrivateParams(), ce.wrapError("Error encrypting private key", e3);
      }
    }, exports.encryptSessionKey = async function({ data: e2, algorithm: t2, aeadAlgorithm: r2, encryptionKeys: i2, passwords: n2, format: a2 = "armored", wildcard: s2 = false, encryptionKeyIDs: o2 = [], date: c2 = new Date(), encryptionUserIDs: u2 = [], config: h2, ...f2 }) {
      if (Sc(h2 = { ...ge, ...h2 }), function(e3, t3) {
        if (!ce.isUint8Array(e3))
          throw Error("Parameter [" + (t3 || "data") + "] must be of type Uint8Array");
      }(e2), function(e3, t3) {
        if (!ce.isString(e3))
          throw Error("Parameter [" + (t3 || "data") + "] must be of type String");
      }(t2, "algorithm"), kc(a2), i2 = Ec(i2), n2 = Ec(n2), o2 = Ec(o2), u2 = Ec(u2), f2.publicKeys)
        throw Error("The `publicKeys` option has been removed from openpgp.encryptSessionKey, pass `encryptionKeys` instead");
      const d2 = Object.keys(f2);
      if (d2.length > 0)
        throw Error("Unknown option: " + d2.join(", "));
      if (!(i2 && 0 !== i2.length || n2 && 0 !== n2.length))
        throw Error("No encryption keys or passwords provided.");
      try {
        return Mc(await yc.encryptSessionKey(e2, t2, r2, i2, n2, s2, o2, c2, u2, h2), a2, h2);
      } catch (e3) {
        throw ce.wrapError("Error encrypting session key", e3);
      }
    }, exports.enums = me, exports.generateKey = async function({ userIDs: e2 = [], passphrase: t2, type: r2 = "ecc", rsaBits: i2 = 4096, curve: n2 = "curve25519", keyExpirationTime: a2 = 0, date: s2 = new Date(), subkeys: o2 = [{}], format: c2 = "armored", config: u2, ...h2 }) {
      Sc(u2 = { ...ge, ...u2 }), e2 = Ec(e2);
      const f2 = Object.keys(h2);
      if (f2.length > 0)
        throw Error("Unknown option: " + f2.join(", "));
      if (0 === e2.length)
        throw Error("UserIDs are required for key generation");
      if ("rsa" === r2 && i2 < u2.minRSABits)
        throw Error(`rsaBits should be at least ${u2.minRSABits}, got: ${i2}`);
      const d2 = { userIDs: e2, passphrase: t2, type: r2, rsaBits: i2, curve: n2, keyExpirationTime: a2, date: s2, subkeys: o2 };
      try {
        const { key: e3, revocationCertificate: t3 } = await async function(e4, t4) {
          e4.sign = true, (e4 = Yo(e4)).subkeys = e4.subkeys.map((t5, r4) => Yo(e4.subkeys[r4], e4));
          let r3 = [Fo(e4, t4)];
          r3 = r3.concat(e4.subkeys.map((e5) => Oo(e5, t4)));
          const i3 = await Promise.all(r3), n3 = await fc(i3[0], i3.slice(1), e4, t4), a3 = await n3.getRevocationCertificate(e4.date, t4);
          return n3.revocationSignatures = [], { key: n3, revocationCertificate: a3 };
        }(d2, u2);
        return e3.getKeys().forEach(({ keyPacket: e4 }) => ec(e4, u2)), { privateKey: Mc(e3, c2, u2), publicKey: Mc(e3.toPublic(), c2, u2), revocationCertificate: t3 };
      } catch (e3) {
        throw ce.wrapError("Error generating keypair", e3);
      }
    }, exports.generateSessionKey = async function({ encryptionKeys: e2, date: t2 = new Date(), encryptionUserIDs: r2 = [], config: i2, ...n2 }) {
      if (Sc(i2 = { ...ge, ...i2 }), e2 = Ec(e2), r2 = Ec(r2), n2.publicKeys)
        throw Error("The `publicKeys` option has been removed from openpgp.generateSessionKey, pass `encryptionKeys` instead");
      const a2 = Object.keys(n2);
      if (a2.length > 0)
        throw Error("Unknown option: " + a2.join(", "));
      try {
        return await yc.generateSessionKey(e2, t2, r2, i2);
      } catch (e3) {
        throw ce.wrapError("Error generating session key", e3);
      }
    }, exports.readCleartextMessage = async function({ cleartextMessage: e2, config: t2, ...r2 }) {
      if (t2 = { ...ge, ...t2 }, !e2)
        throw Error("readCleartextMessage: must pass options object containing `cleartextMessage`");
      if (!ce.isString(e2))
        throw Error("readCleartextMessage: options.cleartextMessage must be a string");
      const i2 = Object.keys(r2);
      if (i2.length > 0)
        throw Error("Unknown option: " + i2.join(", "));
      const n2 = await Pe(e2);
      if (n2.type !== me.armor.signed)
        throw Error("No cleartext signed message.");
      const a2 = await uo.fromBinary(n2.data, gc, t2);
      !function(e3, t3) {
        const r3 = function(e4) {
          const r4 = (e5) => (t4) => e5.hashAlgorithm === t4;
          for (let i4 = 0; i4 < t3.length; i4++)
            if (t3[i4].constructor.tag === me.packet.signature && !e4.some(r4(t3[i4])))
              return false;
          return true;
        };
        let i3 = null, n3 = [];
        if (e3.forEach(function(e4) {
          if (i3 = e4.match(/Hash: (.+)/), !i3)
            throw Error('Only "Hash" header allowed in cleartext signed message');
          i3 = i3[1].replace(/\s/g, ""), i3 = i3.split(","), i3 = i3.map(function(e5) {
            e5 = e5.toLowerCase();
            try {
              return me.write(me.hash, e5);
            } catch (t4) {
              throw Error("Unknown hash algorithm in armor header: " + e5);
            }
          }), n3 = n3.concat(i3);
        }), !n3.length && !r3([me.hash.md5]))
          throw Error('If no "Hash" header in cleartext signed message, then only MD5 signatures allowed');
        if (n3.length && !r3(n3))
          throw Error("Hash algorithm mismatch in armor header and signature");
      }(n2.headers, a2);
      const s2 = new qo(a2);
      return new wc(n2.text, s2);
    }, exports.readKey = async function({ armoredKey: e2, binaryKey: t2, config: r2, ...i2 }) {
      if (r2 = { ...ge, ...r2 }, !e2 && !t2)
        throw Error("readKey: must pass options object containing `armoredKey` or `binaryKey`");
      if (e2 && !ce.isString(e2))
        throw Error("readKey: options.armoredKey must be a string");
      if (t2 && !ce.isUint8Array(t2))
        throw Error("readKey: options.binaryKey must be a Uint8Array");
      const n2 = Object.keys(i2);
      if (n2.length > 0)
        throw Error("Unknown option: " + n2.join(", "));
      let a2;
      if (e2) {
        const { type: t3, data: i3 } = await Pe(e2, r2);
        if (t3 !== me.armor.publicKey && t3 !== me.armor.privateKey)
          throw Error("Armored text not of type key");
        a2 = i3;
      } else
        a2 = t2;
      return oc(await uo.fromBinary(a2, hc, r2));
    }, exports.readKeys = async function({ armoredKeys: e2, binaryKeys: t2, config: r2, ...i2 }) {
      r2 = { ...ge, ...r2 };
      let n2 = e2 || t2;
      if (!n2)
        throw Error("readKeys: must pass options object containing `armoredKeys` or `binaryKeys`");
      if (e2 && !ce.isString(e2))
        throw Error("readKeys: options.armoredKeys must be a string");
      if (t2 && !ce.isUint8Array(t2))
        throw Error("readKeys: options.binaryKeys must be a Uint8Array");
      const a2 = Object.keys(i2);
      if (a2.length > 0)
        throw Error("Unknown option: " + a2.join(", "));
      if (e2) {
        const { type: t3, data: i3 } = await Pe(e2, r2);
        if (t3 !== me.armor.publicKey && t3 !== me.armor.privateKey)
          throw Error("Armored text not of type key");
        n2 = i3;
      }
      const s2 = [], o2 = await uo.fromBinary(n2, hc, r2), c2 = o2.indexOfTag(me.packet.publicKey, me.packet.secretKey);
      if (0 === c2.length)
        throw Error("No key packet found");
      for (let e3 = 0; e3 < c2.length; e3++) {
        const t3 = oc(o2.slice(c2[e3], c2[e3 + 1]));
        s2.push(t3);
      }
      return s2;
    }, exports.readMessage = async function({ armoredMessage: e2, binaryMessage: t2, config: r2, ...i2 }) {
      r2 = { ...ge, ...r2 };
      let n2 = e2 || t2;
      if (!n2)
        throw Error("readMessage: must pass options object containing `armoredMessage` or `binaryMessage`");
      if (e2 && !ce.isString(e2) && !ce.isStream(e2))
        throw Error("readMessage: options.armoredMessage must be a string or stream");
      if (t2 && !ce.isUint8Array(t2) && !ce.isStream(t2))
        throw Error("readMessage: options.binaryMessage must be a Uint8Array or stream");
      const a2 = Object.keys(i2);
      if (a2.length > 0)
        throw Error("Unknown option: " + a2.join(", "));
      const s2 = ce.isStream(n2);
      if (s2 && (await F(), n2 = j(n2)), e2) {
        const { type: e3, data: t3 } = await Pe(n2, r2);
        if (e3 !== me.armor.message)
          throw Error("Armored text not of type message");
        n2 = t3;
      }
      const o2 = await uo.fromBinary(n2, dc, r2), c2 = new yc(o2);
      return c2.fromStream = s2, c2;
    }, exports.readPrivateKey = async function({ armoredKey: e2, binaryKey: t2, config: r2, ...i2 }) {
      if (r2 = { ...ge, ...r2 }, !e2 && !t2)
        throw Error("readPrivateKey: must pass options object containing `armoredKey` or `binaryKey`");
      if (e2 && !ce.isString(e2))
        throw Error("readPrivateKey: options.armoredKey must be a string");
      if (t2 && !ce.isUint8Array(t2))
        throw Error("readPrivateKey: options.binaryKey must be a Uint8Array");
      const n2 = Object.keys(i2);
      if (n2.length > 0)
        throw Error("Unknown option: " + n2.join(", "));
      let a2;
      if (e2) {
        const { type: t3, data: i3 } = await Pe(e2, r2);
        if (t3 !== me.armor.privateKey)
          throw Error("Armored text not of type private key");
        a2 = i3;
      } else
        a2 = t2;
      const s2 = await uo.fromBinary(a2, hc, r2);
      return new uc(s2);
    }, exports.readPrivateKeys = async function({ armoredKeys: e2, binaryKeys: t2, config: r2 }) {
      r2 = { ...ge, ...r2 };
      let i2 = e2 || t2;
      if (!i2)
        throw Error("readPrivateKeys: must pass options object containing `armoredKeys` or `binaryKeys`");
      if (e2 && !ce.isString(e2))
        throw Error("readPrivateKeys: options.armoredKeys must be a string");
      if (t2 && !ce.isUint8Array(t2))
        throw Error("readPrivateKeys: options.binaryKeys must be a Uint8Array");
      if (e2) {
        const { type: t3, data: n3 } = await Pe(e2, r2);
        if (t3 !== me.armor.privateKey)
          throw Error("Armored text not of type private key");
        i2 = n3;
      }
      const n2 = [], a2 = await uo.fromBinary(i2, hc, r2), s2 = a2.indexOfTag(me.packet.secretKey);
      if (0 === s2.length)
        throw Error("No secret key packet found");
      for (let e3 = 0; e3 < s2.length; e3++) {
        const t3 = a2.slice(s2[e3], s2[e3 + 1]), r3 = new uc(t3);
        n2.push(r3);
      }
      return n2;
    }, exports.readSignature = async function({ armoredSignature: e2, binarySignature: t2, config: r2, ...i2 }) {
      r2 = { ...ge, ...r2 };
      let n2 = e2 || t2;
      if (!n2)
        throw Error("readSignature: must pass options object containing `armoredSignature` or `binarySignature`");
      if (e2 && !ce.isString(e2))
        throw Error("readSignature: options.armoredSignature must be a string");
      if (t2 && !ce.isUint8Array(t2))
        throw Error("readSignature: options.binarySignature must be a Uint8Array");
      const a2 = Object.keys(i2);
      if (a2.length > 0)
        throw Error("Unknown option: " + a2.join(", "));
      if (e2) {
        const { type: e3, data: t3 } = await Pe(n2, r2);
        if (e3 !== me.armor.signature)
          throw Error("Armored text not of type signature");
        n2 = t3;
      }
      const s2 = await uo.fromBinary(n2, zo, r2);
      return new qo(s2);
    }, exports.reformatKey = async function({ privateKey: e2, userIDs: t2 = [], passphrase: r2, keyExpirationTime: i2 = 0, date: n2, format: a2 = "armored", config: s2, ...o2 }) {
      Sc(s2 = { ...ge, ...s2 }), t2 = Ec(t2);
      const c2 = Object.keys(o2);
      if (c2.length > 0)
        throw Error("Unknown option: " + c2.join(", "));
      if (0 === t2.length)
        throw Error("UserIDs are required for key reformat");
      const u2 = { privateKey: e2, userIDs: t2, passphrase: r2, keyExpirationTime: i2, date: n2 };
      try {
        const { key: e3, revocationCertificate: t3 } = await async function(e4, t4) {
          e4 = o3(e4);
          const { privateKey: r3 } = e4;
          if (!r3.isPrivate())
            throw Error("Cannot reformat a public key");
          if (r3.keyPacket.isDummy())
            throw Error("Cannot reformat a gnu-dummy primary key");
          if (!r3.getKeys().every(({ keyPacket: e5 }) => e5.isDecrypted()))
            throw Error("Key is not decrypted");
          const i3 = r3.keyPacket;
          e4.subkeys || (e4.subkeys = await Promise.all(r3.subkeys.map(async (e5) => {
            const r4 = e5.keyPacket, n4 = { key: i3, bind: r4 }, a4 = await No(e5.bindingSignatures, i3, me.signature.subkeyBinding, n4, null, t4).catch(() => ({}));
            return { sign: a4.keyFlags && a4.keyFlags[0] & me.keyFlags.signData };
          })));
          const n3 = r3.subkeys.map((e5) => e5.keyPacket);
          if (e4.subkeys.length !== n3.length)
            throw Error("Number of subkey options does not match number of subkeys");
          e4.subkeys = e4.subkeys.map((t5) => o3(t5, e4));
          const a3 = await fc(i3, n3, e4, t4), s3 = await a3.getRevocationCertificate(e4.date, t4);
          return a3.revocationSignatures = [], { key: a3, revocationCertificate: s3 };
          function o3(e5, t5 = {}) {
            return e5.keyExpirationTime = e5.keyExpirationTime || t5.keyExpirationTime, e5.passphrase = ce.isString(e5.passphrase) ? e5.passphrase : t5.passphrase, e5.date = e5.date || t5.date, e5;
          }
        }(u2, s2);
        return { privateKey: Mc(e3, a2, s2), publicKey: Mc(e3.toPublic(), a2, s2), revocationCertificate: t3 };
      } catch (e3) {
        throw ce.wrapError("Error reformatting keypair", e3);
      }
    }, exports.revokeKey = async function({ key: e2, revocationCertificate: t2, reasonForRevocation: r2, date: i2 = new Date(), format: n2 = "armored", config: a2, ...s2 }) {
      Sc(a2 = { ...ge, ...a2 });
      const o2 = Object.keys(s2);
      if (o2.length > 0)
        throw Error("Unknown option: " + o2.join(", "));
      try {
        const s3 = t2 ? await e2.applyRevocationCertificate(t2, i2, a2) : await e2.revoke(r2, i2, a2);
        return s3.isPrivate() ? { privateKey: Mc(s3, n2, a2), publicKey: Mc(s3.toPublic(), n2, a2) } : { privateKey: null, publicKey: Mc(s3, n2, a2) };
      } catch (e3) {
        throw ce.wrapError("Error revoking key", e3);
      }
    }, exports.sign = async function({ message: e2, signingKeys: t2, format: r2 = "armored", detached: i2 = false, signingKeyIDs: n2 = [], date: a2 = new Date(), signingUserIDs: s2 = [], config: o2, ...c2 }) {
      if (Sc(o2 = { ...ge, ...o2 }), _c(e2), kc(r2), t2 = Ec(t2), n2 = Ec(n2), s2 = Ec(s2), c2.privateKeys)
        throw Error("The `privateKeys` option has been removed from openpgp.sign, pass `signingKeys` instead");
      if (void 0 !== c2.armor)
        throw Error("The `armor` option has been removed from openpgp.sign, pass `format` instead.");
      const u2 = Object.keys(c2);
      if (u2.length > 0)
        throw Error("Unknown option: " + u2.join(", "));
      if (e2 instanceof wc && "binary" === r2)
        throw Error("Cannot return signed cleartext message in binary format");
      if (e2 instanceof wc && i2)
        throw Error("Cannot detach-sign a cleartext message");
      if (!t2 || 0 === t2.length)
        throw Error("No signing keys provided");
      try {
        let c3;
        if (c3 = i2 ? await e2.signDetached(t2, void 0, n2, a2, s2, o2) : await e2.sign(t2, void 0, n2, a2, s2, o2), "object" === r2)
          return c3;
        const u3 = "armored" === r2;
        return c3 = u3 ? c3.armor(o2) : c3.write(), i2 && (c3 = X(e2.packets.write(), async (e3, t3) => {
          await Promise.all([V(c3, t3), ie(e3).catch(() => {
          })]);
        })), Pc(c3, e2.fromStream, u3 ? "utf8" : "binary");
      } catch (e3) {
        throw ce.wrapError("Error signing message", e3);
      }
    }, exports.unarmor = Pe, exports.verify = async function({ message: e2, verificationKeys: t2, expectSigned: r2 = false, format: i2 = "utf8", signature: n2 = null, date: a2 = new Date(), config: s2, ...o2 }) {
      if (Sc(s2 = { ...ge, ...s2 }), _c(e2), t2 = Ec(t2), o2.publicKeys)
        throw Error("The `publicKeys` option has been removed from openpgp.verify, pass `verificationKeys` instead");
      const c2 = Object.keys(o2);
      if (c2.length > 0)
        throw Error("Unknown option: " + c2.join(", "));
      if (e2 instanceof wc && "binary" === i2)
        throw Error("Can't return cleartext message data as binary");
      if (e2 instanceof wc && n2)
        throw Error("Can't verify detached cleartext signature");
      try {
        const o3 = {};
        if (o3.signatures = n2 ? await e2.verifyDetached(n2, t2, a2, s2) : await e2.verify(t2, a2, s2), o3.data = "binary" === i2 ? e2.getLiteralData() : e2.getText(), e2.fromStream && xc(o3, e2), r2) {
          if (0 === o3.signatures.length)
            throw Error("Message is not signed");
          o3.data = W([o3.data, ae(async () => {
            await ce.anyPromise(o3.signatures.map((e3) => e3.verified));
          })]);
        }
        return o3.data = await Pc(o3.data, e2.fromStream, i2), o3;
      } catch (e3) {
        throw ce.wrapError("Error verifying signed message", e3);
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  CODECLIMATE_GPG_PUBLIC_KEY_ID: () => CODECLIMATE_GPG_PUBLIC_KEY_ID,
  run: () => run
});
module.exports = __toCommonJS(main_exports);
var import_os = require("os");
var import_process = require("process");
var import_core2 = __toESM(require_core());
var import_exec = __toESM(require_exec());
var import_github = __toESM(require_github());
var glob = __toESM(require_glob());

// src/utils.ts
var import_crypto4 = require("crypto");
var import_fs = require("fs");
var import_util = require("util");
var import_core = __toESM(require_core());
var import_node_fetch = __toESM(require_lib3());
var import_openpgp = __toESM(require_openpgp_min());
var readFileAsync = (0, import_util.promisify)(import_fs.readFile);
var getOptionalString = (name, defaultValue = "") => (0, import_core.getInput)(name, { required: false }) || defaultValue;
function downloadToFile(url, file, mode = 493) {
  return new Promise((resolve, reject) => __async(this, null, function* () {
    try {
      const response = yield (0, import_node_fetch.default)(url, { timeout: 2 * 60 * 1e3 });
      const writer = (0, import_fs.createWriteStream)(file, { mode });
      response.body.pipe(writer);
      writer.on("close", () => {
        return resolve();
      });
    } catch (err) {
      return reject(err);
    }
  }));
}
function getFileContents(filePath, options) {
  return __async(this, null, function* () {
    return yield readFileAsync(filePath, options);
  });
}
function getFileContentsAsString(filePath, options) {
  return __async(this, null, function* () {
    return (yield getFileContents(filePath, options)).toString("utf8");
  });
}
function getFileChecksum(filePath, algorithm = "sha256") {
  return __async(this, null, function* () {
    const fileContents = yield getFileContents(filePath);
    return (0, import_crypto4.createHash)(algorithm).update(fileContents).digest("hex");
  });
}
function verifyChecksum(originalFile, checksumFile, algorithm = "sha256") {
  return __async(this, null, function* () {
    const binaryChecksum = yield getFileChecksum(originalFile, algorithm);
    const declaredChecksumFileContents = yield getFileContents(checksumFile);
    const declaredChecksum = declaredChecksumFileContents.toString().trim().split(" ")[0];
    try {
      return (0, import_crypto4.timingSafeEqual)(
        Buffer.from(binaryChecksum),
        Buffer.from(declaredChecksum)
      );
    } catch (e) {
      return false;
    }
  });
}
function verifySignature(messageFilePath, signatureFilePath, publicKeyFilePath) {
  return __async(this, null, function* () {
    const messageText = yield getFileContentsAsString(messageFilePath);
    const signatureBuffer = yield getFileContents(signatureFilePath);
    const publicKeyText = yield getFileContentsAsString(publicKeyFilePath);
    const publicKey = yield (0, import_openpgp.readKey)({
      armoredKey: publicKeyText
    });
    const signature = yield (0, import_openpgp.readSignature)({
      binarySignature: signatureBuffer
    });
    const message = yield (0, import_openpgp.createMessage)({ text: messageText });
    const verificationResult = yield (0, import_openpgp.verify)({
      message,
      signature,
      verificationKeys: publicKey
    });
    const { verified } = verificationResult.signatures[0];
    try {
      yield verified;
      return true;
    } catch (e) {
      return false;
    }
  });
}

// src/main.ts
var DOWNLOAD_URL = `https://codeclimate.com/downloads/test-reporter/test-reporter-latest-${(0, import_os.platform)()}-amd64`;
var EXECUTABLE = "./cc-reporter";
var CODECLIMATE_GPG_PUBLIC_KEY_ID = "9BD9E2DD46DA965A537E5B0A5CBF320243B6FD85";
var CODECLIMATE_GPG_PUBLIC_KEY_URL = `https://keys.openpgp.org/vks/v1/by-fingerprint/${CODECLIMATE_GPG_PUBLIC_KEY_ID}`;
var DEFAULT_COVERAGE_COMMAND = "";
var DEFAULT_WORKING_DIRECTORY = "";
var DEFAULT_CODECLIMATE_DEBUG = "false";
var DEFAULT_COVERAGE_LOCATIONS = "";
var DEFAULT_VERIFY_DOWNLOAD = "true";
var SUPPORTED_GITHUB_EVENTS = [
  "pull_request",
  "pull_request_target"
];
function prepareEnv() {
  var _a, _b;
  const env = process.env;
  if (process.env.GITHUB_SHA !== void 0)
    env.GIT_COMMIT_SHA = process.env.GITHUB_SHA;
  if (process.env.GITHUB_REF !== void 0)
    env.GIT_BRANCH = process.env.GITHUB_REF;
  if (env.GIT_BRANCH)
    env.GIT_BRANCH = env.GIT_BRANCH.replace(/^refs\/heads\//, "");
  if (process.env.GITHUB_EVENT_NAME && SUPPORTED_GITHUB_EVENTS.includes(process.env.GITHUB_EVENT_NAME)) {
    env.GIT_BRANCH = process.env.GITHUB_HEAD_REF || env.GIT_BRANCH;
    env.GIT_COMMIT_SHA = (_b = (_a = import_github.context.payload.pull_request) == null ? void 0 : _a["head"]) == null ? void 0 : _b["sha"];
  }
  return env;
}
function getLocationLines(coverageLocationPatternsParam) {
  return __async(this, null, function* () {
    const coverageLocationPatternsLines = coverageLocationPatternsParam.split(/\r?\n/).filter((pat) => pat).map((pat) => pat.trim());
    const patternsAndFormats = coverageLocationPatternsLines.map((line) => {
      const lineParts = line.split(":");
      const format = lineParts.slice(-1)[0];
      const pattern = lineParts.slice(0, -1)[0];
      return { format, pattern };
    });
    const pathsWithFormat = yield Promise.all(
      patternsAndFormats.map((_0) => __async(this, [_0], function* ({ format, pattern }) {
        const globber = yield glob.create(pattern);
        const paths = yield globber.glob();
        const pathsWithFormat2 = paths.map(
          (singlePath) => `${singlePath}:${format}`
        );
        return pathsWithFormat2;
      }))
    );
    const coverageLocationLines = [].concat(
      ...pathsWithFormat
    );
    return coverageLocationLines;
  });
}
function run(downloadUrl = DOWNLOAD_URL, executable = EXECUTABLE, coverageCommand = DEFAULT_COVERAGE_COMMAND, workingDirectory = DEFAULT_WORKING_DIRECTORY, codeClimateDebug = DEFAULT_CODECLIMATE_DEBUG, coverageLocationsParam = DEFAULT_COVERAGE_LOCATIONS, coveragePrefix, verifyDownload = DEFAULT_VERIFY_DOWNLOAD) {
  return new Promise((resolve, reject) => __async(this, null, function* () {
    if ((0, import_os.platform)() === "win32") {
      const err = new Error("CC Reporter is not supported on Windows!");
      (0, import_core2.error)(err.message);
      (0, import_core2.error)("\u{1F6A8} CodeClimate Reporter will not run on Windows!");
      return reject(err);
    }
    let lastExitCode = 1;
    if (workingDirectory) {
      (0, import_core2.debug)(`Changing working directory to ${workingDirectory}`);
      try {
        (0, import_process.chdir)(workingDirectory);
        lastExitCode = 0;
        (0, import_core2.debug)("\u2705 Changing working directory completed...");
      } catch (err) {
        (0, import_core2.error)(err.message);
        (0, import_core2.error)("\u{1F6A8} Changing working directory failed!");
        return reject(err);
      }
    }
    try {
      (0, import_core2.debug)(`\u2139\uFE0F Downloading CC Reporter from ${downloadUrl} ...`);
      yield downloadToFile(downloadUrl, executable);
      (0, import_core2.debug)("\u2705 CC Reporter downloaded...");
    } catch (err) {
      (0, import_core2.error)(err.message);
      (0, import_core2.error)("\u{1F6A8} CC Reporter download failed!");
      (0, import_core2.warning)(`Could not download ${downloadUrl}`);
      (0, import_core2.warning)(
        `Please check if your platform is supported \u2014 see https://docs.codeclimate.com/docs/configuring-test-coverage#section-locations-of-pre-built-binaries`
      );
      return reject(err);
    }
    if (verifyDownload === "true") {
      const checksumUrl = `${downloadUrl}.sha256`;
      const checksumFilePath = `${executable}.sha256`;
      const signatureUrl = `${downloadUrl}.sha256.sig`;
      const signatureFilePath = `${executable}.sha256.sig`;
      const ccPublicKeyFilePath = "public-key.asc";
      try {
        (0, import_core2.debug)(`\u2139\uFE0F Verifying CC Reporter checksum...`);
        yield downloadToFile(checksumUrl, checksumFilePath);
        const checksumVerified = yield verifyChecksum(
          executable,
          checksumFilePath,
          "sha256"
        );
        if (!checksumVerified)
          throw new Error("CC Reporter checksum does not match!");
        (0, import_core2.debug)("\u2705 CC Reported checksum verification completed...");
      } catch (err) {
        (0, import_core2.error)(err.message);
        (0, import_core2.error)("\u{1F6A8} CC Reporter checksum verfication failed!");
        return reject(err);
      }
      try {
        (0, import_core2.debug)(`\u2139\uFE0F Verifying CC Reporter GPG signature...`);
        yield downloadToFile(signatureUrl, signatureFilePath);
        yield downloadToFile(
          CODECLIMATE_GPG_PUBLIC_KEY_URL,
          ccPublicKeyFilePath
        );
        const signatureVerified = yield verifySignature(
          checksumFilePath,
          signatureFilePath,
          ccPublicKeyFilePath
        );
        if (!signatureVerified)
          throw new Error("CC Reporter GPG signature is invalid!");
        (0, import_core2.debug)("\u2705 CC Reported GPG signature verification completed...");
      } catch (err) {
        (0, import_core2.error)(err.message);
        (0, import_core2.error)("\u{1F6A8} CC Reporter GPG signature verfication failed!");
        return reject(err);
      }
    }
    const execOpts = {
      env: prepareEnv()
    };
    try {
      lastExitCode = yield (0, import_exec.exec)(executable, ["before-build"], execOpts);
      if (lastExitCode !== 0) {
        throw new Error(
          `Coverage after-build exited with code ${lastExitCode}`
        );
      }
      (0, import_core2.debug)("\u2705 CC Reporter before-build checkin completed...");
    } catch (err) {
      (0, import_core2.error)(err.message);
      (0, import_core2.error)("\u{1F6A8} CC Reporter before-build checkin failed!");
      return reject(err);
    }
    if (coverageCommand) {
      try {
        lastExitCode = yield (0, import_exec.exec)(coverageCommand, void 0, execOpts);
        if (lastExitCode !== 0) {
          throw new Error(`Coverage run exited with code ${lastExitCode}`);
        }
        (0, import_core2.debug)("\u2705 Coverage run completed...");
      } catch (err) {
        (0, import_core2.error)(err.message);
        (0, import_core2.error)("\u{1F6A8} Coverage run failed!");
        return reject(err);
      }
    } else {
      (0, import_core2.info)(
        `\u2139\uFE0F 'coverageCommand' not set, so skipping building coverage report!`
      );
    }
    const coverageLocations = yield getLocationLines(coverageLocationsParam);
    if (coverageLocations.length > 0) {
      (0, import_core2.debug)(
        `Parsing ${coverageLocations.length} coverage location(s) \u2014 ${coverageLocations} (${typeof coverageLocations})`
      );
      const parts = [];
      for (const i in coverageLocations) {
        const [location, type] = coverageLocations[i].split(":");
        if (!type) {
          const err = new Error(`Invalid formatter type ${type}`);
          (0, import_core2.debug)(
            `\u26A0\uFE0F Could not find coverage formatter type! Found ${coverageLocations[i]} (${typeof coverageLocations[i]})`
          );
          (0, import_core2.error)(err.message);
          (0, import_core2.error)(
            "\u{1F6A8} Coverage formatter type not set! Each coverage location should be of the format <file_path>:<coverage_format>"
          );
          return reject(err);
        }
        const commands = [
          "format-coverage",
          location,
          "-t",
          type,
          "-o",
          `codeclimate.${i}.json`
        ];
        if (codeClimateDebug === "true")
          commands.push("--debug");
        if (coveragePrefix) {
          commands.push("--prefix", coveragePrefix);
        }
        parts.push(`codeclimate.${i}.json`);
        try {
          lastExitCode = yield (0, import_exec.exec)(executable, commands, execOpts);
          if (lastExitCode !== 0) {
            throw new Error(
              `Coverage formatter exited with code ${lastExitCode}`
            );
          }
        } catch (err) {
          (0, import_core2.error)(err.message);
          (0, import_core2.error)("\u{1F6A8} CC Reporter coverage formatting failed!");
          return reject(err);
        }
      }
      const sumCommands = [
        "sum-coverage",
        ...parts,
        "-p",
        `${coverageLocations.length}`,
        "-o",
        `coverage.total.json`
      ];
      if (codeClimateDebug === "true")
        sumCommands.push("--debug");
      try {
        lastExitCode = yield (0, import_exec.exec)(executable, sumCommands, execOpts);
        if (lastExitCode !== 0) {
          throw new Error(
            `Coverage sum process exited with code ${lastExitCode}`
          );
        }
      } catch (err) {
        (0, import_core2.error)(err.message);
        (0, import_core2.error)("\u{1F6A8} CC Reporter coverage sum failed!");
        return reject(err);
      }
      const uploadCommands = ["upload-coverage", "-i", `coverage.total.json`];
      if (codeClimateDebug === "true")
        uploadCommands.push("--debug");
      try {
        lastExitCode = yield (0, import_exec.exec)(executable, uploadCommands, execOpts);
        if (lastExitCode !== 0) {
          throw new Error(`Coverage upload exited with code ${lastExitCode}`);
        }
        (0, import_core2.debug)("\u2705 CC Reporter upload coverage completed!");
        return resolve();
      } catch (err) {
        (0, import_core2.error)(err.message);
        (0, import_core2.error)("\u{1F6A8} CC Reporter coverage upload failed!");
        return resolve();
      }
    }
    try {
      const commands = ["after-build", "--exit-code", lastExitCode.toString()];
      if (codeClimateDebug === "true")
        commands.push("--debug");
      if (coveragePrefix) {
        commands.push("--prefix", coveragePrefix);
      }
      lastExitCode = yield (0, import_exec.exec)(executable, commands, execOpts);
      if (lastExitCode !== 0) {
        throw new Error(
          `Coverage after-build exited with code ${lastExitCode}`
        );
      }
      (0, import_core2.debug)("\u2705 CC Reporter after-build checkin completed!");
      return resolve();
    } catch (err) {
      (0, import_core2.error)(err.message);
      (0, import_core2.error)("\u{1F6A8} CC Reporter after-build checkin failed!");
      return reject(err);
    }
  }));
}
if (require.main === module) {
  const coverageCommand = getOptionalString(
    "coverageCommand",
    DEFAULT_COVERAGE_COMMAND
  );
  const workingDirectory = getOptionalString(
    "workingDirectory",
    DEFAULT_WORKING_DIRECTORY
  );
  const codeClimateDebug = getOptionalString(
    "debug",
    DEFAULT_CODECLIMATE_DEBUG
  );
  const coverageLocations = getOptionalString(
    "coverageLocations",
    DEFAULT_COVERAGE_LOCATIONS
  );
  const coveragePrefix = getOptionalString("prefix");
  const verifyDownload = getOptionalString(
    "verifyDownload",
    DEFAULT_VERIFY_DOWNLOAD
  );
  run(
    DOWNLOAD_URL,
    EXECUTABLE,
    coverageCommand,
    workingDirectory,
    codeClimateDebug,
    coverageLocations,
    coveragePrefix,
    verifyDownload
  ).catch((err) => {
    process.exit(0);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CODECLIMATE_GPG_PUBLIC_KEY_ID,
  run
});
